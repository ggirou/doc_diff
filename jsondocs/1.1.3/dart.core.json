{"dependencies":[{"kind":"library","name":"dart:collection","id":"dart.collection","comment":"\nClasses and utilities that supplement the collection support in dart:core.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]}],"kind":"class","name":"IterableBase","id":"IterableBase","comment":"\nBase class for implementing [Iterable].\n\nThis class implements all methods of [Iterable] except [Iterable.iterator]\nin terms of `iterator`.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"207"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"209"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"209"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"211"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"211"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"214"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"221"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"221"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"225"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"225"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"225"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/iterable.dart","line":"238"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"238"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"238"}],"line":"237"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"244"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"244"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"251"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"269"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"269"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"276"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"279"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"295"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"299"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"299"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"303"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"307"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"307"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"339"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"339"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"347"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"347"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"361"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"361"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"377"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of (some of) the elements of `this`.\n\nElements are represented by their own `toString` results.\n\nThe representation always contains the first three elements.\nIf there are less than a hundred elements in the iterable, it also\ncontains the last two elements.\n\nIf the resulting string isn't above 80 characters, more elements are\nincluded from the start of the iterable.\n\nThe conversion may omit calling `toString` on some elements if they\nare known to now occur in the output, and it may stop iterating after\na hundred elements.\n","line":"403"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"281"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"291"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"293"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"first","id":"first","line":"311"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"last","id":"last","line":"319"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"single","id":"single","line":"331"},{"kind":"constructor","name":"","id":"0()","line":"205"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/iterable.dart","line":"202"}],"uri":"dart-sdk/lib/collection/collection.dart","line":"8"},{"kind":"library","name":"dart:_collection-dev","id":"dart._collection.dev","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"EfficientLength","id":"EfficientLength","comment":"\nMarker interface for [Iterable] subclasses that have an efficient\n[length] implementation.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in the iterable.\n\nThis is an efficient operation that doesn't require iterating through\nthe elements.\n","line":"18"}],"uri":"dart-sdk/lib/_collection_dev/iterable.dart","line":"11"}],"uri":"dart-sdk/lib/_collection_dev/collection_dev.dart","line":"5"}],"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_combineSurrogatePair","id":"_combineSurrogatePair2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"uri":"dart-sdk/lib/core/string.dart","line":"515"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_isTrailSurrogate","id":"_isTrailSurrogate1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"code","id":"code"}],"isPrivate":true,"uri":"dart-sdk/lib/core/string.dart","line":"512"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_isLeadSurrogate","id":"_isLeadSurrogate1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"code","id":"code"}],"isPrivate":true,"uri":"dart-sdk/lib/core/string.dart","line":"509"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"print","id":"print1()","comment":"Prints a string representation of the object to the console.","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"uri":"dart-sdk/lib/core/print.dart","line":"8"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"identityHashCode","id":"identityHashCode1()","comment":"\nReturns the identity hash code of `object`.\n\nReturns the same value as `object.hashCode` if [object] has not overridden\n[Object.hashCode]. Returns the value that [Object.hashCode] would return\non this object, even if `hashCode` has been overridden.\n\nThis hash code is compatible with [identical].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"uri":"dart-sdk/lib/core/identical.dart","line":"21"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"identical","id":"identical2()","comment":"\nCheck whether two references are to the same object.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"b","id":"b"}],"uri":"dart-sdk/lib/core/identical.dart","line":"10"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"variable","name":"proxy","id":"proxy","comment":"\nThe annotation `@proxy` marks a class as implementing interfaces and members\ndynamically through `noSuchMethod`.\n\nThe annotation applies to any class. It is inherited by subclasses from both\nsuperclass and interfaces.\n\nIf a class is annotated with `@proxy`, or it implements any class that is\nannotated, then the class is considered to implement any interface and\nany member with regard to static type analysis. As such, it is not a static\ntype warning to assign the object to a variable of any type, and it is not\na static type warning to access any member of the object.\n\nThis only applies to static type warnings. The runtime type of the object\nis unaffected. It is not considered to implement any special interfaces at\nruntime, so assigning it to a typed variable may fail in checked mode, and\ntesting it with the `is` operator will not work for any type except the\nones it actually implements.\n\nTools that understand `@proxy` should tell the user if a class using `@proxy`\ndoes not override the `noSuchMethod` declared on [Object].\n\nThe intent of the `@proxy` notation is to create objects that implement a\ntype (or multiple types) that are not known at compile time. If the types\nare known at compile time, a class can be written that implements these\ntypes.\n","uri":"dart-sdk/lib/core/annotations.dart","line":"142"},{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"variable","name":"override","id":"override","uri":"dart-sdk/lib/core/annotations.dart","line":"109"},{"ref":{"name":"Deprecated","refId":"dart.core/Deprecated"},"kind":"variable","name":"deprecated","id":"deprecated","comment":"\nMarks a feature as [Deprecated] until the next release.\n","uri":"dart-sdk/lib/core/annotations.dart","line":"82"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/_UnmodifiableMap/K"},{"name":"V","refId":"dart.core/_UnmodifiableMap/V"}]}],"kind":"class","name":"_UnmodifiableMap","id":"_UnmodifiableMap","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsValue","id":"containsValue1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"1675"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsKey","id":"containsKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"1676"},{"returnType":{"name":"V","refId":"dart.core/_UnmodifiableMap/V"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"1677"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","children":[{"ref":{"name":"K","refId":"dart.core/_UnmodifiableMap/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"V","refId":"dart.core/_UnmodifiableMap/V"},"kind":"param","name":"value","id":"value"}],"line":"1678"},{"returnType":{"name":"V","refId":"dart.core/_UnmodifiableMap/V"},"kind":"method","name":"putIfAbsent","id":"putIfAbsent2()","children":[{"ref":{"name":"K","refId":"dart.core/_UnmodifiableMap/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"name":"V","refId":"dart.core/_UnmodifiableMap/V"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"1681"},{"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"other","id":"other"}],"line":"1684"},{"returnType":{"name":"V","refId":"dart.core/_UnmodifiableMap/V"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"1687"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"1690"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.core/_UnmodifiableMap/K"},"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/core/uri.dart","line":"1693"},{"ref":{"name":"V","refId":"dart.core/_UnmodifiableMap/V"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/uri.dart","line":"1693"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"1693"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.core/_UnmodifiableMap/K"}]},"kind":"property","name":"keys","id":"keys","line":"1694"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.core/_UnmodifiableMap/V"}]},"kind":"property","name":"values","id":"values","line":"1695"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"1696"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"1697"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"1698"},{"ref":{"name":"Map","refId":"dart.core/Map"},"isFinal":true,"kind":"variable","name":"_map","id":"_map","isPrivate":true,"line":"1672"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"initializedField":{"name":"_map","refId":"dart.core/_UnmodifiableMap/_map"},"kind":"param","name":"_map","id":"_map","isPrivate":true}],"line":"1673"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"isPrivate":true,"uri":"dart-sdk/lib/core/uri.dart","line":"1671"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Uri","id":"Uri","comment":"\nA parsed URI, such as a URL.\n\n**See also:**\n\n* [URIs][uris] in the [library tour][libtour]\n* [RFC-3986](http://tools.ietf.org/html/rfc3986)\n\n[uris]: http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-uri\n[libtour]: http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html\n","children":[{"returnType":{"name":"Uri","refId":"dart.core/Uri"},"isStatic":true,"kind":"method","name":"parse","id":"parse1()","comment":"\nCreates a new URI object by parsing a URI string.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"uri","id":"uri"}],"line":"121"},{"returnType":{"name":"Uri","refId":"dart.core/Uri"},"isStatic":true,"kind":"method","name":"_makeHttpUri","id":"_makeHttpUri4()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"scheme","id":"scheme"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"authority","id":"authority","line":"246"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"unencodedPath","id":"unencodedPath","line":"247"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"queryParameters","id":"queryParameters","line":"248"}],"isPrivate":true,"line":"245"},{"isStatic":true,"kind":"method","name":"_checkNonWindowsPathReservedCharacters","id":"_checkNonWindowsPathReservedCharacters2()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"segments","id":"segments"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"argumentError","id":"argumentError","line":"375"}],"isPrivate":true,"line":"374"},{"isStatic":true,"kind":"method","name":"_checkWindowsPathReservedCharacters","id":"_checkWindowsPathReservedCharacters3()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"segments","id":"segments"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"argumentError","id":"argumentError","line":"388"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"firstSegment","id":"firstSegment","line":"389"}],"isPrivate":true,"line":"387"},{"isStatic":true,"kind":"method","name":"_checkWindowsDriveLetter","id":"_checkWindowsDriveLetter2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"charCode","id":"charCode"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"argumentError","id":"argumentError"}],"isPrivate":true,"line":"401"},{"isStatic":true,"kind":"method","name":"_makeFileUri","id":"_makeFileUri1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"isPrivate":true,"line":"415"},{"isStatic":true,"kind":"method","name":"_makeWindowsFileUrl","id":"_makeWindowsFileUrl1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"isPrivate":true,"line":"426"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_makeHost","id":"_makeHost1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"host","id":"host"}],"isPrivate":true,"line":"524"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_makeScheme","id":"_makeScheme1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"scheme","id":"scheme"}],"isPrivate":true,"line":"542"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_makePath","id":"_makePath2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"pathSegments","id":"pathSegments"}],"isPrivate":true,"line":"573"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_makeQuery","id":"_makeQuery2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"query","id":"query"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"queryParameters","id":"queryParameters"}],"isPrivate":true,"line":"591"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_makeFragment","id":"_makeFragment1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"fragment","id":"fragment"}],"isPrivate":true,"line":"614"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_normalize","id":"_normalize1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"component","id":"component"}],"isPrivate":true,"line":"619"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_emptyIfNull","id":"_emptyIfNull1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"val","id":"val"}],"isPrivate":true,"line":"722"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"_parseIntOrZero","id":"_parseIntOrZero1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"val","id":"val"}],"isPrivate":true,"line":"724"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_eitherOf","id":"_eitherOf2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"val1","id":"val1"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"val2","id":"val2"}],"isPrivate":true,"line":"732"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_merge","id":"_merge2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"base","id":"base"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reference","id":"reference"}],"isPrivate":true,"line":"779"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_hasDotSegments","id":"_hasDotSegments1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"isPrivate":true,"line":"784"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_removeDotSegments","id":"_removeDotSegments1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"}],"isPrivate":true,"line":"790"},{"returnType":{"name":"Uri","refId":"dart.core/Uri"},"kind":"method","name":"resolve","id":"resolve1()","comment":"\nResolve [reference] as an URI relative to `this`.\n\nFirst turn [reference] into a URI using [Uri.parse]. Then resolve the\nresulting URI relative to `this`.\n\nReturns the resolved URI.\n\nSee [resolveUri] for details.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reference","id":"reference"}],"line":"820"},{"returnType":{"name":"Uri","refId":"dart.core/Uri"},"kind":"method","name":"resolveUri","id":"resolveUri1()","comment":"\nResolve [reference] as an URI relative to `this`.\n\nReturns the resolved URI.\n\nThe algorithm for resolving a reference is described in\n[RFC-3986 Section 5]\n(http://tools.ietf.org/html/rfc3986#section-5 \"RFC-1123\").\n","children":[{"ref":{"name":"Uri","refId":"dart.core/Uri"},"kind":"param","name":"reference","id":"reference"}],"line":"833"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toFilePath","id":"toFilePath1()","comment":"\nReturns the file path from a file URI.\n\nThe returned path has either Windows or non-Windows\nsemantics.\n\nFor non-Windows semantics the slash (\"/\") is used to separate\npath segments.\n\nFor Windows semantics the backslash (\"\\\") separator is used to\nseparate path segments.\n\nIf the URI is absolute the path starts with a path separator\nunless Windows semantics is used and the first path segment is a\ndrive letter. When Windows semantics is used a host component in\nthe uri in interpreted as a file server and a UNC path is\nreturned.\n\nThe default for whether to use Windows or non-Windows semantics\ndetermined from the platform Dart is running on. When running in\nthe standalone VM this is detected by the VM based on the\noperating system. When running in a browser non-Windows semantics\nis always used.\n\nTo override the automatic detection of which semantics to use pass\na value for [windows]. Passing `true` will use Windows\nsemantics and passing `false` will use non-Windows semantics.\n\nIf the URI ends with a slash (i.e. the last path component is\nempty) the returned file path will also end with a slash.\n\nWith Windows semantics URIs starting with a drive letter cannot\nbe relative to the current drive on the designated drive. That is\nfor the URI `file:///c:abc` calling `toFilePath` will throw as a\npath segment cannot contain colon on Windows.\n\nExamples using non-Windows semantics (resulting of calling\ntoFilePath in comment):\n\n    Uri.parse(\"xxx/yyy\");  // xxx/yyy\n    Uri.parse(\"xxx/yyy/\");  // xxx/yyy/\n    Uri.parse(\"file:///xxx/yyy\");  // /xxx/yyy\n    Uri.parse(\"file:///xxx/yyy/\");  // /xxx/yyy/\n    Uri.parse(\"file:///C:\");  // /C:\n    Uri.parse(\"file:///C:a\");  // /C:a\n\nExamples using Windows semantics (resulting URI in comment):\n\n    Uri.parse(\"xxx/yyy\");  // xxx\\yyy\n    Uri.parse(\"xxx/yyy/\");  // xxx\\yyy\\\n    Uri.parse(\"file:///xxx/yyy\");  // \\xxx\\yyy\n    Uri.parse(\"file:///xxx/yyy/\");  // \\xxx\\yyy/\n    Uri.parse(\"file:///C:/xxx/yyy\");  // C:\\xxx\\yyy\n    Uri.parse(\"file:C:xxx/yyy\");  // Throws as a path segment\n                                  // cannot contain colon on Windows.\n    Uri.parse(\"file://server/share/file\");  // \\\\server\\share\\file\n\nIf the URI is not a file URI calling this throws\n[UnsupportedError].\n\nIf the URI cannot be converted to a file path calling this throws\n[UnsupportedError].\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"windows","id":"windows"}],"line":"974"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_toFilePath","id":"_toFilePath0()","isPrivate":true,"line":"995"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_toWindowsFilePath","id":"_toWindowsFilePath0()","isPrivate":true,"line":"1008"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_writeAuthority","id":"_writeAuthority1()","children":[{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"kind":"param","name":"ss","id":"ss"}],"isPrivate":true,"line":"1037"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"1046"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"1059"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_addIfNonEmpty","id":"_addIfNonEmpty4()","children":[{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"kind":"param","name":"sb","id":"sb"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"test","id":"test"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"first","id":"first","line":"1081"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"second","id":"second","line":"1081"}],"isPrivate":true,"line":"1080"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"encodeComponent","id":"encodeComponent1()","comment":"\nEncode the string [component] using percent-encoding to make it\nsafe for literal use as a URI component.\n\nAll characters except uppercase and lowercase letters, digits and\nthe characters `-_.!~*'()` are percent-encoded. This is the\nset of characters specified in RFC 2396 and the which is\nspecified for the encodeUriComponent in ECMA-262 version 5.1.\n\nWhen manually encoding path segments or query components remember\nto encode each part separately before building the path or query\nstring.\n\nFor encoding the query part consider using\n[encodeQueryComponent].\n\nTo avoid the need for explicitly encoding use the [pathSegments]\nand [queryParameters] optional named arguments when constructing\na [Uri].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"component","id":"component"}],"line":"1108"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"encodeQueryComponent","id":"encodeQueryComponent2()","comment":"\nEncode the string [component] according to the HTML 4.01 rules\nfor encoding the posting of a HTML form as a query string\ncomponent.\n\nEncode the string [component] according to the HTML 4.01 rules\nfor encoding the posting of a HTML form as a query string\ncomponent.\n\nThe component is first encoded to bytes using [encoding].\nThe default is to use [UTF8] encoding, which preserves all\nthe characters that don't need encoding.\n\nThen the resulting bytes are \"percent-encoded\". This transforms\nspaces (U+0020) to a plus sign ('+') and all bytes that are not\nthe ASCII decimal digits, letters or one of '-._~' are written as\na percent sign '%' followed by the two-digit hexadecimal\nrepresentation of the byte.\n\nNote that the set of characters which are percent-encoded is a\nsuperset of what HTML 4.01 requires, since it refers to RFC 1738\nfor reserved characters.\n\nWhen manually encoding query components remember to encode each\npart separately before building the query string.\n\nTo avoid the need for explicitly encoding the query use the\n[queryParameters] optional named arguments when constructing a\n[Uri].\n\nSee http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2 for more\ndetails.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"component","id":"component"},{"ref":{"name":"Encoding","refId":"dart.convert/Encoding"},"defaultValue":"UTF8","isOptional":true,"isNamed":true,"kind":"param","name":"encoding","id":"encoding","line":"1146"}],"line":"1145"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"decodeComponent","id":"decodeComponent1()","comment":"\nDecodes the percent-encoding in [encodedComponent].\n\nNote that decoding a URI component might change its meaning as\nsome of the decoded characters could be characters with are\ndelimiters for a given URI componene type. Always split a URI\ncomponent using the delimiters for the component before decoding\nthe individual parts.\n\nFor handling the [path] and [query] components consider using\n[pathSegments] and [queryParameters] to get the separated and\ndecoded component.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"encodedComponent","id":"encodedComponent"}],"line":"1164"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"decodeQueryComponent","id":"decodeQueryComponent2()","comment":"\nDecodes the percent-encoding in [encodedComponent], converting\npluses to spaces.\n\nIt will create a byte-list of the decoded characters, and then use\n[encoding] to decode the byte-list to a String. The default encoding is\nUTF-8.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"encodedComponent","id":"encodedComponent","line":"1177"},{"ref":{"name":"Encoding","refId":"dart.convert/Encoding"},"defaultValue":"UTF8","isOptional":true,"isNamed":true,"kind":"param","name":"encoding","id":"encoding","line":"1178"}],"line":"1176"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"encodeFull","id":"encodeFull1()","comment":"\nEncode the string [uri] using percent-encoding to make it\nsafe for literal use as a full URI.\n\nAll characters except uppercase and lowercase letters, digits and\nthe characters `!#$&'()*+,-./:;=?@_~` are percent-encoded. This\nis the set of characters specified in in ECMA-262 version 5.1 for\nthe encodeURI function .\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"uri","id":"uri"}],"line":"1191"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"decodeFull","id":"decodeFull1()","comment":"\nDecodes the percent-encoding in [uri].\n\nNote that decoding a full URI might change its meaning as some of\nthe decoded characters could be reserved characters. In most\ncases an encoded URI should be parsed into components using\n[Uri.parse] before decoding the separate components.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"uri","id":"uri"}],"line":"1203"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"isStatic":true,"kind":"method","name":"splitQueryString","id":"splitQueryString2()","comment":"\nReturns the [query] split into a map according to the rules\nspecified for FORM post in the\n[HTML 4.01 specification section 17.13.4]\n(http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4\n\"HTML 4.01 section 17.13.4\"). Each key and value in the returned\nmap has been decoded. If the [query]\nis the empty string an empty map is returned.\n\nKeys in the query string that have no value are mapped to the\nempty string.\n\nEach query component will be decoded using [encoding]. The default encoding\nis UTF-8.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"query","id":"query"},{"ref":{"name":"Encoding","refId":"dart.convert/Encoding"},"defaultValue":"UTF8","isOptional":true,"isNamed":true,"kind":"param","name":"encoding","id":"encoding","line":"1223"}],"line":"1222"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"isStatic":true,"kind":"method","name":"parseIPv4Address","id":"parseIPv4Address1()","comment":"\nParse the [host] as an IP version 4 (IPv4) address, returning the address\nas a list of 4 bytes in network byte order (big endian).\n\nThrows a [FormatException] if [host] is not a valid IPv4 address\nrepresentation.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"host","id":"host"}],"line":"1247"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"isStatic":true,"kind":"method","name":"parseIPv6Address","id":"parseIPv6Address1()","comment":"\nParse the [host] as an IP version 6 (IPv6) address, returning the address\nas a list of 16 bytes in network byte order (big endian).\n\nThrows a [FormatException] if [host] is not a valid IPv6 address\nrepresentation.\n\nSome examples of IPv6 addresses:\n * ::1\n * FEDC:BA98:7654:3210:FEDC:BA98:7654:3210\n * 3ffe:2a00:100:7031::1\n * ::FFFF:129.144.52.38\n * 2010:836B:4179::836B:4179\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"host","id":"host"}],"line":"1281"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_uriEncode","id":"_uriEncode4()","comment":"\nThis is the internal implementation of JavaScript's encodeURI function.\nIt encodes all characters in the string [text] except for those\nthat appear in [canonicalTable], and returns the escaped string.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"canonicalTable","id":"canonicalTable"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text","line":"1400"},{"ref":{"name":"Encoding","refId":"dart.convert/Encoding"},"defaultValue":"UTF8","isOptional":true,"isNamed":true,"kind":"param","name":"encoding","id":"encoding","line":"1401"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"spaceToPlus","id":"spaceToPlus","line":"1402"}],"isPrivate":true,"line":"1399"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"_hexCharPairToByte","id":"_hexCharPairToByte2()","comment":"\nConvert a byte (2 character hex sequence) in string [s] starting\nat position [pos] to its ordinal value\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"pos","id":"pos"}],"isPrivate":true,"line":"1432"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_uriDecode","id":"_uriDecode3()","comment":"\nUri-decode a percent-encoded string.\n\nIt unescapes the string [text] and returns the unescaped string.\n\nThis function is similar to the JavaScript-function `decodeURI`.\n\nIf [plusToSpace] is `true`, plus characters will be converted to spaces.\n\nThe decoder will create a byte-list of the percent-encoded parts, and then\ndecode the byte-list using [encoding]. The default encodingis UTF-8.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"plusToSpace","id":"plusToSpace","line":"1464"},{"ref":{"name":"Encoding","refId":"dart.convert/Encoding"},"defaultValue":"UTF8","isOptional":true,"isNamed":true,"kind":"param","name":"encoding","id":"encoding","line":"1465"}],"isPrivate":true,"line":"1463"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"_isAlphabeticCharacter","id":"_isAlphabeticCharacter1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"codeUnit","id":"codeUnit"}],"isPrivate":true,"line":"1502"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"authority","id":"authority","comment":"\nReturns the authority component.\n\nThe authority is formatted from the [userInfo], [host] and [port]\nparts.\n\nReturns the empty string if there is no authority component.\n","line":"38"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"host","id":"host","comment":"\nReturns the host part of the authority component.\n\nReturns the empty string if there is no authority component and\nhence no host.\n\nIf the host is an IP version 6 address, the surrounding `[` and `]` is\nremoved.\n","line":"62"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"port","id":"port","comment":"\nReturns the port part of the authority component.\n\nReturns 0 if there is no port in the authority component.\n","line":"74"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"path","id":"path","comment":"\nReturns the path component.\n\nThe returned path is encoded. To get direct access to the decoded\npath use [pathSegments].\n\nReturns the empty string if there is no path component.\n","line":"90"},{"ref":{"name":"Uri","refId":"dart.core/Uri"},"isStatic":true,"kind":"property","name":"base","id":"base","comment":"\nReturns the natural base URI for the current platform.\n\nWhen running in a browser this is the current URL (from\n`window.location.href`).\n\nWhen not running in a browser this is the file URI referencing\nthe current working directory.\n","line":"370"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"property","name":"_isWindows","id":"_isWindows","isPrivate":true,"line":"372"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"pathSegments","id":"pathSegments","comment":"\nReturns the URI path split into its segments. Each of the\nsegments in the returned list have been decoded. If the path is\nempty the empty list will be returned. A leading slash `/` does\nnot affect the segments returned.\n\nThe returned list is unmodifiable and will throw [UnsupportedError] on any\ncalls that would mutate it.\n","line":"490"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"queryParameters","id":"queryParameters","comment":"\nReturns the URI query split into a map according to the rules\nspecified for FORM post in the [HTML 4.01 specification section 17.13.4]\n(http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4\n\"HTML 4.01 section 17.13.4\"). Each key and value in the returned map\nhas been decoded. If there is no query the empty map is returned.\n\nKeys in the query string that have no value are mapped to the\nempty string.\n\nThe returned map is unmodifiable and will throw [UnsupportedError] on any\ncalls that would mutate it.\n","line":"517"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isAbsolute","id":"isAbsolute","comment":"\nReturns whether the URI is absolute.\n","line":"777"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"hasAuthority","id":"hasAuthority","comment":"\nReturns whether the URI has an [authority] component.\n","line":"889"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"origin","id":"origin","comment":"\nReturns the origin of the URI in the form scheme://host:port for the\nschemes http and https.\n\nIt is an error if the scheme is not \"http\" or \"https\".\n\nSee: http://www.w3.org/TR/2011/WD-html5-20110405/origin-0.html#origin\n","line":"899"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"_isPathAbsolute","id":"_isPathAbsolute","isPrivate":true,"line":"1032"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"1071"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_host","id":"_host","isPrivate":true,"line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_port","id":"_port","isPrivate":true,"line":"20"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_path","id":"_path","isPrivate":true,"line":"21"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"scheme","id":"scheme","comment":"\nReturns the scheme component.\n\nReturns the empty string if there is no scheme component.\n","line":"28"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"userInfo","id":"userInfo","comment":"\nReturns the user info part of the authority component.\n\nReturns the empty string if there is no user info in the\nauthority component.\n","line":"51"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"query","id":"query","comment":"\nReturns the query component. The returned query is encoded. To get\ndirect access to the decoded query use [queryParameters].\n\nReturns the empty string if there is no query component.\n","line":"98"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"fragment","id":"fragment","comment":"\nReturns the fragment identifier component.\n\nReturns the empty string if there is no fragment identifier\ncomponent.\n","line":"106"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_pathSegments","id":"_pathSegments","comment":"\nCache the computed return value of [pathSegements].\n","isPrivate":true,"line":"111"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"variable","name":"_queryParameters","id":"_queryParameters","comment":"\nCache the computed return value of [queryParameters].\n","isPrivate":true,"line":"116"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"isStatic":true,"isFinal":true,"kind":"variable","name":"_splitRe","id":"_splitRe","isPrivate":true,"line":"739"},{"isStatic":true,"kind":"variable","name":"_COMPONENT_SCHEME","id":"_COMPONENT_SCHEME","isPrivate":true,"line":"765"},{"isStatic":true,"kind":"variable","name":"_COMPONENT_USER_INFO","id":"_COMPONENT_USER_INFO","isPrivate":true,"line":"766"},{"isStatic":true,"kind":"variable","name":"_COMPONENT_HOST","id":"_COMPONENT_HOST","isPrivate":true,"line":"767"},{"isStatic":true,"kind":"variable","name":"_COMPONENT_HOST_IPV6","id":"_COMPONENT_HOST_IPV6","isPrivate":true,"line":"768"},{"isStatic":true,"kind":"variable","name":"_COMPONENT_PORT","id":"_COMPONENT_PORT","isPrivate":true,"line":"769"},{"isStatic":true,"kind":"variable","name":"_COMPONENT_PATH","id":"_COMPONENT_PATH","isPrivate":true,"line":"770"},{"isStatic":true,"kind":"variable","name":"_COMPONENT_QUERY_DATA","id":"_COMPONENT_QUERY_DATA","isPrivate":true,"line":"771"},{"isStatic":true,"kind":"variable","name":"_COMPONENT_FRAGMENT","id":"_COMPONENT_FRAGMENT","isPrivate":true,"line":"772"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_SPACE","id":"_SPACE","isPrivate":true,"line":"1370"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_DOUBLE_QUOTE","id":"_DOUBLE_QUOTE","isPrivate":true,"line":"1371"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_PERCENT","id":"_PERCENT","isPrivate":true,"line":"1372"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_ASTERISK","id":"_ASTERISK","isPrivate":true,"line":"1373"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_PLUS","id":"_PLUS","isPrivate":true,"line":"1374"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_SLASH","id":"_SLASH","isPrivate":true,"line":"1375"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_ZERO","id":"_ZERO","isPrivate":true,"line":"1376"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_NINE","id":"_NINE","isPrivate":true,"line":"1377"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_COLON","id":"_COLON","isPrivate":true,"line":"1378"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_LESS","id":"_LESS","isPrivate":true,"line":"1379"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_GREATER","id":"_GREATER","isPrivate":true,"line":"1380"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_QUESTION","id":"_QUESTION","isPrivate":true,"line":"1381"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_AT_SIGN","id":"_AT_SIGN","isPrivate":true,"line":"1382"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_UPPER_CASE_A","id":"_UPPER_CASE_A","isPrivate":true,"line":"1383"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_UPPER_CASE_F","id":"_UPPER_CASE_F","isPrivate":true,"line":"1384"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_UPPER_CASE_Z","id":"_UPPER_CASE_Z","isPrivate":true,"line":"1385"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_LEFT_BRACKET","id":"_LEFT_BRACKET","isPrivate":true,"line":"1386"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_BACKSLASH","id":"_BACKSLASH","isPrivate":true,"line":"1387"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_RIGHT_BRACKET","id":"_RIGHT_BRACKET","isPrivate":true,"line":"1388"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_LOWER_CASE_A","id":"_LOWER_CASE_A","isPrivate":true,"line":"1389"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_LOWER_CASE_F","id":"_LOWER_CASE_F","isPrivate":true,"line":"1390"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_LOWER_CASE_Z","id":"_LOWER_CASE_Z","isPrivate":true,"line":"1391"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_BAR","id":"_BAR","isPrivate":true,"line":"1392"},{"isStatic":true,"kind":"variable","name":"_unreservedTable","id":"_unreservedTable","isPrivate":true,"line":"1511"},{"isStatic":true,"kind":"variable","name":"_unreserved2396Table","id":"_unreserved2396Table","isPrivate":true,"line":"1530"},{"isStatic":true,"kind":"variable","name":"_encodeFullTable","id":"_encodeFullTable","isPrivate":true,"line":"1549"},{"isStatic":true,"kind":"variable","name":"_schemeTable","id":"_schemeTable","isPrivate":true,"line":"1568"},{"isStatic":true,"kind":"variable","name":"_schemeLowerTable","id":"_schemeLowerTable","isPrivate":true,"line":"1587"},{"isStatic":true,"kind":"variable","name":"_subDelimitersTable","id":"_subDelimitersTable","isPrivate":true,"line":"1610"},{"isStatic":true,"kind":"variable","name":"_pathCharTable","id":"_pathCharTable","isPrivate":true,"line":"1631"},{"isStatic":true,"kind":"variable","name":"_queryCharTable","id":"_queryCharTable","isPrivate":true,"line":"1652"},{"kind":"constructor","name":"_fromMatch","id":"_fromMatch1()","children":[{"ref":{"name":"Match","refId":"dart.core/Match"},"kind":"param","name":"m","id":"m"}],"isPrivate":true,"line":"123"},{"kind":"constructor","name":"","id":"9()","comment":"\nCreates a new URI from its components.\n\nEach component is set through a named argument. Any number of\ncomponents can be provided. The default value for the components\nnot provided is the empry string, except for [port] which has a\ndefault value of 0. The [path] and [query] components can be set\nusing two different named arguments.\n\nThe scheme component is set through [scheme]. The scheme is\nnormalized to all lowercase letters.\n\nThe user info part of the authority component is set through\n[userInfo].\n\nThe host part of the authority component is set through\n[host]. The host can either be a hostname, an IPv4 address or an\nIPv6 address, contained in '[' and ']'. If the host contains a\n':' character, the '[' and ']' are added if not already provided.\n\nThe port part of the authority component is set through\n[port]. The port is normalized for scheme http and https where\nport 80 and port 443 respectively is set.\n\nThe path component is set through either [path] or\n[pathSegments]. When [path] is used, the provided string is\nexpected to be fully percent-encoded, and is used in its literal\nform. When [pathSegments] is used, each of the provided segments\nis percent-encoded and joined using the forward slash\nseparator. The percent-encoding of the path segments encodes all\ncharacters except for the unreserved characters and the following\nlist of characters: `!$&'()*+,;=:@`. If the other components\ncalls for an absolute path a leading slash `/` is prepended if\nnot already there.\n\nThe query component is set through either [query] or\n[queryParameters]. When [query] is used the provided string is\nexpected to be fully percent-encoded and is used in its literal\nform. When [queryParameters] is used the query is built from the\nprovided map. Each key and value in the map is percent-encoded\nand joined using equal and ampersand characters. The\npercent-encoding of the keys and values encodes all characters\nexcept for the unreserved characters.\n\nThe fragment component is set through [fragment].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"scheme","id":"scheme"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"isNamed":true,"initializedField":{"name":"userInfo","refId":"dart.core/Uri/userInfo"},"kind":"param","name":"userInfo","id":"userInfo","line":"180"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"isNamed":true,"kind":"param","name":"host","id":"host","line":"181"},{"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"port","id":"port","line":"182"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"path","id":"path","line":"183"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"pathSegments","id":"pathSegments","line":"184"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"query","id":"query","line":"185"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"isNamed":true,"kind":"param","name":"queryParameters","id":"queryParameters","line":"186"},{"defaultValue":"\"\"","isOptional":true,"isNamed":true,"kind":"param","name":"fragment","id":"fragment","line":"187"}],"line":"179"},{"returnType":{"name":"Uri","refId":"dart.core/Uri"},"kind":"constructor","name":"http","id":"http3()","comment":"\nCreates a new `http` URI from authority, path and query.\n\nExamples:\n\n    // Create the URI http://example.org/path?q=abc.\n    new Uri.http(\"google.com\", \"/search\", { \"q\" : \"dart\" });http://example.org/path?q=abc.\n    new Uri.http(\"user:pass@localhost:8080, \"\");  // http://user:pass@localhost:8080/\n    new Uri.http(\"example.org, \"a b\");  // http://example.org/a%20b\n    new Uri.http(\"example.org, \"/a%2F\");  // http://example.org/a%25%2F\n\nThe `scheme` is always set to `http`.\n\nThe `userInfo`, `host` and `port` components are set from the\n[authority] argument.\n\nThe `path` component is set from the [unencodedPath]\nargument. The path passed must not be encoded as this constructor\nencodes the path.\n\nThe `query` component is set from the optional [queryParameters]\nargument.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"authority","id":"authority"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"unencodedPath","id":"unencodedPath","line":"228"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"kind":"param","name":"queryParameters","id":"queryParameters","line":"229"}],"line":"227"},{"returnType":{"name":"Uri","refId":"dart.core/Uri"},"kind":"constructor","name":"https","id":"https3()","comment":"\nCreates a new `https` URI from authority, path and query.\n\nThis constructor is the same as [Uri.http] except for the scheme\nwhich is set to `https`.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"authority","id":"authority"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"unencodedPath","id":"unencodedPath","line":"240"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"kind":"param","name":"queryParameters","id":"queryParameters","line":"241"}],"line":"239"},{"returnType":{"name":"Uri","refId":"dart.core/Uri"},"kind":"constructor","name":"file","id":"file2()","comment":"\nCreates a new file URI from an absolute or relative file path.\n\nThe file path is passed in [path].\n\nThis path is interpreted using either Windows or non-Windows\nsemantics.\n\nWith non-Windows semantics the slash (\"/\") is used to separate\npath segments.\n\nWith Windows semantics, backslash (\"\\\") and forward-slash (\"/\")\nare used to separate path segments, except if the path starts\nwith \"\\\\?\\\" in which case, only backslash (\"\\\") separates path\nsegments.\n\nIf the path starts with a path separator an absolute URI is\ncreated. Otherwise a relative URI is created. One exception from\nthis rule is that when Windows semantics is used and the path\nstarts with a drive letter followed by a colon (\":\") and a\npath separator then an absolute URI is created.\n\nThe default for whether to use Windows or non-Windows semantics\ndetermined from the platform Dart is running on. When running in\nthe standalone VM this is detected by the VM based on the\noperating system. When running in a browser non-Windows semantics\nis always used.\n\nTo override the automatic detection of which semantics to use pass\na value for [windows]. Passing `true` will use Windows\nsemantics and passing `false` will use non-Windows semantics.\n\nExamples using non-Windows semantics (resulting URI in comment):\n\n    new Uri.file(\"xxx/yyy\");  // xxx/yyy\n    new Uri.file(\"xxx/yyy/\");  // xxx/yyy/\n    new Uri.file(\"/xxx/yyy\");  // file:///xxx/yyy\n    new Uri.file(\"/xxx/yyy/\");  // file:///xxx/yyy/\n    new Uri.file(\"C:\");  // C:\n\nExamples using Windows semantics (resulting URI in comment):\n\n    new Uri.file(r\"xxx\\yyy\");  // xxx/yyy\n    new Uri.file(r\"xxx\\yyy\\\");  // xxx/yyy/\n    new Uri.file(r\"\\xxx\\yyy\");  // file:///xxx/yyy\n    new Uri.file(r\"\\xxx\\yyy/\");  // file:///xxx/yyy/\n    new Uri.file(r\"C:\\xxx\\yyy\");  // file:///C:/xxx/yyy\n    new Uri.file(r\"C:xxx\\yyy\");  // Throws as path with drive letter\n                                 // is not absolute.\n    new Uri.file(r\"\\\\server\\share\\file\");  // file://server/share/file\n    new Uri.file(r\"C:\");  // Throws as path with drive letter\n                          // is not absolute.\n\nIf the path passed is not a legal file path [ArgumentError] is thrown.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"path","id":"path"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"windows","id":"windows"}],"line":"356"}],"uri":"dart-sdk/lib/core/uri.dart","line":"18"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Type","id":"Type","comment":"\nRuntime representation of a type.\n","uri":"dart-sdk/lib/core/type.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Symbol","id":"Symbol","comment":"Opaque name used by mirrors, invocations and [Function.apply].","children":[{"returnType":{"name":"Symbol","refId":"dart.core/Symbol"},"kind":"constructor","name":"","id":"1()","comment":"\nConstructs a new Symbol.\n\nAn [ArgumentError] is thrown if [name] starts with an underscore, or if\n[name] is not a [String].  An [ArgumentError] is thrown if [name] is not\nan empty string and is not a valid qualified identifier optionally\nfollowed by [:'=':].\n\nThe following text is non-normative:\n\nCreating non-const Symbol instances may result in larger output.  If\npossible, use [MirrorsUsed] in \"dart:mirrors\" to specify which names might\nbe passed to this constructor.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"23"}],"uri":"dart-sdk/lib/core/symbol.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"StringSink","id":"StringSink","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"write","id":"write1()","comment":"\nConverts [obj] to a String by invoking `toString` and adds the result to\n`this`.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"obj","id":"obj"}],"line":"13"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeAll","id":"writeAll2()","comment":"\nIterates over the given [objects] and [write]s them in sequence.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"objects","id":"objects"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"18"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeln","id":"writeln1()","comment":"\nConverts [obj] to a String by invoking `toString` and adds the result to\n`this`. Then adds a new line.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"obj","id":"obj"}],"line":"24"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeCharCode","id":"writeCharCode1()","comment":"\nWrites the [charCode] to `this`.\n\nThis method is equivalent to `write(new String.fromCharCode(charCode))`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"charCode","id":"charCode"}],"line":"31"}],"uri":"dart-sdk/lib/core/string_sink.dart","line":"7"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"StringSink","refId":"dart.core/StringSink"}],"kind":"class","name":"StringBuffer","id":"StringBuffer","comment":"\nA class for concatenating strings efficiently.\n\nAllows for the incremental building of a string using write*() methods.\nThe strings are concatenated to a single string only when [toString] is\ncalled.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"write","id":"write1()","comment":"Adds the contents of [obj], converted to a string, to the buffer.","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"obj","id":"obj"}],"line":"35"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeCharCode","id":"writeCharCode1()","comment":"Adds the string representation of [charCode] to the buffer.","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"charCode","id":"charCode"}],"line":"38"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeAll","id":"writeAll2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"objects","id":"objects"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"40"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeln","id":"writeln1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"obj","id":"obj"}],"line":"56"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nClears the string buffer.\n","line":"64"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"Returns the contents of buffer as a concatenated string.","line":"67"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the length of the content that has been accumulated so far.\nThis is a constant-time operation.\n","line":"23"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"Returns whether the buffer is empty. This is a constant-time operation. ","line":"26"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns whether the buffer is not empty. This is a constant-time\noperation.\n","line":"32"},{"kind":"constructor","name":"","id":"1()","comment":"Creates the string buffer with an initial content. ","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"content","id":"content"}],"line":"17"}],"uri":"dart-sdk/lib/core/string_buffer.dart","line":"14"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"BidirectionalIterator","refId":"dart.core/BidirectionalIterator","arguments":[{"name":"int","refId":"dart.core/int"}]}],"kind":"class","name":"RuneIterator","id":"RuneIterator","comment":"[Iterator] for reading runes (integer Unicode code points) out of a Dart\nstring.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_checkSplitSurrogate","id":"_checkSplitSurrogate1()","comment":"Throw an error if the index is in the middle of a surrogate pair. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"isPrivate":true,"line":"561"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"rawIndex=","id":"rawIndex=1()","comment":"\nResets the iterator to the rune at the specified index of the string.\n\nSetting a negative [rawIndex], or one greater than or equal to\n[:string.length:],\nis an error. So is setting it in the middle of a surrogate pair.\n\nSetting the position to the end of then string will set [current] to null.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"rawIndex","id":"rawIndex"}],"line":"585"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"reset","id":"reset1()","comment":"\nResets the iterator to the given index into the string.\n\nAfter this the [current] value is unset.\nYou must call [moveNext] make the rune at the position current,\nor [movePrevious] for the last rune before the position.\n\nSetting a negative [rawIndex], or one greater than [:string.length:],\nis an error. So is setting it in the middle of a surrogate pair.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"rawIndex","id":"rawIndex"}],"line":"603"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"638"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"movePrevious","id":"movePrevious0()","line":"659"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"rawIndex","id":"rawIndex","comment":"\nReturns the starting position of the current rune in the string.\n\nReturns null if the [current] rune is null.\n","line":"574"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"current","id":"current","comment":"The rune (integer Unicode code point) starting at the current position in\n the string.\n","line":"615"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"currentSize","id":"currentSize","comment":"\nThe number of code units comprising the current rune.\n\nReturns zero if there is no current rune ([current] is null).\n","line":"622"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"currentAsString","id":"currentAsString","comment":"\nA string containing the current rune.\n\nFor runes outside the basic multilingual plane, this will be\na String of length 2, containing two code units.\n\nReturns null if [current] is null.\n","line":"632"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"string","id":"string","comment":"String being iterated. ","line":"524"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_position","id":"_position","comment":"Position before the current code point. ","isPrivate":true,"line":"526"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_nextPosition","id":"_nextPosition","comment":"Position after the current code point. ","isPrivate":true,"line":"528"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_currentCodePoint","id":"_currentCodePoint","comment":"\nCurrent code point.\n\nIf the iterator has hit either end, the [_currentCodePoint] is null\nand [: _position == _nextPosition :].\n","isPrivate":true,"line":"535"},{"kind":"constructor","name":"","id":"1()","comment":"Create an iterator positioned at the beginning of the string. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"}],"line":"538"},{"kind":"constructor","name":"at","id":"at2()","comment":"\nCreate an iterator positioned before the [index]th code unit of the string.\n\nWhen created, there is no [current] value.\nA [moveNext] will use the rune starting at [index] the current value,\nand a [movePrevious] will use the rune ending just before [index] as the\nthe current value.\n\nIt is an error if the [index] position is in the middle of a surrogate\npair.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"552"}],"uri":"dart-sdk/lib/core/string.dart","line":"522"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"class","name":"Runes","id":"Runes","comment":"\nThe runes (integer Unicode code points) of a [String].\n","children":[{"ref":{"name":"RuneIterator","refId":"dart.core/RuneIterator"},"kind":"property","name":"iterator","id":"iterator","line":"489"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"last","id":"last","line":"491"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"string","id":"string","line":"486"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"string","refId":"dart.core/Runes/string"},"kind":"param","name":"string","id":"string"}],"line":"487"}],"uri":"dart-sdk/lib/core/string.dart","line":"485"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Pattern","refId":"dart.core/Pattern"},{"name":"Comparable","refId":"dart.core/Comparable","arguments":[{"name":"String","refId":"dart.core/String"}]}],"kind":"class","name":"String","id":"String","comment":"\nA sequence of characters.\n\nA string can be either single or multiline. Single line strings are\nwritten using matching single or double quotes, and multiline strings are\nwritten using triple quotes. The following are all valid Dart strings:\n\n    'Single quotes';\n    \"Double quotes\";\n    'Double quotes in \"single\" quotes';\n    \"Single quotes in 'double' quotes\";\n\n    '''A\n    multiline\n    string''';\n\n    \"\"\"\n    Another\n    multiline\n    string\"\"\";\n\nStrings are immutable. Although you cannot change a string, you can perform\nan operation on a string and assign the result to a new string:\n\n    var string = 'Dart is fun';\n    var newString = string.substring(0, 5);\n\nYou can use the plus (`+`) operator to concatenate strings:\n\n    'Dart ' + 'is ' + 'fun!'; // 'Dart is fun!'\n\nYou can also use adjacent string literals for concatenation:\n\n    'Dart ' 'is ' 'fun!';    // 'Dart is fun!'\n\nYou can use `${}` to interpolate the value of Dart expressions\nwithin strings. The curly braces can be omitted when evaluating identifiers:\n\n    string = 'dartlang';\n    '$string has ${string.length} letters'; // 'dartlang has 8 letters'\n\nA string is represented by a sequence of Unicode UTF-16 code units\naccessible through the [codeUnitAt] or the [codeUnits] members:\n\n    string = 'Dart';\n    string.codeUnitAt(0); // 68\n    string.codeUnits;     // [68, 97, 114, 116]\n\nThe string representation of code units is accessible through the index\noperator:\n\n    string[0];            // 'D'\n\nThe characters of a string are encoded in UTF-16. Decoding UTF-16, which\ncombines surrogate pairs, yields Unicode code points. Following a similar\nterminology to Go, we use the name 'rune' for an integer representing a\nUnicode code point. Use the [runes] property to get the runes of a string:\n\n    string.runes.toList(); // [68, 97, 114, 116]\n\nFor a character outside the Basic Multilingual Plane (plane 0) that is\ncomposed of a surrogate pair, [runes] combines the pair and returns a\nsingle integer.  For example, the Unicode character for a\nmusical G-clef ('𝄞') with rune value 0x1D11E consists of a UTF-16 surrogate\npair: `0xD834` and `0xDD1E`. Using [codeUnits] returns the surrogate pair,\nand using `runes` returns their combined value:\n\n    var clef = '\\u{1D11E}';\n    clef.codeUnits;         // [0xD834, 0xDD1E]\n    clef.runes.toList();    // [0x1D11E]\n\nThe String class can not be extended or implemented. Attempting to do so\nyields a compile-time error.\n\n## Other resources\n\nSee [StringBuffer] to efficiently build a string incrementally. See\n[RegExp] to work with regular expressions.\n\nAlso see:\n\n* [Dart Cookbook](https://www.dartlang.org/docs/cookbook/#strings)\nfor String examples and recipes.\n* [Dart Up and Running]\n(https://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-strings-and-regular-expressions)\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nGets the character (as a single-code-unit [String]) at the given [index].\n\nThe returned string represents exactly one UTF-16 code unit, which may be\nhalf of a surrogate pair. A single member of a surrogate pair is an\ninvalid UTF-16 string:\n\n    var clef = '\\u{1D11E}';\n    // These represent invalid UTF-16 strings.\n    clef[0].codeUnits;      // [0xD834]\n    clef[1].codeUnits;      // [0xDD1E]\n\nThis method is equivalent to\n`new String.fromCharCode(this.codeUnitAt(index))`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"163"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"codeUnitAt","id":"codeUnitAt1()","comment":"\nReturns the 16-bit UTF-16 code unit at the given [index].\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"168"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nReturns true if the two strings are equal. False, otherwise.\n\nThis method compares each individual code unit of the strings.\nIt does not check for Unicode equivalence.\nFor example, both the following strings represent the string 'Amélie',\nbut due to their different encoding, are not equal:\n\n    'Am\\xe9lie' == 'Ame\\u{301}lie'; // false\n\nThe first string encodes 'é' as a single unicode code unit (also\na single rune), whereas the second string encodes it as 'e' with the\ncombining accent character '◌́'.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"200"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"endsWith","id":"endsWith1()","comment":"\nReturns true if this string ends with [other]. For example:\n\n    'Dart'.endsWith('t'); // true\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"other","id":"other"}],"line":"207"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"startsWith","id":"startsWith2()","comment":"\nReturns true if this string starts with a match of [pattern].\n\n    var string = 'Dart';\n    string.startsWith('D');                       // true\n    string.startsWith(new RegExp(r'[A-Z][a-z]')); // true\n\nIf [index] is provided, this method checks if the substring starting\nat that index starts with a match of [pattern]:\n\n    string.startsWith('art', 1);                  // true\n    string.startsWith(new RegExp(r'\\w{3}'));      // true\n\n[index] must not be negative or greater than [length].\n\nA [RegExp] containing '^' does not match if the [index] is greater than\nzero. The pattern works on the string as a whole, and does not extract\na substring starting at [index] first:\n\n    string.startsWith(new RegExp(r'^art'), 1);    // false\n    string.startsWith(new RegExp(r'art'), 1);     // true\n","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"param","name":"pattern","id":"pattern"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"index","id":"index"}],"line":"231"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","comment":"\nReturns the position of the first match of [pattern] in this string,\nstarting at [start], inclusive:\n\n    var string = 'Dartisans';\n    string.indexOf('art');                     // 1\n    string.indexOf(new RegExp(r'[A-Z][a-z]')); // 0\n\nReturns -1 if no match is found:\n\n    string.indexOf(new RegExp(r'dart'));       // -1\n\n[start] must not be negative or greater than [length].\n","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"param","name":"pattern","id":"pattern"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"247"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the position of the last match [pattern] in this string, searching\nbackward starting at [start], inclusive:\n\n    var string = 'Dartisans';\n    string.lastIndexOf('a');                    // 6\n    string.lastIndexOf(new RegExp(r'a(r|n)'));  // 6\n\nReturns -1 if [other] could not be found.\n\n    string.lastIndexOf(new RegExp(r'DART'));    // -1\n\n[start] must not be negative or greater than [length].\n","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"param","name":"pattern","id":"pattern"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"263"},{"returnType":{"name":"String","refId":"dart.core/String"},"isOperator":true,"kind":"method","name":"+","id":"+1()","comment":"\nCreates a new string by concatenating this string with [other].\n\n    'dart' + 'lang'; // 'dartlang'\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"other","id":"other"}],"line":"280"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"substring","id":"substring2()","comment":"\nReturns the substring of this string that extends from [startIndex],\ninclusive, to [endIndex], exclusive.\n\n    var string = 'dartlang';\n    string.substring(1);    // 'artlang'\n    string.substring(1, 4); // 'art'\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"startIndex","id":"startIndex"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"endIndex","id":"endIndex"}],"line":"290"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"trim","id":"trim0()","comment":"\nRemoves leading and trailing whitespace from a string.\n\nIf the string contains leading or trailing whitespace, a new string with no\nleading and no trailing whitespace is returned:\n\n    '\\tDart is fun\\n'.trim(); // 'Dart is fun'\n\nOtherwise, the original string itself is returned:\n\n    var str1 = 'Dart';\n    var str2 = str1.trim();\n    identical(str1, str2);    // true\n\nWhitespace is defined by the Unicode White_Space property (as defined in\nversion 6.2 or later) and the BOM character, 0xFEFF.\n\nHere is the list of trimmed characters (following version 6.2):\n\n    0009..000D    ; White_Space # Cc   <control-0009>..<control-000D>\n    0020          ; White_Space # Zs   SPACE\n    0085          ; White_Space # Cc   <control-0085>\n    00A0          ; White_Space # Zs   NO-BREAK SPACE\n    1680          ; White_Space # Zs   OGHAM SPACE MARK\n    180E          ; White_Space # Zs   MONGOLIAN VOWEL SEPARATOR\n    2000..200A    ; White_Space # Zs   EN QUAD..HAIR SPACE\n    2028          ; White_Space # Zl   LINE SEPARATOR\n    2029          ; White_Space # Zp   PARAGRAPH SEPARATOR\n    202F          ; White_Space # Zs   NARROW NO-BREAK SPACE\n    205F          ; White_Space # Zs   MEDIUM MATHEMATICAL SPACE\n    3000          ; White_Space # Zs   IDEOGRAPHIC SPACE\n\n    FEFF          ; BOM                ZERO WIDTH NO_BREAK SPACE\n","line":"326"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains2()","comment":"\nReturns true if this string contains a match of [other]:\n\n    var string = 'Dart strings';\n    string.contains('D');                     // true\n    string.contains(new RegExp(r'[A-Z]'));    // true\n\nIf [startIndex] is provided, this method matches only at or after that\nindex:\n\n    string.contains('X', 1);                  // false\n    string.contains(new RegExp(r'[A-Z]'), 1); // false\n\n[startIndex] must not be negative or greater than [length].\n","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"param","name":"other","id":"other"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"343"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"replaceFirst","id":"replaceFirst2()","comment":"\nReturns a new string in which  the first occurence of [from] in this string\nis replaced with [to]:\n\n    '0.0001'.replaceFirst(new RegExp(r'0'), ''); // '.0001'\n","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"param","name":"from","id":"from"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"to","id":"to"}],"line":"351"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"replaceAll","id":"replaceAll2()","comment":"\nReplaces all substrings that match [from] with [replace].\n\nReturns a new string in which the non-overlapping substrings matching\n[from] (the ones iterated by `from.allMatches(thisString)`) are replaced\nby the literal string [replace].\n\n    'resume'.replaceAll(new RegExp(r'e'), 'é'); // 'résumé'\n\nNotice that the [replace] string is not interpreted. If the replacement\ndepends on the match (for example on a [RegExp]'s capture groups), use\nthe [replaceAllMapped] method instead.\n","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"param","name":"from","id":"from"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"replace","id":"replace"}],"line":"366"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"replaceAllMapped","id":"replaceAllMapped2()","comment":"\nReplace all substrings that match [from] by a string computed from the\nmatch.\n\nReturns a new string in which the non-overlapping substrings that match\n[from] (the ones iterated by `from.allMatches(thisString)`) are replaced\nby the result of calling [replace] on the corresponding [Match] object.\n\nThis can be used to replace matches with new content that depends on the\nmatch, unlike [replaceAll] where the replacement string is always the same.\n\nThe [replace] function is called with the [Match] generated\nby the pattern, and its result is used as replacement.\n\nThe function defined below converts each word in a string to simplified\n'pig latin' using [replaceAllMapped]:\n\n    pigLatin(String words) => words.replaceAllMapped(\n        new RegExp(r'\\b(\\w*?)([aeiou]\\w*)', caseSensitive: false),\n        (Match m) => \"${m[2]}${m[1]}${m[1].isEmpty ? 'way' : 'ay'}\");\n\n    pigLatin('I have a secret now!'); // 'Iway avehay away ecretsay ownay!'\n","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"param","name":"from","id":"from"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"replace","id":"replace","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Match","refId":"dart.core/Match"},"kind":"param","name":"match","id":"match","uri":"dart-sdk/lib/core/string.dart","line":"391"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"391"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"split","id":"split1()","comment":"\nSplits the string at matches of [pattern]. Returns\na list of substrings.\n\nSplitting with an empty string pattern (`''`) splits at UTF-16 code unit\nboundaries and not at rune boundaries:\n\n    var string = 'Pub';\n    string.split('');                       // ['P', 'u', 'b']\n\n    string.codeUnits.map((unit) {\n      return new String.fromCharCode(unit);\n    }).toList();                            // ['P', 'u', 'b']\n\n    // String made up of two code units, but one rune.\n    string = '\\u{1D11E}';\n    string.split('').length;                 // 2\n\nYou should [map] the runes unless you are certain that the string is in\nthe basic multilingual plane (meaning that each code unit represents a\nrune):\n\n    string.runes.map((rune) => new String.fromCharCode(rune));\n","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"param","name":"pattern","id":"pattern"}],"line":"417"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"splitMapJoin","id":"splitMapJoin3()","comment":"\nSplits the string, converts its parts, and combines them into a new\nstring.\n\n[pattern] is used to split the string into parts and separating matches.\n\nEach match is converted to a string by calling [onMatch]. If [onMatch]\nis omitted, the matched string is used.\n\nEach non-matched part is converted by a call to [onNonMatch]. If\n[onNonMatch] is omitted, the non-matching part is used.\n\nThen all the converted parts are combined into the resulting string.\n\n    'Eats shoots leaves'.splitMapJoin((new RegExp(r'shoots')),\n        onMatch:    (m) => '${m.group(0)}',\n        onNonMatch: (n) => '*'); // *shoots*\n","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"param","name":"pattern","id":"pattern"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onMatch","id":"onMatch","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Match","refId":"dart.core/Match"},"kind":"param","name":"match","id":"match","uri":"dart-sdk/lib/core/string.dart","line":"438"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"438"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onNonMatch","id":"onNonMatch","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"nonMatch","id":"nonMatch","uri":"dart-sdk/lib/core/string.dart","line":"439"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"439"}],"line":"437"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toLowerCase","id":"toLowerCase0()","comment":"\nConverts all characters in this string to lower case.\nIf the string is already in all lower case, this method returns [:this:].\n\n    'ALPHABET'.toLowerCase(); // 'alphabet'\n    'abc'.toLowerCase();      // 'abc'\n\nThis function uses the language independent Unicode mapping and thus only\nworks in some languages.\n","line":"466"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toUpperCase","id":"toUpperCase0()","comment":"\nConverts all characters in this string to upper case.\nIf the string is already in all upper case, this method returns [:this:].\n\n    'alphabet'.toUpperCase(); // 'ALPHABET'\n    'ABC'.toUpperCase();      // 'ABC'\n\nThis function uses the language independent Unicode mapping and thus only\nworks in some languages.\n","line":"479"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nThe length of the string.\n\nReturns the number of UTF-16 code units in this string. The number\nof [runes] might be fewer, if the string contains characters outside\nthe Basic Multilingual Plane (plane 0):\n\n    'Dart'.length;          // 4\n    'Dart'.runes.length;    // 4\n\n    var clef = '\\u{1D11E}';\n    clef.length;            // 2\n    clef.runes.length;      // 1\n","line":"184"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if this string is empty.\n","line":"268"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if this string is not empty.\n","line":"273"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"property","name":"codeUnits","id":"codeUnits","comment":"\nReturns an unmodifiable list of the UTF-16 code units of this string.\n","line":"444"},{"ref":{"name":"Runes","refId":"dart.core/Runes"},"kind":"property","name":"runes","id":"runes","comment":"\nReturns an [Iterable] of Unicode code-points of this string.\n\nIf the string contains surrogate pairs, they are combined and returned\nas one integer by this iterator. Unmatched surrogate halves are treated\nlike valid 16-bit code-units.\n","line":"453"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"constructor","name":"fromCharCodes","id":"fromCharCodes1()","comment":"\nAllocates a new String for the specified [charCodes].\n\nThe [charCodes] can be UTF-16 code units or runes. If a char-code value is\n16-bit, it is copied verbatim:\n\n    new String.fromCharCodes([68]); // 'D'\n\nIf a char-code value is greater than 16-bits, it is decomposed into a\nsurrogate pair:\n\n    var clef = new String.fromCharCodes([0x1D11E]);\n    clef.codeUnitAt(0); // 0xD834\n    clef.codeUnitAt(1); // 0xDD1E\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"charCodes","id":"charCodes"}],"line":"109"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"constructor","name":"fromCharCode","id":"fromCharCode1()","comment":"\nAllocates a new String for the specified [charCode].\n\nIf the [charCode] can be represented by a single UTF-16 code unit, the new\nstring contains a single code unit. Otherwise, the [length] is 2 and\nthe code units form a surrogate pair. See documentation for\n[fromCharCodes].\n\nCreating a String with half of a surrogate pair is legal but generally\ndiscouraged.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"charCode","id":"charCode"}],"line":"122"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"constructor","name":"fromEnvironment","id":"fromEnvironment2()","comment":"\nReturns the string value of the environment declaration [name].\n\nEnvironment declarations are provided by the surrounding system compiling\nor running the Dart program. Declarations map a string key to a string\nvalue.\n\nIf [name] is not declared in the environment, the result is instead\n[defaultValue].\n\nExample of getting a value:\n\n    const String.fromEnvironment(\"defaultFloo\", defaultValue: \"no floo\")\n\nExample of checking whether a declaration is there at all:\n\n    var isDeclared = const String.fromEnvironment(\"maybeDeclared\") != null;\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"defaultValue","id":"defaultValue","line":"146"}],"line":"145"}],"uri":"dart-sdk/lib/core/string.dart","line":"93"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Stopwatch","id":"Stopwatch","comment":"\nA simple stopwatch interface to measure elapsed time.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"start","id":"start0()","comment":"\nStarts the [Stopwatch].\n\nThe [elapsed] count is increasing monotonically. If the [Stopwatch] has\nbeen stopped, then calling start again restarts it without resetting the\n[elapsed] count.\n\nIf the [Stopwatch] is currently running, then calling start does nothing.\n","line":"38"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"stop","id":"stop0()","comment":"\nStops the [Stopwatch].\n\nThe [elapsedTicks] count stops increasing after this call. If the\n[Stopwatch] is currently not running, then calling this method has no\neffect.\n","line":"58"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"reset","id":"reset0()","comment":"\nResets the [elapsed] count to zero.\n\nThis method does not stop or start the [Stopwatch].\n","line":"68"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"_frequency","id":"_frequency0()","isPrivate":true,"line":"129"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"_now","id":"_now0()","isPrivate":true,"line":"130"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"elapsedTicks","id":"elapsedTicks","comment":"\nReturns the elapsed number of clock ticks since calling [start] while the\n[Stopwatch] is running.\n\nReturns the elapsed number of clock ticks between calling [start] and\ncalling [stop].\n\nReturns 0 if the [Stopwatch] has never been started.\n\nThe elapsed number of clock ticks increases by [frequency] every second.\n","line":"91"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"property","name":"elapsed","id":"elapsed","comment":"\nReturns the [elapsedTicks] counter converted to a [Duration].\n","line":"101"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"elapsedMicroseconds","id":"elapsedMicroseconds","comment":"\nReturns the [elapsedTicks] counter converted to microseconds.\n","line":"108"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"elapsedMilliseconds","id":"elapsedMilliseconds","comment":"\nReturns the [elapsedTicks] counter converted to milliseconds.\n","line":"115"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"frequency","id":"frequency","comment":"\nReturns the frequency of the elapsed counter in Hz.\n","line":"122"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isRunning","id":"isRunning","comment":"\nReturns wether the [StopWatch] is currently running.\n","line":"127"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_start","id":"_start","isPrivate":true,"line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_stop","id":"_stop","isPrivate":true,"line":"17"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a [Stopwatch] in stopped state with a zero elapsed count.\n\nThe following example shows how to start a [Stopwatch]\nimmediately after allocation.\n\n    Stopwatch stopwatch = new Stopwatch()..start();\n","line":"27"}],"uri":"dart-sdk/lib/core/stopwatch.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"StackTrace","id":"StackTrace","comment":"\nAn interface implemented by all stack trace objects.\n\nA [StackTrace] is intended to convey information to the user about the call\nsequence that triggered an exception.\n\nThese objects are created by the runtime, it is not possible to create\nthem programmatically.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a [String] representation of the stack trace.\n\nThe string represents the full stack trace starting from\nthe point where a throw ocurred to the top of the current call sequence.\n\nThe exact format of the string representation is not final.\n","line":"25"}],"uri":"dart-sdk/lib/core/stacktrace.dart","line":"16"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"isAbstract":true,"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"}],"kind":"class","name":"Set","id":"Set","comment":"\nA collection of objects in which each object can occur only once.\n\nThat is, for each object of the element type, the object is either considered\nto be in the set, or to _not_ be in the set.\n\nSet implementations may consider some elements indistinguishable. These\nelements are treated as being the same for any operation on the set.\n\nThe default `Set` implementation, [LinkedHashSet], considers objects\nindistinguishable if they are equal with regard to [Object.operator==].\n\nSets may be either ordered or unordered. [HashSet] is unordered and\ndoesn't guarantee anything about the order that elements are accessed in by\niteration. [LinkedHashSet] iterates in the insertion order of its elements.\n\nIt is generally not allowed to modify the set (add or remove elements) while\nan operation on the set is being performed, for example during a call to\n[forEach] or [containsAll]. Nor is it allowed to modify the set while\niterating either the set itself or any `Iterable` that is backed by the set,\nsuch as the ones returned by methods like [where] and [map].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if [value] is in the set.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"59"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds [value] into the set. Returns `true` if [value] was added to the set.\n\nIf [value] already exists, the set is not changed and `false` is returned.\n","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"kind":"param","name":"value","id":"value"}],"line":"66"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAdds all of [elements] to this Set.\n\nEquivalent to adding each element in [elements] using [add],\nbut some collections may be able to optimize it.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"elements","id":"elements"}],"line":"74"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves [value] from the set. Returns true if [value] was\nin the set. Returns false otherwise. The method has no effect\nif [value] value was not in the set.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"81"},{"returnType":{"name":"E","refId":"dart.core/Set/E"},"kind":"method","name":"lookup","id":"lookup1()","comment":"\nIf an object equal to [object] is in the set, return it.\n\nChecks if there is an object in the set that is equal to [object].\nIf so, that object is returned, otherwise returns null.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"89"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll1()","comment":"\nRemoves each element of [elements] from this set.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"elements","id":"elements"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainAll","id":"retainAll1()","comment":"\nRemoves all elements of this set that are not elements in [elements].\n\nChecks for each element of [elements] whether there is an element in this\nset that is equal to it (according to `this.contains`), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in `elements` are removed.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"elements","id":"elements"}],"line":"104"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\nRemoves all elements of this set that satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/set.dart","line":"109"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"109"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\nRemoves all elements of this set that fail to satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/set.dart","line":"114"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"114"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsAll","id":"containsAll1()","comment":"\nReturns whether this Set contains all the elements of [other].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"other","id":"other"}],"line":"119"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"method","name":"intersection","id":"intersection1()","comment":"\nReturns a new set which is the intersection between this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare also elements of `other` according to `other.contains`.\n","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"other","id":"other"}],"line":"127"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"method","name":"union","id":"union1()","comment":"\nReturns a new set which contains all the elements of this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` and\nall the elements of [other].\n","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"other","id":"other"}],"line":"135"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"method","name":"difference","id":"difference1()","comment":"\nReturns a new set with the the elements of this that are not in [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare not elements of [other] according to `other.contains`.\n","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"other","id":"other"}],"line":"143"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all elements in the set.\n","line":"148"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"constructor","name":"","id":"0()","comment":"\nCreates an empty [Set].\n\nThe created `Set` is a [LinkedHashSet]. As such, it considers elements that\nare equal (using `==`) to be indistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","line":"37"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an empty identity [Set].\n\nThe created `Set` is a [LinkedHashSet] that uses identity as equality\nrelation.\n","line":"45"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a [Set] that contains all elements of [other].\n\nThe created `Set` is a [LinkedHashSet]. As such, it considers elements that\nare equal (using `==`) to be undistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"other","id":"other"}],"line":"54"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/set.dart","line":"29"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Pattern","refId":"dart.core/Pattern"}],"kind":"class","name":"RegExp","id":"RegExp","comment":"\nA regular expression pattern.\n\nRegular expressions are [Pattern]s, and can as such be used to match strings\nor parts of strings.\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n[firstMatch] is the main implementation method that applies a regular\nexpression to a string and returns the first [Match]. All\nother methods in [RegExp] can build on it.\n\nUse [allMatches] to look for all matches of a regular expression in\na string.\n\nThe following example finds all matches of a regular expression in\na string.\n\n    RegExp exp = new RegExp(r\"(\\w+)\");\n    String str = \"Parse my string\";\n    Iterable<Match> matches = exp.allMatches(str);\n","children":[{"returnType":{"name":"Match","refId":"dart.core/Match"},"kind":"method","name":"firstMatch","id":"firstMatch1()","comment":"\nSearches for the first match of the regular expression\nin the string [input]. Returns `null` if there is no match.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"input","id":"input"}],"line":"134"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Match","refId":"dart.core/Match"}]},"kind":"method","name":"allMatches","id":"allMatches1()","comment":"\nReturns an iterable of the matches of the regular expression on [input].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"input","id":"input"}],"line":"139"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"hasMatch","id":"hasMatch1()","comment":"\nReturns whether the regular expression has a match in the string [input].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"input","id":"input"}],"line":"144"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"stringMatch","id":"stringMatch1()","comment":"\nReturns the first substring match of this regular expression in [input].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"input","id":"input"}],"line":"149"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"pattern","id":"pattern","comment":"\nThe pattern of this regular expression.\n","line":"154"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isMultiLine","id":"isMultiLine","comment":"\nWhether this regular expression matches multiple lines.\n\nIf the regexp does match multiple lines, the \"^\" and \"$\" characters\nmatch the beginning and end of lines. If not, the character match the\nbeginning and end of the input.\n","line":"163"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isCaseSensitive","id":"isCaseSensitive","comment":"\nWhether this regular expression is case sensitive.\n\nIf the regular expression is not case sensitive, it will match an input\nletter with a pattern letter even if the two letters are different case\nversions of the same letter.\n","line":"172"},{"returnType":{"name":"RegExp","refId":"dart.core/RegExp"},"kind":"constructor","name":"","id":"3()","comment":"\nConstructs a regular expression.\n\nThrows a [FormatException] if [source] is not valid regular\nexpression syntax.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"multiLine","id":"multiLine"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"caseSensitive","id":"caseSensitive","line":"128"}],"line":"127"}],"uri":"dart-sdk/lib/core/regexp.dart","line":"120"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Match","id":"Match","comment":"\nA result from searching within a string.\n\nA Match or an [Iterable] of Match objects is returned from [Pattern]\nmatching methods.\n\nThe following example finds all matches of a [RegExp] in a [String]\nand iterates through the returned iterable of Match objects.\n\n    RegExp exp = new RegExp(r\"(\\w+)\");\n    String str = \"Parse my string\";\n    Iterable<Match> matches = exp.allMatches(str);\n    for (Match m in matches) {\n      String match = m.group(0);\n      print(match);\n    }\n\nThe output of the example is:\n\n    Parse\n    my\n    string\n\nSome patterns, regular expressions in particular, may record subtrings\nthat were part of the matching. These are called _groups_ in the Match\nobject. Some patterns may never have any groups, and their matches always\nhave zero [groupCount].\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"group","id":"group1()","comment":"\nReturns the string matched by the given [group].\n\nIf [group] is 0, returns the match of the pattern.\n\nThe result may be `null` if the pattern didn't assign a value to it\nas part of this match.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"group","id":"group"}],"line":"55"},{"returnType":{"name":"String","refId":"dart.core/String"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the string matched by the given [group].\n\nIf [group] is 0, returns the match of the pattern.\n\nShort alias for [Match.group].\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"group","id":"group"}],"line":"64"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"groups","id":"groups1()","comment":"\nReturns a list of the groups with the given indices.\n\nThe list contains the strings returned by [group] for each index in\n[groupIndices].\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"groupIndices","id":"groupIndices"}],"line":"72"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"start","id":"start","comment":"\nReturns the index in the string where the match starts.\n","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"end","id":"end","comment":"\nReturns the index in the string after the last character of the\nmatch.\n","line":"45"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"groupCount","id":"groupCount","comment":"\nReturns the number of captured groups in the match.\n\nSome patterns may capture parts of the input that was used to\ncompute the full match. This is the number of captured groups,\nwhich is also the maximal allowed argument to the [group] method.\n","line":"81"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"input","id":"input","comment":"\nThe string on which this match was computed.\n","line":"86"},{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"kind":"property","name":"pattern","id":"pattern","comment":"\nThe pattern used to search in [input].\n","line":"91"}],"uri":"dart-sdk/lib/core/regexp.dart","line":"35"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Pattern","id":"Pattern","comment":"\nAn interface for basic searches within strings.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Match","refId":"dart.core/Match"}]},"kind":"method","name":"allMatches","id":"allMatches1()","comment":"\nMatch this pattern against the string repeatedly.\n\nThe iterable will contain all the non-overlapping matches of the\npattern on the string, ordered by start index.\n\nThe matches are found by repeatedly finding the first match\nof the pattern on the string, starting from the end of the previous\nmatch, and initially starting from index zero.\n\nIf the pattern matches the empty string at some point, the next\nmatch is found by starting at the previous match's end plus one.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"24"},{"returnType":{"name":"Match","refId":"dart.core/Match"},"kind":"method","name":"matchAsPrefix","id":"matchAsPrefix2()","comment":"\nMatch this pattern against the start of string.\n\nIf [start] is provided, it must be an integer in the range `0` ..\n`string.length`. In that case, this patten is tested against the\nstring at the [start] position. That is, a match is returned if the\npattern can match a part of the string starting from position [start].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"34"}],"uri":"dart-sdk/lib/core/pattern.dart","line":"10"},{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Comparable","refId":"dart.core/Comparable","arguments":[{"name":"num","refId":"dart.core/num"}]}],"kind":"class","name":"num","id":"num","comment":"\nAn integer or floating-point number.\n\nIt is a compile-time error for any type other than [int] or [double]\nto attempt to extend or implement num.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nTest whether this value is numerically equal to `other`.\n\nIf both operands are doubles, they are equal if they have the same\nrepresentation, except that:\n  * zero and minus zero (0.0 and -0.0) are considered equal. They\n    both have the numerical value zero.\n  * NaN is not equal to anything, including NaN. If either operand is\n    NaN, the result is always false.\n\nIf one operand is a double and the other is an int, they are equal if\nthe double has an integer value (finite with no fractional part) and\n`identical(doubleValue.toInt(), intValue)`.\n\nIf both operands are integers, they are equal if they have the same value.\n\nReturns false if `other` is not a [num].\n\nNotice that the behavior for NaN is non-reflexive. This means that\nequality of double values is not a proper equality relation, as is\notherwise required of `operator==`. Using NaN in, e.g., a [HashSet]\nwill fail to work. The behavior is the standard IEEE-754 equality of\ndoubles.\n\nIf you can avoid NaN values, the remaining doubles do have a proper eqality\nrelation, and can be used safely.\n\nUse [compareTo] for a comparison that distinguishes zero and minus zero,\nand that considers NaN values as equal.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"other","id":"other"}],"line":"44"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"compareTo","id":"compareTo1()","comment":"\nCompares this to `other`.\n\nReturns a negative number if `this` is less than `other`, zero if they are\nequal, and a positive number if `this` is greater than `other`.\n\nThe orderding represented by this method is a total ordering of [num]\nvalues. All distinct doubles are non-equal, as are all distinct integers,\nbut integers are equal to doubles if they have the same numerical\nvalue.\n\nFor ordering, the double NaN value is considered equal to itself, and\ngreater than any numeric value (unlike its behavior in `operator==`).\n\nThe double value -0.0 is considered less than 0.0 (and the integer 0), but\ngreater than any non-zero negative value.\n\nPositive infinity is greater than any finite value (any value apart from\nitself and NaN), and negative infinity is less than any other value.\n\nAll other values are compared using their numeric value.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"79"},{"returnType":{"name":"num","refId":"dart.core/num"},"isOperator":true,"kind":"method","name":"+","id":"+1()","comment":"Addition operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"82"},{"returnType":{"name":"num","refId":"dart.core/num"},"isOperator":true,"kind":"method","name":"-","id":"-1()","comment":"Subtraction operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"85"},{"returnType":{"name":"num","refId":"dart.core/num"},"isOperator":true,"kind":"method","name":"*","id":"*1()","comment":"Multiplication operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"88"},{"returnType":{"name":"num","refId":"dart.core/num"},"isOperator":true,"kind":"method","name":"%","id":"%1()","comment":"\nEuclidean modulo operator.\n\nReturns the remainder of the euclidean division. The euclidean division of\ntwo integers `a` and `b` yields two integers `q` and `r` such that\n`a == b*q + r` and `0 <= r < a.abs()`.\n\nThe euclidean division is only defined for integers, but can be easily\nextended to work with doubles. In that case `r` may have a non-integer\nvalue, but it still verifies `0 <= r < |a|`.\n\nThe sign of the returned value `r` is always positive.\n\nSee [remainder] for the remainder of the truncating division.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"105"},{"returnType":{"name":"double","refId":"dart.core/double"},"isOperator":true,"kind":"method","name":"/","id":"#slash1()","comment":"Division operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"108"},{"returnType":{"name":"int","refId":"dart.core/int"},"isOperator":true,"kind":"method","name":"~/","id":"~#slash1()","comment":"\nTruncating division operator.\n\nIf either operand is a [double] then the result of the truncating division\n[:a ~/ b:] is equivalent to [:(a / b).truncate().toInt():].\n\nIf both operands are [int]s then [:a ~/ b:] performs the truncating\ninteger division.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"119"},{"returnType":{"name":"num","refId":"dart.core/num"},"isOperator":true,"kind":"method","name":"unary-","id":"unary-0()","comment":"Negate operator. ","line":"122"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"remainder","id":"remainder1()","comment":"\nReturns the remainder of the truncating division of `this` by [other].\n\nThe result `r` of this operation satisfies:\n`this == (this ~/ other) * other + r`.\nAs a consequence the remainder `r` has the same sign as the divider `this`.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"131"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"<","id":"<1()","comment":"Relational less than operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"134"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"<=","id":"<=1()","comment":"Relational less than or equal operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"137"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":">","id":">1()","comment":"Relational greater than operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"140"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":">=","id":">=1()","comment":"Relational greater than or equal operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"143"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"abs","id":"abs0()","comment":"Returns the absolute value of this [num]. ","line":"170"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"round","id":"round0()","comment":"\nReturns the integer closest to `this`.\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","line":"201"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"floor","id":"floor0()","comment":"\nReturns the greatest integer no greater than `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","line":"208"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"ceil","id":"ceil0()","comment":"\nReturns the least integer no smaller than `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","line":"215"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"truncate","id":"truncate0()","comment":"\nReturns the integer obtained by discarding any fractional\ndigits from `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","line":"223"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"roundToDouble","id":"roundToDouble0()","comment":"\nReturns the integer value closest to `this`.\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n\nThe result is a double.\n","line":"233"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"floorToDouble","id":"floorToDouble0()","comment":"\nReturns the greatest integer value no greater than `this`.\n\nThe result is a double.\n","line":"240"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"ceilToDouble","id":"ceilToDouble0()","comment":"\nReturns the least integer value no smaller than `this`.\n\nThe result is a double.\n","line":"247"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"truncateToDouble","id":"truncateToDouble0()","comment":"\nReturns the integer obtained by discarding any fractional\ndigits from `this`.\n\nThe result is a double.\n","line":"255"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"clamp","id":"clamp2()","comment":"\nClamps [this] to be in the range [lowerLimit]-[upperLimit]. The comparison\nis done using [compareTo] and therefore takes [:-0.0:] into account.\nIt also implies that [double.NAN] is treated as the maximal double value.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"lowerLimit","id":"lowerLimit"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"upperLimit","id":"upperLimit"}],"line":"262"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"toInt","id":"toInt0()","comment":"Truncates this [num] to an integer and returns the result as an [int]. ","line":"265"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"toDouble","id":"toDouble0()","comment":"\nReturn this [num] as a [double].\n\nIf the number is not representable as a [double], an\napproximation is returned. For numerically large integers, the\napproximation may be infinite.\n","line":"274"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toStringAsFixed","id":"toStringAsFixed1()","comment":"\nReturns a decimal-point string-representation of `this`.\n\nConverts `this` to a [double] before computing the string representation.\n\nIf the absolute value of `this` is greater or equal to `10^21` then this\nmethods returns an exponential representation computed by\n`this.toStringAsExponential()`. Otherwise the result\nis the closest string representation with exactly [fractionDigits] digits\nafter the decimal point. If [fractionDigits] equals 0 then the decimal\npoint is omitted.\n\nThe parameter [fractionDigits] must be an integer satisfying:\n[:0 <= fractionDigits <= 20:].\n\nExamples:\n\n    1.toStringAsFixed(3);  // 1.000\n    (4321.12345678).toStringAsFixed(3);  // 4321.123\n    (4321.12345678).toStringAsFixed(5);  // 4321.12346\n    123456789012345678901.toStringAsFixed(3);  // 123456789012345683968.000\n    1000000000000000000000.toStringAsFixed(3); // 1e+21\n    5.25.toStringAsFixed(0); // 5\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"fractionDigits","id":"fractionDigits"}],"line":"300"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toStringAsExponential","id":"toStringAsExponential1()","comment":"\nReturns an exponential string-representation of `this`.\n\nConverts `this` to a [double] before computing the string representation.\n\nIf [fractionDigits] is given then it must be an integer satisfying:\n[:0 <= fractionDigits <= 20:]. In this case the string contains exactly\n[fractionDigits] after the decimal point. Otherwise, without the parameter,\nthe returned string uses the shortest number of digits that accurately\nrepresent [this].\n\nIf [fractionDigits] equals 0 then the decimal point is omitted.\nExamples:\n\n    1.toStringAsExponential();       // 1e+0\n    1.toStringAsExponential(3);      // 1.000e+0\n    123456.toStringAsExponential();  // 1.23456e+5\n    123456.toStringAsExponential(3); // 1.235e+5\n    123.toStringAsExponential(0);    // 1e+2\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"fractionDigits","id":"fractionDigits"}],"line":"322"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toStringAsPrecision","id":"toStringAsPrecision1()","comment":"\nConverts `this` to a double and returns a string representation with\nexactly [precision] significant digits.\n\nThe parameter [precision] must be an integer satisfying:\n[:1 <= precision <= 21:].\n\nExamples:\n\n    1.toStringAsPrecision(2);       // 1.0\n    1e15.toStringAsPrecision(3);    // 1.00+15\n    1234567.toStringAsPrecision(3); // 1.23e+6\n    1234567.toStringAsPrecision(9); // 1234567.00\n    12345678901234567890.toStringAsPrecision(20); // 12345678901234567168\n    12345678901234567890.toStringAsPrecision(14); // 1.2345678901235e+19\n    0.00000012345.toPrecision(15); // 1.23450000000000e-7\n    0.0000012345.toPrecision(15);  // 0.00000123450000000000\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"precision","id":"precision"}],"line":"342"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns the shortest string that correctly represent the input number.\n\nAll [double]s in the range `10^-6` (inclusive) to `10^21` (exclusive)\nare converted to their decimal representation with at least one digit\nafter the decimal point. For all other doubles,\nexcept for special values like `NaN` or `Infinity`, this method returns an\nexponential representation (see [toStringAsExponential]).\n\nReturns `\"NaN\"` for [double.NAN], `\"Infinity\"` for [double.INFINITY], and\n`\"-Infinity\"` for [double.MINUS_INFINITY].\n\nAn [int] is converted to a decimal representation with no decimal point.\n\nExamples:\n\n    (0.000001).toString();  // \"0.000001\"\n    (0.0000001).toString(); // \"1e-7\"\n    (111111111111111111111.0).toString();  // \"111111111111111110000.0\"\n    (100000000000000000000.0).toString();  // \"100000000000000000000.0\"\n    (1000000000000000000000.0).toString(); // \"1e+21\"\n    (1111111111111111111111.0).toString(); // \"1.1111111111111111e+21\"\n    1.toString(); // \"1\"\n    111111111111111111111.toString();  // \"111111111111111110000\"\n    100000000000000000000.toString();  // \"100000000000000000000\"\n    1000000000000000000000.toString(); // \"1000000000000000000000\"\n    1111111111111111111111.toString(); // \"1111111111111111111111\"\n    1.234e5.toString();   // 123400\n    1234.5e6.toString();  // 1234500000\n    12.345e67.toString(); // 1.2345e+68\n\nNote: the conversion may round the output if the returned string\nis accurate enough to uniquely identify the input-number.\nFor example the most precise representation of the [double] `9e59` equals\n`\"899999999999999918767229449717619953810131273674690656206848\"`, but\nthis method returns the shorter (but still uniquely identifying) `\"9e59\"`.\n\n","line":"382"},{"returnType":{"name":"num","refId":"dart.core/num"},"isStatic":true,"kind":"method","name":"parse","id":"parse2()","comment":"\nParses a string containing a number literal into a number.\n\nThe method first tries to read the [input] as integer (similar to\n[int.parse] without a radix).\nIf that fails, it tries to parse the [input] as a double (similar to\n[double.parse]).\nIf that fails, too, it invokes [onError] with [input].\n\nIf no [onError] is supplied, it defaults to a function that throws a\n[FormatException].\n\nFor any number `n`, this function satisfies\n`identical(n, num.parse(n.toString()))`.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"input","id":"input"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"onError","id":"onError","children":[{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"input","id":"input","uri":"dart-sdk/lib/core/num.dart","line":"399"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"399"},{"isStatic":true,"kind":"method","name":"_returnNull","id":"_returnNull1()","comment":"Helper function for [parse]. ","children":[{"kind":"param","name":"_","id":"_","isPrivate":true}],"isPrivate":true,"line":"411"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nReturns a hash code for a numerical value.\n\nThe hash code is compatible with equality. It returns the same value\nfor an [int] and a [double] with the same numerical value, and therefore\nthe same value for the doubles zero and minus zero.\n\nNo guarantees are made about the hash code of NaN.\n","line":"55"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNaN","id":"isNaN","comment":"True if the number is the double Not-a-Number value; otherwise, false. ","line":"146"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNegative","id":"isNegative","comment":"\nTrue if the number is negative; otherwise, false.\n\nNegative numbers are those less than zero, and the double `-0.0`.\n","line":"153"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isInfinite","id":"isInfinite","comment":"\nTrue if the number is positive infinity or negative infinity; otherwise,\nfalse.\n","line":"159"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isFinite","id":"isFinite","comment":"\nTrue if the number is finite; otherwise, false.\n\nThe only non-finite numbers are NaN, positive infinitity and\nnegative infinity.\n","line":"167"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"property","name":"sign","id":"sign","comment":"\nReturns minus one, zero or plus one depending on the sign and\nnumerical value of the number.\n\nReturns minus one if the number is less than zero,\nplus one if the number is greater than zero,\nand zero if the number is equal to zero.\n\nReturns NaN if the number is the double NaN value.\n\nReturns a number of the same type as this number.\nFor doubles, `-0.0.sign == -0.0`.\n\nThe result satisfies:\n\n    n == n.sign * n.abs()\n\nfor all numbers `n` (except NaN, because NaN isn't `==` to itself).\n","line":"191"}],"uri":"dart-sdk/lib/core/num.dart","line":"13"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Null","id":"Null","comment":"\nThe reserved word [:null:] denotes an object that is the sole instance of \nthis class.\n\nIt is a compile-time error for a class to attempt to extend or implement\nNull.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"Returns the string `\"null\"`. ","line":"20"},{"returnType":{"name":"Null","refId":"dart.core/Null"},"kind":"constructor","name":"_uninstantiable","id":"_uninstantiable0()","isPrivate":true,"line":"15"}],"uri":"dart-sdk/lib/core/null.dart","line":"14"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Map","id":"Map","comment":"\nAn unordered collection of key-value pairs, from which you retrieve a value\nby using its associated key.\n\nEach key can occur at most once in a map.\n\nIt is generally not allowed to modify the map (add or remove keys) while\nan operation is being performed on the map, for example in functions called\nduring a [forEach] or [putIfAbsent] call.\nModifying the map while iterating the keys or values will also most likely\nbreak the iteration.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsValue","id":"containsValue1()","comment":"\nReturns true if this map contains the given value.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"109"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsKey","id":"containsKey1()","comment":"\nReturns true if this map contains the given key.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"114"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse [containsKey] to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"122"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nAssociates the [key] with the given [value].\n","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"V","refId":"dart.core/Map/V"},"kind":"param","name":"value","id":"value"}],"line":"127"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"method","name":"putIfAbsent","id":"putIfAbsent2()","comment":"\nIf [key] is not associated to a value, calls [ifAbsent] and\nupdates the map by mapping [key] to the value returned by\n[ifAbsent]. Returns the value in the map.\n\n    Map<String, int> scores = {'Bob': 36};\n    for (var key in ['Bob', 'Rohan', 'Sophena']) {\n      scores.putIfAbsent(key, () => key.length);\n    }\n    scores['Bob'];      // 36\n    scores['Rohan'];    //  5\n    scores['Sophena'];  //  7\n\nThe code that [ifAbsent] executes must not add or remove keys.\n","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"144"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAdds all key-value pairs of [other] to this map.\n\nIf a key of [other] is already in this map, its value is overwritten.\n\nThe operation is equivalent to doing `this[key] = value` for each key\nand associated value in other. It iterates over [other], which must\ntherefore not change during the iteration.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"other","id":"other"}],"line":"155"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the association for the given [key]. Returns the value for\n[key] in the map or null if [key] is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"163"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all pairs from the map.\n","line":"168"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies [f] to each {key, value} pair of the map.\n\nIt is an error to add or remove keys from the map during iteration.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/core/map.dart","line":"175"},{"ref":{"name":"V","refId":"dart.core/Map/V"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/map.dart","line":"175"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"175"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.core/Map/K"}]},"kind":"property","name":"keys","id":"keys","comment":"\nThe keys of [this].\n\nThe returned iterable has efficient `length` and `contains` operations,\nbased on [length] and [containsKey] of the map.\n","line":"183"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.core/Map/V"}]},"kind":"property","name":"values","id":"values","comment":"\nThe values of [this].\n\nThe returned iterable has an efficient `length` method based on the\n[length] of the map.\n","line":"191"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nThe number of key-value pairs in the map.\n","line":"196"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no key-value pair in the map.\n","line":"201"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one key-value pair in the map.\n","line":"206"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"","id":"0()","comment":"\nCreates a Map instance with the default implementation, [LinkedHashMap].\n\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n","line":"26"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a [LinkedHashMap] instance that contains all key-value pairs of\n[other].\n\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"other","id":"other"}],"line":"35"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an identity map with the default implementation, [LinkedHashMap].\n\nThe returned map allows `null` as a key.\n","line":"42"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"fromIterable","id":"fromIterable3()","comment":"\nCreates a Map instance in which the keys and values are computed from the\n[iterable].\n\nThe created map is a [LinkedHashMap].\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n\nFor each element of the [iterable] this constructor computes a key-value\npair, by applying [key] and [value] respectively.\n\nThe example below creates a new Map from a List. The keys of `map` are\n`list` values converted to strings, and the values of the `map` are the\nsquares of the `list` values:\n\n    List<int> list = [1, 2, 3];\n    Map<String, int> map = new Map.fromIterable(list,\n        key: (item) => item.toString(),\n        value: (item) => item * item));\n\n    map['1'] + map['2']; // 1 + 4\n    map['3'] - map['2']; // 9 - 4\n\nIf no values are specified for [key] and [value] the default is the\nidentity function.\n\nIn the following example, the keys and corresponding values of `map`\nare `list` values:\n\n    map = new Map.fromIterable(list);\n    map[1] + map[2]; // 1 + 2\n    map[3] - map[2]; // 3 - 2\n\nThe keys computed by the source [iterable] do not need to be unique. The\nlast occurrence of a key will simply overwrite any previous value.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"key","id":"key","children":[{"returnType":{"name":"K","refId":"dart.core/Map/K"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/map.dart","line":"81"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"81"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"value","id":"value","children":[{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/map.dart","line":"81"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"81"}],"line":"80"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"fromIterables","id":"fromIterables2()","comment":"\nCreates a Map instance associating the given [keys] to [values].\n\nThe created map is a [LinkedHashMap].\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n\nThis constructor iterates over [keys] and [values] and maps each element of\n[keys] to the corresponding element of [values].\n\n    List<String> letters = ['b', 'c'];\n    List<String> words = ['bad', 'cat'];\n    Map<String, String> map = new Map.fromIterables(letters, words);\n    map['b'] + map['c'];  // badcat\n\nIf [keys] contains the same object multiple times, the last occurrence\noverwrites the previous value.\n\nIt is an error if the two [Iterable]s don't have the same length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.core/Map/K"}]},"kind":"param","name":"keys","id":"keys"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"values","id":"values"}],"line":"103"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"uri":"dart-sdk/lib/core/map.dart","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"},{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]}],"kind":"class","name":"List","id":"List","comment":"\nAn indexable collection of objects with a length.\n\nSubclasses of this class implement different kinds of lists.\nThe most common kinds of lists are:\n\n* Fixed-length list.\n  An error occurs when attempting to use operations\n  that can change the length of the list.\n\n* Growable list. Full implementation of the API defined in this class.\n\nThe default growable list, as returned by `new List()` or `[]`, keeps\nan internal buffer, and grows that buffer when necessary. This guarantees\nthat a sequence of [add] operations will each execute in amortized constant\ntime. Setting the length directly may take time proportional to the new\nlength, and may change the internal capacity so that a following add\noperation will need to immediately increase the buffer capacity.\nOther list implementations may have different performance behavior.\n\nThe following code illustrates that some List implementations support\nonly a subset of the API.\n\n    List<int> fixedLengthList = new List(5);\n    fixedLengthList.length = 0;  // Error\n    fixedLengthList.add(499);    // Error\n    fixedLengthList[0] = 87;\n    List<int> growableList = [1, 2];\n    growableList.length = 0;\n    growableList.add(499);\n    growableList[0] = 87;\n\nLists are [Iterable]. Iteration occurs over values in index order. Changing\nthe values does not affect iteration, but changing the valid\nindices&mdash;that is, changing the list's length&mdash;between iteration\nsteps causes a [ConcurrentModificationError]. This means that only growable\nlists can throw ConcurrentModificationError. If the length changes\ntemporarily and is restored before continuing the iteration, the iterator\ndoes not detect it.\n\nIt is generally not allowed to modify the list's length (adding or removing\nelements) while an operation on the list is being performed,\nfor example during a call to [forEach] or [sort].\nChanging the list's length while it is being iterated, either by iterating it\ndirectly or through iterating an `Iterable` that is backed by the list, will\nbreak the iteration.\n","children":[{"returnType":{"name":"E","refId":"dart.core/List/E"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the object at the given [index] in the list\nor throws a [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"136"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nSets the value at the given [index] in the list to [value]\nor throws a [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"value","id":"value"}],"line":"142"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"length=","id":"length=1()","comment":"\nChanges the length of this list.\n\nIf [newLength] is greater than\nthe current length, entries are initialized to [:null:].\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLength","id":"newLength"}],"line":"159"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds [value] to the end of this list,\nextending the length by one.\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"value","id":"value"}],"line":"167"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAppends all objects of [iterable] to the end of this list.\n\nExtends the length of the list by the number of objects in [iterable].\nThrows an [UnsupportedError] if this list is fixed-length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"175"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","comment":"\nSorts this list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    // Sort from shortest to longest.\n    numbers.sort((x, y) => x.length.compareTo(y.length));\n    numbers.join(', '); // 'one, two, four, three'\n\nThe default List implementations use [Comparable.compare] if\n[compare] is omitted.\n\n    List<int> nums = [13, 2, -11];\n    nums.sort();\n         nums.join(', '); // '-11, 2, 13'\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/core/list.dart","line":"199"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/core/list.dart","line":"199"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"199"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","comment":"\nShuffles the elements of this list randomly.\n","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"204"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","comment":"\nReturns the first index of [element] in this list.\n\nSearches the list from index [start] to the end of the list.\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\n    List<String> notes = ['do', 're', 'mi', 're'];\n    notes.indexOf('re');    // 1\n    notes.indexOf('re', 2); // 3\n\nReturns -1 if [element] is not found.\n\n    notes.indexOf('fa');    // -1\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"221"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index of [element] in this list.\n\nSearches the list backwards from index [start] to 0.\n\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\n    List<String> notes = ['do', 're', 'mi', 're'];\n    notes.lastIndexOf('re', 2); // 1\n\nIf [start] is not provided, this method searches from the end of the\nlist./Returns\n\n    notes.lastIndexOf('re');  // 3\n\nReturns -1 if [element] is not found.\n\n    notes.lastIndexOf('fa');  // -1\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"243"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all objects from this list;\nthe length of the list becomes zero.\n\nThrows an [UnsupportedError], and retains all objects, if this\nis a fixed-length list.\n","line":"252"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","comment":"\nInserts the object at position [index] in this list.\n\nThis increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"}],"line":"263"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","comment":"\nInserts all objects of [iterable] at position [index] in this list.\n\nThis increases the length of the list by the length of [iterable] and\nshifts all later objects towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"274"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","comment":"\nOverwrites objects of `this` with the objects of [iterable], starting\nat position [index] in this list.\n\n    List<String> list = ['a', 'b', 'c'];\n    list.setAll(1, ['bee', 'sea']);\n    list.join(', '); // 'a, bee, sea'\n\nThis operation does not increase the length of `this`.\n\nThe [index] must be non-negative and no greater than [length].\n\nThe [iterable] must not have more elements than what can fit from [index]\nto [length].\n\nIf `iterable` is based on this list, its values may change /during/ the\n`setAll` operation.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"294"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the first occurence of [value] from this list.\n\nReturns true if [value] was in the list, false otherwise.\n\n    List<String> parts = ['head', 'shoulders', 'knees', 'toes'];\n    parts.remove('head'); // true\n    parts.join(', ');     // 'shoulders, knees, toes'\n\nThe method has no effect if [value] was not in the list.\n\n    // Note: 'head' has already been removed.\n    parts.remove('head'); // false\n    parts.join(', ');     // 'shoulders, knees, toes'\n\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"313"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"method","name":"removeAt","id":"removeAt1()","comment":"\nRemoves the object at position [index] from this list.\n\nThis method reduces the length of `this` by one and moves all later objects\ndown by one position.\n\nReturns the removed object.\n\nThe [index] must be in the range `0 ≤ index < length`.\n\nThrows an [UnsupportedError] if this is a fixed-length list. In that case\nthe list is not modified.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"328"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"method","name":"removeLast","id":"removeLast0()","comment":"\nPops and returns the last object in this list.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","line":"335"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\nRemoves all objects from this list that satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    numbers.removeWhere((item) => item.length == 3);\n    numbers.join(', '); // 'three, four'\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/list.dart","line":"348"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"348"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\nRemoves all objects from this list that fail to satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    numbers.retainWhere((item) => item.length == 3);\n    numbers.join(', '); // 'one, two'\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/list.dart","line":"361"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"361"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"sublist","id":"sublist2()","comment":"\nReturns a new list containing the objects from [start] inclusive to [end]\nexclusive.\n\n    List<String> colors = ['red', 'green', 'blue', 'orange', 'pink'];\n    colors.sublist(1, 3); // ['green', 'blue']\n\nIf [end] is omitted, the [length] of `this` is used.\n\n    colors.sublist(1);  // ['green', 'blue', 'orange', 'pink']\n\nAn error occurs if [start] is outside the range `0` .. `length` or if\n[end] is outside the range `start` .. `length`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"377"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"getRange","id":"getRange2()","comment":"\nReturns an [Iterable] that iterates over the objects in the range\n[start] inclusive to [end] exclusive.\n\nAn error occurs if [end] is before [start].\n\nAn error occurs if the [start] and [end] are not valid ranges at the time\nof the call to this method. The returned [Iterable] behaves like\n`skip(start).take(end - start)`. That is, it does not throw exceptions\nif `this` changes size.\n\n    List<String> colors = ['red', 'green', 'blue', 'orange', 'pink'];\n    Iterable<String> range = colors.getRange(1, 4);\n    range.join(', ');  // 'green, blue, orange'\n    colors.length = 3;\n    range.join(', ');  // 'green, blue'\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"396"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","comment":"\nCopies the objects of [iterable], skipping [skipCount] objects first,\ninto the range [start], inclusive, to [end], exclusive, of the list.\n\n    List<int> list1 = [1, 2, 3, 4];\n    List<int> list2 = [5, 6, 7, 8, 9];\n    // Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n    // of list1.\n    list1.setRange(1, 3, list2, 3);\n    list1.join(', '); // '1, 8, 9, 4'\n\nThe [start] and [end] indices must satisfy `0 ≤ start ≤ end ≤ length`.\nIf [start] equals [end], this method has no effect.\n\nThe [iterable] must have enough objects to fill the range from `start`\nto `end` after skipping [skipCount] objects.\n\nIf `iterable` is this list, the operation will copy the elements originally\nin the range from `skipCount` to `skipCount + (end - start)` to the\nrange `start` to `end`, even if the two ranges overlap.\n\nIf `iterable` depends on this list in some other way, no guarantees are\nmade.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"422"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive.\n\nThe [start] and [end] indices must be in the range\n`0 ≤ index ≤ length`, and `start ≤ end`.\n\nThrows an [UnsupportedError] if this is a fixed-length list. In that case\nthe list is not modified.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"433"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","comment":"\nSets the objects in the range [start] inclusive to [end] exclusive\nto the given [fillValue].\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.core/List/E"},"isOptional":true,"kind":"param","name":"fillValue","id":"fillValue"}],"line":"441"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive\nand inserts the contents of [replacement] in its place.\n\n    List<int> list = [1, 2, 3, 4, 5];\n    list.replaceRange(1, 4, [6, 7]);\n    list.join(', '); // '1, 6, 7, 5'\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"replacement","id":"replacement"}],"line":"453"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"asMap","id":"asMap0()","comment":"\nReturns an unmodifiable [Map] view of `this`.\n\nThe map uses the indices of this list as keys and the corresponding objects\nas values. The `Map.keys` [Iterable] iterates the indices of this list\nin numerical order.\n\n    List<String> words = ['fee', 'fi', 'fo', 'fum'];\n    Map<int, String> map = words.asMap();\n    map[0] + map[1];   // 'feefi';\n    map.keys.toList(); // [0, 1, 2, 3]\n","line":"467"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of objects in this list.\n\nThe valid indices for a list are `0` through `length - 1`.\n","line":"149"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"property","name":"reversed","id":"reversed","comment":"\nReturns an [Iterable] of the objects in this list in reverse order.\n","line":"180"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"","id":"1()","comment":"\nCreates a list of the given length.\n\nThe created list is fixed-length if [length] is provided.\n\n    List fixedLengthList = new List(3);\n    fixedLengthList.length;     // 3\n    fixedLengthList.length = 1; // Error\n\n\nThe list has length 0 and is growable if [length] is omitted.\n\n    List growableList = new List();\n    growableList.length; // 0;\n    growableList.length = 3;\n\nThe [length] must not be negative or null, if it is provided.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"}],"line":"73"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"filled","id":"filled2()","comment":"\nCreates a fixed-length list of the given length, and initializes the\nvalue at each position with [fill]:\n\n    new List<int>.filled(3, 0); // [0, 0, 0]\n\nThe [length] must not be negative or null.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"fill","id":"fill"}],"line":"83"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"from","id":"from2()","comment":"\nCreates a list and initializes it using the contents of [other].\n\nThe [Iterator] of [other] provides the order of the objects.\n\nThis constructor returns a growable list if [growable] is true;\notherwise, it returns a fixed-length list.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"other","id":"other"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"93"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"generate","id":"generate3()","comment":"\nGenerates a list of values.\n\nCreates a list with [length] positions and fills it with values created by\ncalling [generator] for each index in the range `0` .. `length - 1`\nin increasing order.\n\n    new List<int>.generate(3, (int index) => index * index); // [0, 1, 4]\n\nThe created list is fixed-length unless [growable] is true.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/list.dart","line":"118"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable","line":"119"}],"line":"118"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/list.dart","line":"54"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterator","id":"Iterator","comment":"\nAn interface for getting items, one at a time, from an object.\n\nThe for-in construct transparently uses Iterator to test for the end\nof the iteration, and to get each item (or _element_).\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe Iterator is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If no element is left, then [moveNext]\nreturns false.\n\nA typical usage of an Iterator looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n\n**See also:** [Iteration]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-iteration)\nin the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html)\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","line":"41"},{"ref":{"name":"E","refId":"dart.core/Iterator/E"},"kind":"property","name":"current","id":"current","comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","line":"50"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterator.dart","line":"33"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/BidirectionalIterator/E"}]}],"kind":"class","name":"BidirectionalIterator","id":"BidirectionalIterator","comment":"\nAn Iterator that allows moving backwards as well as forwards.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"movePrevious","id":"movePrevious0()","comment":"\nMove back to the previous element.\n\nReturns true and updates [current] if successful. Returns false\nand sets [current] to null if there is no previous element.\n","line":"331"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterable.dart","line":"324"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/_GeneratorIterator/E"}]}],"kind":"class","name":"_GeneratorIterator","id":"_GeneratorIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"307"},{"ref":{"name":"E","refId":"dart.core/_GeneratorIterator/E"},"kind":"property","name":"current","id":"current","line":"318"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_count","id":"_count","isPrivate":true,"line":"300"},{"ref":{"name":"_Generator","refId":"dart.core/_Generator"},"isFinal":true,"kind":"variable","name":"_generator","id":"_generator","isPrivate":true,"line":"301"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_index","id":"_index","isPrivate":true,"line":"302"},{"ref":{"name":"E","refId":"dart.core/_GeneratorIterator/E"},"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"303"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_count","refId":"dart.core/_GeneratorIterator/_count"},"kind":"param","name":"_count","id":"_count","isPrivate":true},{"ref":{"name":"_Generator","refId":"dart.core/_Generator"},"initializedField":{"name":"_generator","refId":"dart.core/_GeneratorIterator/_generator"},"kind":"param","name":"_generator","id":"_generator","isPrivate":true}],"line":"305"},{"kind":"typeparam","name":"E","id":"E"}],"isPrivate":true,"uri":"dart-sdk/lib/core/iterable.dart","line":"299"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"E","refId":"dart.core/_GeneratorIterable/E"}]},"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"}],"kind":"class","name":"_GeneratorIterable","id":"_GeneratorIterable","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/_GeneratorIterable/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"295"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"296"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_count","id":"_count","isPrivate":true,"line":"292"},{"ref":{"name":"_Generator","refId":"dart.core/_Generator"},"isFinal":true,"kind":"variable","name":"_generator","id":"_generator","isPrivate":true,"line":"293"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_count","refId":"dart.core/_GeneratorIterable/_count"},"kind":"param","name":"_count","id":"_count","isPrivate":true},{"ref":{"name":"_Generator","refId":"dart.core/_Generator"},"initializedField":{"name":"_generator","refId":"dart.core/_GeneratorIterable/_generator"},"kind":"param","name":"_generator","id":"_generator","isPrivate":true}],"line":"294"},{"kind":"typeparam","name":"E","id":"E"}],"isPrivate":true,"uri":"dart-sdk/lib/core/iterable.dart","line":"290"},{"returnType":{"name":"E","refId":"dart.core/_Generator/E"},"kind":"typedef","name":"_Generator","id":"_Generator","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"kind":"typeparam","name":"E","id":"E"}],"isPrivate":true,"uri":"dart-sdk/lib/core/iterable.dart","line":"288"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterable","id":"Iterable","comment":"\nAn object that uses an [Iterator] to serve objects one at a time.\n\nYou can iterate over all objects served by an Iterable object\nusing the for-in loop construct.\nFor example, you can iterate over all of the keys in a [Map],\nbecause Map keys are iterable.\n\n    Map kidsBooks = {'Matilda': 'Roald Dahl',\n                     'Green Eggs and Ham': 'Dr Seuss',\n                     'Where the Wild Things Are': 'Maurice Sendak'};\n    for (var book in kidsBooks.keys) {\n      print('$book was written by ${kidsBooks[book]}');\n    }\n\nThe [List] class and the [Set] class implement this interface,\nas do classes in the [dart:collection](#dart-collection) library.\n\nYou can implement Iterable in your own class.\nIf you do, then an instance of your Iterable class\ncan be the right-hand side of a for-in construct.\n\nSome subclasss of `Iterable` can be modified. It is generally not allowed\nto modify such collections while they are being iterated. Doing so will break\nthe iteration, which is typically signalled by throwing a\n[ConcurrentModificationError] when it is detected.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"66"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"66"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"78"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"78"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\nExpands each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable runs through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and calls [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"89"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"89"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if the collection contains an element equal to [element].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"99"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"99"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"110"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"kind":"method","name":"fold","id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/core/iterable.dart","line":"126"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"126"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"126"}],"line":"125"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"132"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"132"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"141"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"151"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"151"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toList","id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements are in iteration order. The list is fixed-length\nif [growable] is false.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"159"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","line":"164"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"192"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nReturns an Iterable that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it does not\nget or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"204"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"204"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nReturns an Iterable that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting Iterable is\nempty.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"214"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nReturns an Iterable that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"228"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"228"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"259"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"259"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"268"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"268"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"285"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an Iterator that iterates over this Iterable object.\n","line":"54"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"172"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","line":"177"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","line":"182"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"236"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","line":"243"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","line":"250"},{"kind":"constructor","name":"","id":"0()","line":"35"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"constructor","name":"generate","id":"generate2()","comment":"\nCreates an Iterable that generates its elements dynamically.\n\nThe Iterators created by the Iterable count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an Iterable, [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/iterable.dart","line":"47"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"47"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterable.dart","line":"34"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Invocation","id":"Invocation","comment":"\nRepresentation of the invocation of a member on an object.\n\nThis is the type of objects passed to [Object.noSuchMethod] when\nan object doesn't support the member invocation that was attempted\non it.\n","children":[{"ref":{"name":"Symbol","refId":"dart.core/Symbol"},"kind":"property","name":"memberName","id":"memberName","comment":"The name of the invoked member. ","line":"16"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"property","name":"positionalArguments","id":"positionalArguments","comment":"\nAn unmodifiable view of the positional arguments of the call.\n\nIf the member is a getter, the positional arguments is empty.\n","line":"23"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"Symbol","refId":"dart.core/Symbol"}]},"kind":"property","name":"namedArguments","id":"namedArguments","comment":"\nAn unmodifiable view of the named arguments of the call.\n\nIf the member is a getter, setter or operator, the named arguments\nis empty.\n","line":"31"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isMethod","id":"isMethod","comment":"Whether the invocation was a method call. ","line":"34"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isGetter","id":"isGetter","comment":"\nWhether the invocation was a getter call.\nIf so, both types of arguments is empty.\n","line":"40"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isSetter","id":"isSetter","comment":"\nWhether the invocation was a setter call.\n\nIf so, [arguments] has exactly one positonal argument,\nand [namedArguments] is empty.\n","line":"48"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isAccessor","id":"isAccessor","comment":"Whether the invocation was a getter or a setter call. ","line":"51"}],"uri":"dart-sdk/lib/core/invocation.dart","line":"14"},{"superclass":{"name":"num","refId":"dart.core/num"},"isAbstract":true,"kind":"class","name":"int","id":"int","comment":"\nAn arbitrarily large integer.\n\n**Note:** When compiling to JavaScript, integers are\nimplemented as JavaScript numbers. When compiling to JavaScript,\nintegers are therefore restricted to 53 significant bits because\nall JavaScript numbers are double-precision floating point\nvalues. The behavior of the operators and methods in the [int]\nclass therefore sometimes differs between the Dart VM and Dart code\ncompiled to JavaScript.\n\nIt is a compile-time error for a class to attempt to extend or implement int.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"isOperator":true,"kind":"method","name":"&","id":"&1()","comment":"\nBit-wise and operator.\n\nTreating both `this` and [other] as sufficiently large two's component\nintegers, the result is a number with only the bits set that are set in\nboth `this` and [other]\n\nOf both operands are negative, the result is negative, otherwise\nthe result is non-negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"other","id":"other"}],"line":"45"},{"returnType":{"name":"int","refId":"dart.core/int"},"isOperator":true,"kind":"method","name":"|","id":"|1()","comment":"\nBit-wise or operator.\n\nTreating both `this` and [other] as sufficiently large two's component\nintegers, the result is a number with the bits set that are set in either\nof `this` and [other]\n\nIf both operands are non-negative, the result is non-negative,\notherwise the result us negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"other","id":"other"}],"line":"57"},{"returnType":{"name":"int","refId":"dart.core/int"},"isOperator":true,"kind":"method","name":"^","id":"^1()","comment":"\nBit-wise exclusive-or operator.\n\nTreating both `this` and [other] as sufficiently large two's component\nintegers, the result is a number with the bits set that are set in one,\nbut not both, of `this` and [other]\n\nIf the operands have the same sign, the result is non-negative,\notherwise the result is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"other","id":"other"}],"line":"69"},{"returnType":{"name":"int","refId":"dart.core/int"},"isOperator":true,"kind":"method","name":"~","id":"~0()","comment":"\nThe bit-wise negate operator.\n\nTreating `this` as a sufficiently large two's component integer,\nthe result is a number with the opposite bits set.\n\nThis maps any integer `x` to `-x - 1`.\n","line":"79"},{"returnType":{"name":"int","refId":"dart.core/int"},"isOperator":true,"kind":"method","name":"<<","id":"<<1()","comment":"\nShift the bits of this integer to the left by [shiftAmount].\n\nShifting to the left makes the number larger, effectively multiplying\nthe number by `pow(2, shiftIndex)`.\n\nThere is no limit on the size of the result. It may be relevant to\nlimit intermediate values by using the \"and\" operator with a suitable\nmask.\n\nIt is an error of [shiftAmount] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"shiftAmount","id":"shiftAmount"}],"line":"93"},{"returnType":{"name":"int","refId":"dart.core/int"},"isOperator":true,"kind":"method","name":">>","id":">>1()","comment":"\nShift the bits of this integer to the right by [shiftAmount].\n\nShifting to the right makes the number smaller and drops the least\nsignificant bits, effectively doing an integer division by\n`pow(2, shiftIndex)`.\n\nIt is an error of [shiftAmount] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"shiftAmount","id":"shiftAmount"}],"line":"104"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"toUnsigned","id":"toUnsigned1()","comment":"\nReturns the least significant [width] bits of this integer as a\nnon-negative number (i.e. unsigned representation).  The returned value has\nzeros in all bit positions higher than [width].\n\n    (-1).toUnsigned(5) == 32   // 11111111  ->  00011111\n\nThis operation can be used to simulate arithmetic from low level languages.\nFor example, to increment an 8 bit quantity:\n\n    q = (q + 1).toUnsigned(8);\n\n`q` will count from `0` up to `255` and then wrap around to `0`.\n\nIf the input fits in [width] bits without truncation, the result is the\nsame as the input.  The minimum width needed to avoid truncation of `x` is\ngiven by `x.bitLength`, i.e.\n\n    x == x.toUnsigned(x.bitLength);\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"width","id":"width"}],"line":"155"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"toSigned","id":"toSigned1()","comment":"\nReturns the least significant [width] bits of this integer, extending the\nhighest retained bit to the sign.  This is the same as truncating the value\nto fit in [width] bits using an signed 2-s complement representation.  The\nreturned value has the same bit value in all positions higher than [width].\n\n                                   V--sign bit-V\n    16.toSigned(5) == -16   //  00010000 -> 11110000\n    239.toSigned(5) == 15   //  11101111 -> 00001111\n                                   ^           ^\n\nThis operation can be used to simulate arithmetic from low level languages.\nFor example, to increment an 8 bit signed quantity:\n\n    q = (q + 1).toSigned(8);\n\n`q` will count from `0` up to `127`, wrap to `-128` and count back up to\n`127`.\n\nIf the input value fits in [width] bits without truncation, the result is\nthe same as the input.  The minimum width needed to avoid truncation of `x`\nis `x.bitLength + 1`, i.e.\n\n    x == x.toSigned(x.bitLength + 1);\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"width","id":"width"}],"line":"182"},{"returnType":{"name":"int","refId":"dart.core/int"},"isOperator":true,"kind":"method","name":"unary-","id":"unary-0()","comment":"\nReturn the negative value of this integer.\n\nThe result of negating an integer always has the opposite sign, except\nfor zero, which is its own negation.\n","line":"190"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"abs","id":"abs0()","comment":"\nReturns the absolute value of this integer.\n\nFor any integer `x`, the result is the same as `x < 0 ? -x : x`.\n","line":"197"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"round","id":"round0()","comment":"Returns `this`. ","line":"208"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"floor","id":"floor0()","comment":"Returns `this`. ","line":"211"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"ceil","id":"ceil0()","comment":"Returns `this`. ","line":"214"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"truncate","id":"truncate0()","comment":"Returns `this`. ","line":"217"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"roundToDouble","id":"roundToDouble0()","comment":"Returns `this.toDouble()`. ","line":"220"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"floorToDouble","id":"floorToDouble0()","comment":"Returns `this.toDouble()`. ","line":"223"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"ceilToDouble","id":"ceilToDouble0()","comment":"Returns `this.toDouble()`. ","line":"226"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"truncateToDouble","id":"truncateToDouble0()","comment":"Returns `this.toDouble()`. ","line":"229"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a String-representation of this integer.\n\nThe returned string is parsable by [parse].\nFor any `int` [:i:], it is guaranteed that\n[:i == int.parse(i.toString()):].\n","line":"238"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toRadixString","id":"toRadixString1()","comment":"\nConverts [this] to a string representation in the given [radix].\n\nIn the string representation, lower-case letters are used for digits above\n'9'.\n\nThe [radix] argument must be an integer in the range 2 to 36.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"radix","id":"radix"}],"line":"248"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"parse","id":"parse3()","comment":"\nParse [source] as an integer literal and return its value.\n\nThe [radix] must be in the range 2..36. The digits used are\nfirst the decimal digits 0..9, and then the letters 'a'..'z'.\nAccepts capital letters as well.\n\nIf no [radix] is given then it defaults to 10, unless the string starts\nwith \"0x\", \"-0x\" or \"+0x\", in which case the radix is set to 16 and the\n\"0x\" is ignored.\n\nThe [source] must be a non-empty sequence of base-[radix] digits,\noptionally prefixed with a minus or plus sign ('-' or '+').\n\nIt must always be the case for an int [:n:] and radix [:r:] that\n[:n == parseRadix(n.toRadixString(r), r):].\n\nIf the [source] is not a valid integer literal, optionally prefixed by a\nsign, the [onError] is called with the [source] as argument, and its return\nvalue is used instead. If no [onError] is provided, a [FormatException]\nis thrown.\n\nThe [onError] function is only invoked if [source] is a [String]. It is\nnot invoked if the [source] is, for example, `null`.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"radix","id":"radix","line":"276"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"onError","id":"onError","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"source","id":"source","uri":"dart-sdk/lib/core/int.dart","line":"277"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"277"}],"line":"275"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEven","id":"isEven","comment":"Returns true if and only if this integer is even. ","line":"107"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isOdd","id":"isOdd","comment":"Returns true if and only if this integer is odd. ","line":"110"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"bitLength","id":"bitLength","comment":"\nReturns the minimum number of bits required to store this integer.\n\nThe number of bits excludes the sign bit, which gives the natural length\nfor non-negative (unsigned) values.  Negative values are complemented to\nreturn the bit position of the first bit that differs from the sign bit.\n\nTo find the the number of bits needed to store the value as a signed value,\nadd one, i.e. use `x.bitLength + 1`.\n\n     x.bitLength == (-x-1).bitLength\n\n     3.bitLength == 2;     // 00000011\n     2.bitLength == 2;     // 00000010\n     1.bitLength == 1;     // 00000001\n     0.bitLength == 0;     // 00000000\n     (-1).bitLength == 0;  // 11111111\n     (-2).bitLength == 1;  // 11111110\n     (-3).bitLength == 2;  // 11111101\n     (-4).bitLength == 2;  // 11111100\n","line":"133"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"sign","id":"sign","comment":"\nReturns the sign of this integer.\n\nReturns 0 for zero, -1 for values less than zero and\n+1 for values greater than zero.\n","line":"205"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"constructor","name":"fromEnvironment","id":"fromEnvironment2()","comment":"\nReturns the integer value of the given environment declaration [name].\n\nThe result is the same as would be returned by:\n\n    int.parse(const String.fromEnvironment(name, defaultValue: \"\"),\n              (_) => defaultValue)\n\nExample:\n\n    const int.fromEnvironment(\"defaultPort\", defaultValue: 80)\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"isNamed":true,"kind":"param","name":"defaultValue","id":"defaultValue"}],"line":"33"}],"uri":"dart-sdk/lib/core/int.dart","line":"20"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Function","id":"Function","comment":"\nThe base class for all function types.\n\nA function value, or an instance of a class with a \"call\" method, is a\nsubtype of a function type, and as such, a subtype of [Function].\n","children":[{"isStatic":true,"kind":"method","name":"apply","id":"apply3()","comment":"\nDynamically call [function] with the specified arguments.\n\nActs the same as calling function with positional arguments\ncorresponding to the elements of [positionalArguments] and\nnamed arguments corresponding to the elements of [namedArguments].\n\nThis includes giving the same errors if [function] isn't callable or\nif it expects different parameters.\n\nExample: [:\nMap<Symbol, dynamic> namedArguments = new Map<Symbol, dynamic>();\nnamedArguments[const Symbol(\"f\")] = 4;\nnamedArguments[const Symbol(\"g\")] = 5;\nFunction.apply(foo, [1,2,3], namedArguments); :]\ngives exactly the same result as [: foo(1, 2, 3, f: 4, g: 5) :].\n\nIf [positionalArguments] is null, it's considered an empty list.\nIf [namedArguments] is omitted or null, it is considered an empty map.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"function","id":"function"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"positionalArguments","id":"positionalArguments","line":"35"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"Symbol","refId":"dart.core/Symbol"}]},"isOptional":true,"kind":"param","name":"namedArguments","id":"namedArguments","line":"36"}],"line":"34"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Expando","id":"Expando","comment":"\nAn [Expando] allows adding new properties to objects.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nExpando toString method override.\n","line":"29"},{"returnType":{"name":"T","refId":"dart.core/Expando/T"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nGets the value of this [Expando]'s property on the given\nobject. If the object hasn't been expanded, the method returns\n[null].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"36"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nSets the value of this [Expando]'s property on the given\nobject. Properties can effectively be removed again by setting\ntheir value to null.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"},{"ref":{"name":"T","refId":"dart.core/Expando/T"},"kind":"param","name":"value","id":"value"}],"line":"43"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"name","id":"name","comment":"\nThe name of the this [Expando] as passed to the constructor. If\nno name was passed to the constructor, the name is [null].\n","line":"16"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a new [Expando]. The optional name is only used for\ndebugging purposes and creating two different [Expando]s with the\nsame name yields two [Expando]s that work on different properties\nof the objects they are used on.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"kind":"param","name":"name","id":"name"}],"line":"24"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/core/expando.dart","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"isThrowable":true,"kind":"class","name":"IntegerDivisionByZeroException","id":"IntegerDivisionByZeroException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"58"},{"kind":"constructor","name":"","id":"0()","line":"57"}],"uri":"dart-sdk/lib/core/exceptions.dart","line":"56"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"isThrowable":true,"kind":"class","name":"FormatException","id":"FormatException","comment":"\nException thrown when a string or some other data does not have an expected\nformat and cannot be parsed or processed.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"53"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"message","id":"message","comment":"\nA message describing the format error.\n","line":"46"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a new FormatException with an optional error [message].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"initializedField":{"name":"message","refId":"dart.core/FormatException/message"},"kind":"param","name":"message","id":"message"}],"line":"51"}],"uri":"dart-sdk/lib/core/exceptions.dart","line":"42"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"isThrowable":true,"kind":"class","name":"_ExceptionImplementation","id":"_ExceptionImplementation","comment":"Default implementation of [Exception] which carries a message. ","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"31"},{"isFinal":true,"kind":"variable","name":"message","id":"message","line":"27"},{"kind":"constructor","name":"","id":"1()","children":[{"isOptional":true,"initializedField":{"name":"message","refId":"dart.core/_ExceptionImplementation/message"},"kind":"param","name":"message","id":"message"}],"line":"29"}],"isPrivate":true,"uri":"dart-sdk/lib/core/exceptions.dart","line":"26"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"isThrowable":true,"kind":"class","name":"Exception","id":"Exception","comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","children":[{"returnType":{"name":"Exception","refId":"dart.core/Exception"},"kind":"constructor","name":"","id":"1()","children":[{"isOptional":true,"kind":"param","name":"message","id":"message"}],"line":"21"}],"uri":"dart-sdk/lib/core/exceptions.dart","line":"20"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"CyclicInitializationError","id":"CyclicInitializationError","comment":"\nError thrown when a lazily initialized variable cannot be initialized.\n\nA static/library variable with an initializer expression is initialized\nthe first time it is read. If evaluating the initializer expression causes\nanother read of the variable, this error is thrown.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"299"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"variableName","id":"variableName","line":"297"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"initializedField":{"name":"variableName","refId":"dart.core/CyclicInitializationError/variableName"},"kind":"param","name":"variableName","id":"variableName"}],"line":"298"}],"uri":"dart-sdk/lib/core/errors.dart","line":"296"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"isThrowable":true,"kind":"class","name":"StackOverflowError","id":"StackOverflowError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"284"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"property","name":"stackTrace","id":"stackTrace","line":"286"},{"kind":"constructor","name":"","id":"0()","line":"283"}],"uri":"dart-sdk/lib/core/errors.dart","line":"282"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"isThrowable":true,"kind":"class","name":"OutOfMemoryError","id":"OutOfMemoryError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"276"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"property","name":"stackTrace","id":"stackTrace","line":"278"},{"kind":"constructor","name":"","id":"0()","line":"275"}],"uri":"dart-sdk/lib/core/errors.dart","line":"274"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"ConcurrentModificationError","id":"ConcurrentModificationError","comment":"\nError occurring when a collection is modified during iteration.\n\nSome modifications may be allowed for some collections, so each collection\n([Iterable] or similar collection of values) should declare which operations\nare allowed during an iteration.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"264"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isFinal":true,"kind":"variable","name":"modifiedObject","id":"modifiedObject","comment":"The object that was modified in an incompatible way. ","line":"260"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"initializedField":{"name":"modifiedObject","refId":"dart.core/ConcurrentModificationError/modifiedObject"},"kind":"param","name":"modifiedObject","id":"modifiedObject"}],"line":"262"}],"uri":"dart-sdk/lib/core/errors.dart","line":"258"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"StateError","id":"StateError","comment":"\nThe operation was not allowed by the current state of the object.\n\nThis is a generic error used for a variety of different erroneous\nactions. The message should be descriptive.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"247"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"message","id":"message","line":"245"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"message","refId":"dart.core/StateError/message"},"kind":"param","name":"message","id":"message"}],"line":"246"}],"uri":"dart-sdk/lib/core/errors.dart","line":"244"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"interfaces":[{"name":"UnsupportedError","refId":"dart.core/UnsupportedError"}],"isThrowable":true,"kind":"class","name":"UnimplementedError","id":"UnimplementedError","comment":"\nThrown by operations that have not been implemented yet.\n\nThis [Error] is thrown by unfinished code that hasn't yet implemented\nall the features it needs.\n\nIf a class is not intending to implement the feature, it should throw\nan [UnsupportedError] instead. This error is only intended for\nuse during development.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"232"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"message","id":"message","line":"230"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"initializedField":{"name":"message","refId":"dart.core/UnimplementedError/message"},"kind":"param","name":"message","id":"message"}],"line":"231"}],"uri":"dart-sdk/lib/core/errors.dart","line":"229"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"UnsupportedError","id":"UnsupportedError","comment":"\nThe operation was not allowed by the object.\n\nThis [Error] is thrown when an instance cannot implement one of the methods\nin its signature.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"215"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"message","id":"message","line":"213"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"message","refId":"dart.core/UnsupportedError/message"},"kind":"param","name":"message","id":"message"}],"line":"214"}],"uri":"dart-sdk/lib/core/errors.dart","line":"212"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"NoSuchMethodError","id":"NoSuchMethodError","comment":"\nError thrown by the default implementation of [:noSuchMethod:] on [Object].\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"202"},{"ref":{"name":"Object","refId":"dart.core/Object"},"isFinal":true,"kind":"variable","name":"_receiver","id":"_receiver","isPrivate":true,"line":"162"},{"ref":{"name":"Symbol","refId":"dart.core/Symbol"},"isFinal":true,"kind":"variable","name":"_memberName","id":"_memberName","isPrivate":true,"line":"163"},{"ref":{"name":"List","refId":"dart.core/List"},"isFinal":true,"kind":"variable","name":"_arguments","id":"_arguments","isPrivate":true,"line":"164"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"Symbol","refId":"dart.core/Symbol"}]},"isFinal":true,"kind":"variable","name":"_namedArguments","id":"_namedArguments","isPrivate":true,"line":"165"},{"ref":{"name":"List","refId":"dart.core/List"},"isFinal":true,"kind":"variable","name":"_existingArgumentNames","id":"_existingArgumentNames","isPrivate":true,"line":"166"},{"kind":"constructor","name":"","id":"5()","comment":"\nCreate a [NoSuchMethodError] corresponding to a failed method call.\n\nThe [receiver] is the receiver of the method call.\nThat is, the object on which the method was attempted called.\nIf the receiver is `null`, it is interpreted as a call to a top-level\nfunction of a library.\n\nThe [memberName] is a [Symbol] representing the name of the called method\nor accessor. It should not be `null`.\n\nThe [positionalArguments] is a list of the positional arguments that the\nmethod was called with. If `null`, it is considered equivalent to the\nempty list.\n\nThe [namedArguments] is a map from [Symbol]s to the values of named\narguments that the method was called with.\n\nThe optional [exisitingArgumentNames] is the expected parameters of a\nmethod with the same name on the receiver, if available. This is\nthe signature of the method that would have been called if the parameters\nhad matched.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"receiver","id":"receiver"},{"ref":{"name":"Symbol","refId":"dart.core/Symbol"},"kind":"param","name":"memberName","id":"memberName","line":"192"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"positionalArguments","id":"positionalArguments","line":"193"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"Symbol","refId":"dart.core/Symbol"}]},"kind":"param","name":"namedArguments","id":"namedArguments","line":"194"},{"ref":{"name":"List","refId":"dart.core/List"},"defaultValue":"null","isOptional":true,"kind":"param","name":"existingArgumentNames","id":"existingArgumentNames","line":"195"}],"line":"191"}],"uri":"dart-sdk/lib/core/errors.dart","line":"161"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"AbstractClassInstantiationError","id":"AbstractClassInstantiationError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"154"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_className","id":"_className","isPrivate":true,"line":"152"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_className","refId":"dart.core/AbstractClassInstantiationError/_className"},"kind":"param","name":"_className","id":"_className","isPrivate":true}],"line":"153"}],"uri":"dart-sdk/lib/core/errors.dart","line":"151"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"FallThroughError","id":"FallThroughError","comment":"\nError thrown when control reaches the end of a switch case.\n\nThe Dart specification requires this error to be thrown when\ncontrol reaches the end of a switch case (except the last case\nof a switch) without meeting a break or similar end of the control\nflow.\n","children":[{"kind":"constructor","name":"","id":"0()","line":"147"}],"uri":"dart-sdk/lib/core/errors.dart","line":"146"},{"superclass":{"name":"ArgumentError","refId":"dart.core/ArgumentError"},"isThrowable":true,"kind":"class","name":"RangeError","id":"RangeError","comment":"\nError thrown because of an index outside of the valid range.\n\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"134"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreate a new [RangeError] with the given [message].\n\nTemporarily made const for backwards compatibilty.\n","children":[{"kind":"param","name":"message","id":"message"}],"line":"125"},{"kind":"constructor","name":"value","id":"value1()","comment":"Create a new [RangeError] with a message for the given [value]. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"value","id":"value"}],"line":"128"},{"kind":"constructor","name":"range","id":"range3()","comment":"Create a new [RangeError] with a message for a value and a range. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"value","id":"value"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"end","id":"end"}],"line":"131"}],"uri":"dart-sdk/lib/core/errors.dart","line":"117"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"ArgumentError","id":"ArgumentError","comment":"\nError thrown when a function is passed an unacceptable argument.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"105"},{"isFinal":true,"kind":"variable","name":"message","id":"message","line":"100"},{"kind":"constructor","name":"","id":"1()","comment":"The [message] describes the erroneous argument. ","children":[{"isOptional":true,"initializedField":{"name":"message","refId":"dart.core/ArgumentError/message"},"kind":"param","name":"message","id":"message"}],"line":"103"}],"uri":"dart-sdk/lib/core/errors.dart","line":"99"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"NullThrownError","id":"NullThrownError","comment":"\nError thrown when attempting to throw [:null:].\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"93"},{"kind":"constructor","name":"","id":"0()","line":"92"}],"uri":"dart-sdk/lib/core/errors.dart","line":"91"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"CastError","id":"CastError","comment":"\nError thrown by the runtime system when a cast operation fails.\n","uri":"dart-sdk/lib/core/errors.dart","line":"85"},{"superclass":{"name":"AssertionError","refId":"dart.core/AssertionError"},"isThrowable":true,"kind":"class","name":"TypeError","id":"TypeError","comment":"\nError thrown by the runtime system when a type assertion fails.\n","uri":"dart-sdk/lib/core/errors.dart","line":"79"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"AssertionError","id":"AssertionError","comment":"\nError thrown by the runtime system when an assert statement fails.\n","uri":"dart-sdk/lib/core/errors.dart","line":"73"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"kind":"class","name":"Error","id":"Error","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"safeToString","id":"safeToString1()","comment":"\nSafely convert a value to a [String] description.\n\nThe conversion is guaranteed to not throw, so it won't use the object's\ntoString method.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"14"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_objectToString","id":"_objectToString1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"isPrivate":true,"line":"65"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"property","name":"stackTrace","id":"stackTrace","line":"67"}],"uri":"dart-sdk/lib/core/errors.dart","line":"7"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Comparable","refId":"dart.core/Comparable","arguments":[{"name":"Duration","refId":"dart.core/Duration"}]}],"kind":"class","name":"Duration","id":"Duration","comment":"\nA span of time, such as 27 days, 4 hours, 12 minutes, and 3 seconds.\n\nTo create a new Duration object, use this class's single constructor\ngiving the appropriate arguments:\n\n    Duration fastestMarathon = new Duration(hours:2, minutes:3, seconds:2);\n\nThe Duration is the sum of all individual parts.\nThis means that individual parts can be larger than the next-bigger unit.\nFor example, [minutes] can be greater than 59.\n\n    assert(fastestMarathon.inMinutes == 123);\n\nAll individual parts are allowed to be negative.\n\nUse one of the properties, such as [inDays],\nto retrieve the integer value of the Duration in the specified time unit.\nNote that the returned value is rounded down.\nFor example, \n\n    Duration aLongWeekend = new Duration(hours:88);\n    assert(aLongWeekend.inDays == 3);\n\nThis class provides a collection of arithmetic\nand comparison operators,\nplus a set of constants useful for converting time units.\n\nSee [DateTime] to represent a point in time.\nSee [Stopwatch] to measure time-spans.\n\n","children":[{"returnType":{"name":"Duration","refId":"dart.core/Duration"},"isOperator":true,"kind":"method","name":"+","id":"+1()","comment":"\nAdds this Duration and [other] and\nreturns the sum as a new Duration object.\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"other","id":"other"}],"line":"102"},{"returnType":{"name":"Duration","refId":"dart.core/Duration"},"isOperator":true,"kind":"method","name":"-","id":"-1()","comment":"\nSubtracts [other] from this Duration and\nreturns the difference as a new Duration object.\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"other","id":"other"}],"line":"110"},{"returnType":{"name":"Duration","refId":"dart.core/Duration"},"isOperator":true,"kind":"method","name":"*","id":"*1()","comment":"\nMultiplies this Duration by the given [factor] and returns the result\nas a new Duration object.\n\nNote that when [factor] is a double, and the duration is greater than\n53 bits, precision is lost because of double-precision arithmetic.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"factor","id":"factor"}],"line":"121"},{"returnType":{"name":"Duration","refId":"dart.core/Duration"},"isOperator":true,"kind":"method","name":"~/","id":"~#slash1()","comment":"\nDivides this Duration by the given [quotient] and returns the truncated\nresult as a new Duration object.\n\nThrows an [IntegerDivisionByZeroException] if [quotient] is `0`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"quotient","id":"quotient"}],"line":"131"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"<","id":"<1()","comment":"\nReturns `true` if the value of this Duration\nis less than the value of [other].\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"other","id":"other"}],"line":"142"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":">","id":">1()","comment":"\nReturns `true` if the value of this Duration\nis greater than the value of [other].\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"other","id":"other"}],"line":"148"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"<=","id":"<=1()","comment":"\nReturns `true` if the value of this Duration\nis less than or equal to the value of [other].\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"other","id":"other"}],"line":"154"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":">=","id":">=1()","comment":"\nReturns `true` if the value of this Duration\nis greater than or equal to the value of [other].\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"other","id":"other"}],"line":"160"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nReturns `true` if this Duration is the same object as [other].\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"203"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"compareTo","id":"compareTo1()","comment":"\nCompares this Duration to [other],\nreturning zero if the values are equal.\n\nThis function returns a negative integer\nif this Duration is smaller than [other],\nor a positive integer if it is greater.\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"other","id":"other"}],"line":"218"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"220"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"inDays","id":"inDays","comment":"\nReturns the number of whole days spanned by this Duration.\n","line":"165"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"inHours","id":"inHours","comment":"\nReturns the number of whole hours spanned by this Duration.\n\nThe returned value can be greater than 23.\n","line":"172"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"inMinutes","id":"inMinutes","comment":"\nReturns the number of whole minutes spanned by this Duration.\n\nThe returned value can be greater than 59.\n","line":"179"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"inSeconds","id":"inSeconds","comment":"\nReturns the number of whole seconds spanned by this Duration.\n\nThe returned value can be greater than 59.\n","line":"186"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"inMilliseconds","id":"inMilliseconds","comment":"\nReturns number of whole milliseconds spanned by this Duration.\n\nThe returned value can be greater than 999.\n","line":"193"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"inMicroseconds","id":"inMicroseconds","comment":"\nReturns number of whole microseconds spanned by this Duration.\n","line":"198"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"208"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MICROSECONDS_PER_MILLISECOND","id":"MICROSECONDS_PER_MILLISECOND","line":"40"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MILLISECONDS_PER_SECOND","id":"MILLISECONDS_PER_SECOND","line":"41"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SECONDS_PER_MINUTE","id":"SECONDS_PER_MINUTE","line":"42"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MINUTES_PER_HOUR","id":"MINUTES_PER_HOUR","line":"43"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"HOURS_PER_DAY","id":"HOURS_PER_DAY","line":"44"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MICROSECONDS_PER_SECOND","id":"MICROSECONDS_PER_SECOND","line":"46"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MICROSECONDS_PER_MINUTE","id":"MICROSECONDS_PER_MINUTE","line":"48"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MICROSECONDS_PER_HOUR","id":"MICROSECONDS_PER_HOUR","line":"50"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MICROSECONDS_PER_DAY","id":"MICROSECONDS_PER_DAY","line":"52"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MILLISECONDS_PER_MINUTE","id":"MILLISECONDS_PER_MINUTE","line":"56"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MILLISECONDS_PER_HOUR","id":"MILLISECONDS_PER_HOUR","line":"58"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MILLISECONDS_PER_DAY","id":"MILLISECONDS_PER_DAY","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SECONDS_PER_HOUR","id":"SECONDS_PER_HOUR","line":"63"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SECONDS_PER_DAY","id":"SECONDS_PER_DAY","line":"64"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MINUTES_PER_DAY","id":"MINUTES_PER_DAY","line":"66"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"isStatic":true,"kind":"variable","name":"ZERO","id":"ZERO","line":"68"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_duration","id":"_duration","isPrivate":true,"line":"73"},{"kind":"constructor","name":"","id":"6()","comment":"\nCreates a new Duration object whose value\nis the sum of all individual parts.\n\nIndividual parts can be larger than the next-bigger unit.\nFor example, [hours] can be greater than 23.\n\nAll individual parts are allowed to be negative.\nAll arguments are 0 by default.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"days","id":"days"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"hours","id":"hours","line":"86"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"minutes","id":"minutes","line":"87"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"seconds","id":"seconds","line":"88"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"milliseconds","id":"milliseconds","line":"89"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"isNamed":true,"kind":"param","name":"microseconds","id":"microseconds","line":"90"}],"line":"85"}],"uri":"dart-sdk/lib/core/duration.dart","line":"39"},{"superclass":{"name":"num","refId":"dart.core/num"},"isAbstract":true,"kind":"class","name":"double","id":"double","comment":"\nA double-precision floating point number.\n\nRepresentation of Dart doubles containing double specific constants\nand operations and specializations of operations inherited from\n[num]. Dart doubles are 64-bit floating-point numbers as specified in the\nIEEE 754 standard.\n\nThe [double] type is contagious. Operations on [double]s return\n[double] results.\n\nIt is a compile-time error for a class to attempt to extend or implement\ndouble.\n","children":[{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"remainder","id":"remainder1()","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"32"},{"returnType":{"name":"double","refId":"dart.core/double"},"isOperator":true,"kind":"method","name":"+","id":"+1()","comment":"Addition operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"35"},{"returnType":{"name":"double","refId":"dart.core/double"},"isOperator":true,"kind":"method","name":"-","id":"-1()","comment":"Subtraction operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"38"},{"returnType":{"name":"double","refId":"dart.core/double"},"isOperator":true,"kind":"method","name":"*","id":"*1()","comment":"Multiplication operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"41"},{"returnType":{"name":"double","refId":"dart.core/double"},"isOperator":true,"kind":"method","name":"%","id":"%1()","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"43"},{"returnType":{"name":"double","refId":"dart.core/double"},"isOperator":true,"kind":"method","name":"/","id":"#slash1()","comment":"Division operator. ","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"46"},{"returnType":{"name":"int","refId":"dart.core/int"},"isOperator":true,"kind":"method","name":"~/","id":"~#slash1()","comment":"\nTruncating division operator.\n\nThe result of the truncating division [:a ~/ b:] is equivalent to\n[:(a / b).truncate():].\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"other","id":"other"}],"line":"54"},{"returnType":{"name":"double","refId":"dart.core/double"},"isOperator":true,"kind":"method","name":"unary-","id":"unary-0()","comment":"Negate operator. ","line":"57"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"abs","id":"abs0()","comment":"Returns the absolute value of this [double]. ","line":"60"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"round","id":"round0()","comment":"\nReturns the integer closest to `this`.\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","line":"79"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"floor","id":"floor0()","comment":"\nReturns the greatest integer no greater than `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","line":"86"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"ceil","id":"ceil0()","comment":"\nReturns the least integer no smaller than `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","line":"93"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"truncate","id":"truncate0()","comment":"\nReturns the integer obtained by discarding any fractional\ndigits from `this`.\n\nIf `this` is not finite (`NaN` or infinity), throws an [UnsupportedError].\n","line":"101"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"roundToDouble","id":"roundToDouble0()","comment":"\nReturns the integer value, as a double, closest to `this`.\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n","line":"109"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"floorToDouble","id":"floorToDouble0()","comment":"\nReturns the greatest integer value no greater than `this`.\n\nThe result is a double.\n","line":"116"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"ceilToDouble","id":"ceilToDouble0()","comment":"\nReturns the least integer value no smaller than `this`.\n\nThe result is a double.\n","line":"123"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"truncateToDouble","id":"truncateToDouble0()","comment":"\nReturns the integer obtained by discarding any fractional\ndigits from `this`.\n\nThe result is a double.\n","line":"131"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nProvide a representation of this [double] value.\n\nThe representation is a number literal such that the closest double value\nto the representation's mathematical value is this [double].\n\nReturns \"NaN\" for the Not-a-Number value.\nReturns \"Infinity\" and \"-Infinity\" for positive and negative Infinity.\nReturns \"-0.0\" for negative zero.\n\nIt should always be the case that if [:d:] is a [double], then\n[:d == double.parse(d.toString()):].\n","line":"146"},{"returnType":{"name":"double","refId":"dart.core/double"},"isStatic":true,"kind":"method","name":"parse","id":"parse2()","comment":"\nParse [source] as an double literal and return its value.\n\nAccepts an optional sign (`+` or `-`) followed by either the characters\n\"Infinity\", the characters \"NaN\" or a floating-point representation.\nA floating-point representation is composed of a mantissa and an optional\nexponent part. The mantissa is either a decimal point (`.`) followed by a\nsequence of (decimal) digits, or a sequence of digits\noptionally followed by a decimal point and optionally more digits. The\n(optional) exponent part consists of the character \"e\" or \"E\", an optional\nsign, and one or more digits.\n\nLeading and trailing whitespace is ignored.\n\nIf the [source] is not a valid double literal, the [onError]\nis called with the [source] as argument, and its return value is\nused instead. If no `onError` is provided, a [FormatException]\nis thrown instead.\n\nThe [onError] function is only invoked if [source] is a [String] with an\ninvalid format. It is not invoked if the [source] is invalid for some\nother reason, for example by being `null`.\n\nExamples of accepted strings:\n\n    \"3.14\"\n    \"  3.14 \\xA0\"\n    \"0.\"\n    \".0\"\n    \"-1.e3\"\n    \"1234E+7\"\n    \"+.12e-9\"\n    \"-NaN\"\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"onError","id":"onError","children":[{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"source","id":"source","uri":"dart-sdk/lib/core/double.dart","line":"183"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"183"}],"line":"182"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"property","name":"sign","id":"sign","comment":"\nReturns the sign of the double's numerical value.\n\nReturns -1.0 if the value is less than zero,\n+1.0 if the value is greater than zero,\nand the value itself if it is -0.0, 0.0 or NaN.\n","line":"69"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"kind":"variable","name":"NAN","id":"NAN","line":"26"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"kind":"variable","name":"INFINITY","id":"INFINITY","line":"27"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"kind":"variable","name":"NEGATIVE_INFINITY","id":"NEGATIVE_INFINITY","line":"28"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"kind":"variable","name":"MIN_POSITIVE","id":"MIN_POSITIVE","line":"29"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"kind":"variable","name":"MAX_FINITE","id":"MAX_FINITE","line":"30"}],"uri":"dart-sdk/lib/core/double.dart","line":"25"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Comparable","refId":"dart.core/Comparable"}],"kind":"class","name":"DateTime","id":"DateTime","comment":"\nAn instant in time, such as July 20, 1969, 8:18pm PST.\n\nCreate a DateTime object by using one of the constructors\nor by parsing a correctly formatted string,\nwhich complies with a subset of ISO 8601.\nNote that hours are specified between 0 and 23,\nas in a 24-hour clock.\nFor example:\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");  // 8:18pm\n\nA DateTime object is anchored either in the UTC time zone\nor in the local time zone of the current computer\nwhen the object is created.\n\nOnce created, neither the value nor the time zone\nof a DateTime object may be changed.\n\nYou can use properties to get\nthe individual units of a DateTime object.\n\n    assert(berlinWallFell.month == 11);\n    assert(moonLanding.hour == 20);\n\nFor convenience and readability,\nthe DateTime class provides a constant for each day and month\nname&mdash;for example, [AUGUST] and [FRIDAY].\nYou can use these constants to improve code readibility:\n\n    DateTime berlinWallFell = new DateTime(1989, DateTime.NOVEMBER, 9);\n    assert(berlinWallFell.weekday == DateTime.THURSDAY);\n\nDay and month values begin at 1, and the week starts on Monday.\nThat is, the constants [JANUARY] and [MONDAY] are both 1.\n\n## Working with UTC and local time\n\nA DateTime object is in the local time zone\nunless explicitly created in the UTC time zone.\n\n    DateTime dDay = new DateTime.utc(1944, 6, 6);\n\nUse [isUtc] to determine whether a DateTime object is based in UTC.\nUse the methods [toLocal] and [toUtc]\nto get the equivalent date/time value specified in the other time zone.\nUse [timeZoneName] to get an abbreviated name of the time zone\nfor the DateTime object.\nTo find the difference\nbetween UTC and the time zone of a DateTime object\ncall [timeZoneOffset].\n\n## Comparing DateTime objects\n\nThe DateTime class contains several handy methods,\nsuch as [isAfter], [isBefore], and [isAtSameMomentAs],\nfor comparing DateTime objects.\n\n    assert(berlinWallFell.isAfter(moonLanding) == true);\n    assert(berlinWallFell.isBefore(moonLanding) == false);\n\n## Using DateTime with Duration\n\nUse the [add] and [subtract] methods with a [Duration] object\nto create a new DateTime object based on another.\nFor example, to find the date that is sixty days after today, write:\n\n    DateTime today = new DateTime.now();\n    DateTime sixtyDaysFromNow = today.add(new Duration(days: 60));\n\nTo find out how much time is between two DateTime objects use\n[difference], which returns a [Duration] object:\n\n    Duration difference = berlinWallFell.difference(moonLanding)\n    assert(difference.inDays == 7416);\n\n## Other resources\n\nSee [Duration] to represent a span of time.\nSee [Stopwatch] to measure timespans.\n\nThe DateTime class does not provide internationalization.\nTo internationalize your code, use\nthe [intl](http://pub.dartlang.org/packages/intl) package.\n\n","children":[{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"isStatic":true,"kind":"method","name":"parse","id":"parse1()","comment":"\nConstructs a new [DateTime] instance based on [formattedString].\n\nThrows a [FormatException] if the input cannot be parsed.\n\nThe function parses a subset of ISO 8601. Examples of accepted strings:\n\n* `\"2012-02-27 13:27:00\"`\n* `\"2012-02-27 13:27:00.123456z\"`\n* `\"20120227 13:27:00\"`\n* `\"20120227T132700\"`\n* `\"20120227\"`\n* `\"+20120227\"`\n* `\"2012-02-27T14Z\"`\n* `\"2012-02-27T14+00:00\"`\n* `\"-123450101 00:00:00 Z\"`: in the year -12345.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"formattedString","id":"formattedString"}],"line":"208"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nReturns true if [other] is a [DateTime] at the same moment and in the\nsame time zone (UTC or local).\n\n    DateTime dDayUtc   = new DateTime.utc(1944, DateTime.JUNE, 6);\n    DateTime dDayLocal = new DateTime(1944, DateTime.JUNE, 6);\n\n    assert(dDayUtc.isAtSameMomentAs(dDayLocal) == false);\n\nSee [isAtSameMomentAs] for a comparison that adjusts for time zone.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"302"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isBefore","id":"isBefore1()","comment":"\nReturns true if [this] occurs before [other].\n\nThe comparison is independent\nof whether the time is in UTC or in the local time zone.\n\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\n    assert(berlinWallFell.isBefore(moonLanding) == false);\n\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"other","id":"other"}],"line":"320"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isAfter","id":"isAfter1()","comment":"\nReturns true if [this] occurs after [other].\n\nThe comparison is independent\nof whether the time is in UTC or in the local time zone.\n\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\n    assert(berlinWallFell.isAfter(moonLanding) == true);\n\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"other","id":"other"}],"line":"336"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"isAtSameMomentAs","id":"isAtSameMomentAs1()","comment":"\nReturns true if [this] occurs at the same moment as [other].\n\nThe comparison is independent of whether the time is in UTC or in the local\ntime zone.\n\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding    = DateTime.parse(\"1969-07-20 20:18:00\");\n\n    assert(berlinWallFell.isAtSameMomentAs(moonLanding) == false);\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"other","id":"other"}],"line":"351"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"compareTo","id":"compareTo1()","comment":"\nCompares this DateTime object to [other],\nreturning zero if the values are equal.\n\nThis function returns a negative integer\nif this DateTime is smaller (earlier) than [other],\nor a positive integer if it is greater (later).\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"other","id":"other"}],"line":"363"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"method","name":"toLocal","id":"toLocal0()","comment":"\nReturns this DateTime value in the local time zone.\n\nReturns [this] if it is already in the local time zone.\nOtherwise this method is equivalent to:\n\n    new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                            isUtc: false)\n","line":"377"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"method","name":"toUtc","id":"toUtc0()","comment":"\nReturns this DateTime value in the UTC time zone.\n\nReturns [this] if it is already in UTC.\nOtherwise this method is equivalent to:\n\n    new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                            isUtc: true)\n","line":"394"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a human-readable string for this instance.\n\nThe returned string is constructed for the time zone of this instance.\nThe `toString()` method provides a simply formatted string.\nIt does not support internationalized strings.\nUse the [intl](http://pub.dartlang.org/packages/intl) package\nat the pub shared packages repo.\n","line":"409"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"method","name":"add","id":"add1()","comment":"\nReturns a new [DateTime] instance with [duration] added to [this].\n\n    DateTime today = new DateTime.now();\n    DateTime sixtyDaysFromNow = today.add(new Duration(days: 60));\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"duration","id":"duration"}],"line":"451"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"method","name":"subtract","id":"subtract1()","comment":"\nReturns a new [DateTime] instance with [duration] subtracted from [this].\n\n    DateTime today = new DateTime.now();\n    DateTime sixtyDaysAgo = today.subtract(new Duration(days: 60));\n","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"param","name":"duration","id":"duration"}],"line":"463"},{"returnType":{"name":"Duration","refId":"dart.core/Duration"},"kind":"method","name":"difference","id":"difference1()","comment":"\nReturns a [Duration] with the difference between [this] and [other].\n\n    DateTime berlinWallFell = new DateTime(1989, DateTime.NOVEMBER, 9);\n    DateTime dDay = new DateTime(1944, DateTime.JUNE, 6);\n\n    Duration difference = berlinWallFell.difference(dDay);\n    assert(difference.inDays == 16592);\n","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"param","name":"other","id":"other"}],"line":"479"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"_brokenDownDateToMillisecondsSinceEpoch","id":"_brokenDownDateToMillisecondsSinceEpoch8()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"year","id":"year","line":"495"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"month","id":"month","line":"495"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"day","id":"day","line":"495"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"hour","id":"hour","line":"495"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"minute","id":"minute","line":"495"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"second","id":"second","line":"495"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"millisecond","id":"millisecond","line":"496"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isUtc","id":"isUtc","line":"496"}],"isPrivate":true,"line":"494"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"366"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"timeZoneName","id":"timeZoneName","comment":"\nThe abbreviated time zone name&mdash;for example,\n[:\"CET\":] or [:\"CEST\":].\n","line":"502"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"kind":"property","name":"timeZoneOffset","id":"timeZoneOffset","comment":"\nThe time zone offset, which\nis the difference between local time and UTC.\n\nThe offset is positive for time zones west of UTC.\n\nNote, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.\n","line":"514"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"year","id":"year","comment":"\nThe year.\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.year == 1969);\n","line":"522"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"month","id":"month","comment":"\nThe month [1..12].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.month == 7);\n    assert(moonLanding.month == DateTime.JULY);\n","line":"531"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"day","id":"day","comment":"\nThe day of the month [1..31].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.day == 20);\n","line":"539"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hour","id":"hour","comment":"\nThe hour of the day, expressed as in a 24-hour clock [0..23].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.hour == 20);\n","line":"547"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"minute","id":"minute","comment":"\nThe minute [0...59].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.minute == 18);\n","line":"555"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"second","id":"second","comment":"\nThe second [0...59].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.second == 0);\n","line":"563"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"millisecond","id":"millisecond","comment":"\nThe millisecond [0...999].\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.millisecond == 0);\n","line":"571"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"weekday","id":"weekday","comment":"\nThe day of the week [MONDAY]..[SUNDAY].\n\nIn accordance with ISO 8601\na week starts with Monday, which has the value 1.\n\n    DateTime moonLanding = DateTime.parse(\"1969-07-20 20:18:00\");\n    assert(moonLanding.weekday == 7);\n    assert(moonLanding.weekday == DateTime.SUNDAY);\n\n","line":"584"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MONDAY","id":"MONDAY","line":"97"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"TUESDAY","id":"TUESDAY","line":"98"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"WEDNESDAY","id":"WEDNESDAY","line":"99"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"THURSDAY","id":"THURSDAY","line":"100"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"FRIDAY","id":"FRIDAY","line":"101"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SATURDAY","id":"SATURDAY","line":"102"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SUNDAY","id":"SUNDAY","line":"103"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"DAYS_PER_WEEK","id":"DAYS_PER_WEEK","line":"104"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"JANUARY","id":"JANUARY","line":"107"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"FEBRUARY","id":"FEBRUARY","line":"108"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MARCH","id":"MARCH","line":"109"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"APRIL","id":"APRIL","line":"110"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MAY","id":"MAY","line":"111"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"JUNE","id":"JUNE","line":"112"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"JULY","id":"JULY","line":"113"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"AUGUST","id":"AUGUST","line":"114"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"SEPTEMBER","id":"SEPTEMBER","line":"115"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"OCTOBER","id":"OCTOBER","line":"116"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NOVEMBER","id":"NOVEMBER","line":"117"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"DECEMBER","id":"DECEMBER","line":"118"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"MONTHS_PER_YEAR","id":"MONTHS_PER_YEAR","line":"119"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"millisecondsSinceEpoch","id":"millisecondsSinceEpoch","comment":"\nThe number of milliseconds since\nthe \"Unix epoch\" 1970-01-01T00:00:00Z (UTC).\n\nThis value is independent of the time zone.\n\nThis value is at most\n8,640,000,000,000,000ms (100,000,000 days) from the Unix epoch.\nIn other words: [:millisecondsSinceEpoch.abs() <= 8640000000000000:].\n\n","line":"132"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"isUtc","id":"isUtc","comment":"\nTrue if this [DateTime] is set to UTC time.\n\n    DateTime dDay = new DateTime.utc(1944, 6, 6);\n    assert(dDay.isUtc);\n\n","line":"141"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_MAX_MILLISECONDS_SINCE_EPOCH","id":"_MAX_MILLISECONDS_SINCE_EPOCH","isPrivate":true,"line":"269"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"constructor","name":"","id":"7()","comment":"\nConstructs a [DateTime] instance specified in the local time zone.\n\nFor example,\nto create a new DateTime object representing April 29, 2014, 6:04am:\n\n    DateTime annularEclipse = new DateTime(2014, DateTime.APRIL, 29, 6, 4);\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"year","id":"year"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"kind":"param","name":"month","id":"month","line":"153"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"kind":"param","name":"day","id":"day","line":"154"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"hour","id":"hour","line":"155"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"minute","id":"minute","line":"156"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"second","id":"second","line":"157"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"millisecond","id":"millisecond","line":"158"}],"line":"152"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"constructor","name":"utc","id":"utc7()","comment":"\nConstructs a [DateTime] instance specified in the UTC time zone.\n\n    DateTime dDay = new DateTime.utc(1944, DateTime.JUNE, 6);\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"year","id":"year"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"kind":"param","name":"month","id":"month","line":"170"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"kind":"param","name":"day","id":"day","line":"171"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"hour","id":"hour","line":"172"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"minute","id":"minute","line":"173"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"second","id":"second","line":"174"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"millisecond","id":"millisecond","line":"175"}],"line":"169"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"kind":"constructor","name":"now","id":"now0()","comment":"\nConstructs a [DateTime] instance with current date and time in the\nlocal time zone.\n\n    DateTime thisInstant = new DateTime.now();\n\n","line":"188"},{"kind":"constructor","name":"fromMillisecondsSinceEpoch","id":"fromMillisecondsSinceEpoch2()","comment":"\nConstructs a new [DateTime] instance\nwith the given [millisecondsSinceEpoch].\n\nIf [isUtc] is false then the date is in the local time zone.\n\nThe constructed [DateTime] represents\n1970-01-01T00:00:00Z + [millisecondsSinceEpoch] ms in the given\ntime zone (local or UTC).\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"millisecondsSinceEpoch","id":"millisecondsSinceEpoch"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"isUtc","id":"isUtc","line":"282"}],"line":"281"},{"kind":"constructor","name":"_internal","id":"_internal8()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"year","id":"year"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"month","id":"month","line":"486"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"day","id":"day","line":"487"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"hour","id":"hour","line":"488"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"minute","id":"minute","line":"489"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"second","id":"second","line":"490"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"millisecond","id":"millisecond","line":"491"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isUtc","id":"isUtc","line":"492"}],"isPrivate":true,"line":"485"},{"kind":"constructor","name":"_now","id":"_now0()","isPrivate":true,"line":"493"}],"uri":"dart-sdk/lib/core/date_time.dart","line":"95"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Comparable","id":"Comparable","comment":"\nInterface used by types that have an intrinsic ordering.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"compareTo","id":"compareTo1()","comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","children":[{"ref":{"name":"T","refId":"dart.core/Comparable/T"},"kind":"param","name":"other","id":"other"}],"line":"35"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"compare","id":"compare2()","comment":"\nA [Comparator] that compares one comparable to another.\n\nThis utility function is used as the default comparator\nfor ordering collections, for example in the [List] sort function.\n","children":[{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"kind":"param","name":"b","id":"b"}],"line":"43"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/core/comparable.dart","line":"26"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"typedef","name":"Comparator","id":"Comparator","comment":"\nThe signature of a generic comparison function.\n\nA comparison function represents an ordering on a type of objects.\nA total ordering on a type means that for two values, either they\nare equal or one is greater than the other (and the latter must then be\nsmaller than the former).\n\nA [Comparator] function represents such a total ordering by returning\n\n* a negative integer if [a] is smaller than [b],\n* zero if [a] is equal to [b], and\n* a positive integer if [a] is greater than [b].\n","children":[{"ref":{"name":"T","refId":"dart.core/Comparator/T"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"T","refId":"dart.core/Comparator/T"},"kind":"param","name":"b","id":"b"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/core/comparable.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"bool","id":"bool","comment":"\nThe reserved words [:true:] and [:false:] denote objects that are the only\ninstances of this class.\n\nIt is a compile-time error for a class to attempt to extend or implement\nbool.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns [:\"true\":] if the receiver is [:true:], or [:\"false\":] if the\nreceiver is [:false:].\n","line":"40"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"constructor","name":"fromEnvironment","id":"fromEnvironment2()","comment":"\nReturns the boolean value of the environment declaration [name].\n\nThe boolean value of the declaration is `true` if the declared value is\nthe string `\"true\"`, and `false` if the value is `\"false\"`.\n\nIn all other cases, including when there is no declaration for `name`,\nthe result is the [defaultValue].\n\nExample:\n\n    const loggingFlag = const bool.fromEnvironment(\"logging\");\n\nIf you want to use a different truth-string, you can use the\n[String.fromEnvironment] constructor directly:\n\n    const isLoggingOn = (const String.fromEnvironment(\"logging\") == \"on\");\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"defaultValue","id":"defaultValue","line":"34"}],"line":"33"}],"uri":"dart-sdk/lib/core/bool.dart","line":"14"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_Proxy","id":"_Proxy","children":[{"kind":"constructor","name":"","id":"0()","line":"112"}],"isPrivate":true,"uri":"dart-sdk/lib/core/annotations.dart","line":"111"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_Override","id":"_Override","children":[{"kind":"constructor","name":"","id":"0()","line":"76"}],"isPrivate":true,"uri":"dart-sdk/lib/core/annotations.dart","line":"75"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Deprecated","id":"Deprecated","comment":"\nThe annotation `@Deprecated('expires when')` marks a feature as deprecated.\n\nThe annotation `@deprecated` is a shorthand for deprecating until\nto an unspecified \"next release\".\n\nThe intent of the `@Deprecated` annotation is to inform users of a feature\nthat they should change their code, even if it is currently still working\ncorrectly.\n\nA deprecated feature is scheduled to be removed at a later time, possibly\nspecified as the \"expires\" field of the annotation.\nThis means that a deprecated feature should not be used, or code using it\nwill break at some point in the future. If there is code using the feature,\nthat code should be rewritten to not use the deprecated feature.\n\nA deprecated feature should document how the same effect can be achieved,\nso the programmer knows how to rewrite the code.\n\nThe `@Deprecated` annotation applies to libraries, top-level declarations\n(variables, getters, setters, functions, classes and typedefs),\nclass-level declarations (variables, getters, setters, methods, operators or\nconstructors, whether static or not), named optional arguments and\ntrailing optional positional parameters.\n\nDeprecation is transitive:\n\n - If a library is deprecated, so is every member of it.\n - If a class is deprecated, so is every member of it.\n - If a variable is deprecated, so are its implicit getter and setter.\n\n\nA tool that processes Dart source code may report when:\n\n- the code imports a deprecated library.\n- the code exports a deprecated library, or any deprecated member of\n  a non-deprecated library.\n- the code refers statically to a deprecated declaration.\n- the code dynamically uses a member of an object with a statically known\n  type, where the member is deprecated on the static type of the object.\n- the code dynamically calls a method with an argument where the\n  corresponding optional parameter is deprecated on the object's static type.\n\n\nIf the deprecated use is inside a library, class or method which is itself\ndeprecated, the tool should not bother the user about it.\nA deprecated feature is expected to use other deprecated features.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"72"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"expires","id":"expires","comment":"\nA description of when the deprecated feature is expected to be retired.\n","line":"59"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreate a deprecation annotation which specifies the expiration of the\nannotated feature.\n\nThe [expires] argument should be readable by programmers, and should state\nwhen an annotated feature is expected to be removed.\nThis can be specified, for example, as a date, as a release number, or\nas relative to some other change (like \"when bug 4418 is fixed\").\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"expires","id":"expires"}],"line":"70"}],"uri":"dart-sdk/lib/core/annotations.dart","line":"55"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}