{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"StringSink","id":"StringSink","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"write","id":"write1()","comment":"\nConverts [obj] to a String by invoking `toString` and adds the result to\n`this`.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"obj","id":"obj"}],"line":"13"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeAll","id":"writeAll2()","comment":"\nIterates over the given [objects] and [write]s them in sequence.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"objects","id":"objects"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"18"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeln","id":"writeln1()","comment":"\nConverts [obj] to a String by invoking `toString` and adds the result to\n`this`. Then adds a new line.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"obj","id":"obj"}],"line":"24"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeCharCode","id":"writeCharCode1()","comment":"\nWrites the [charCode] to `this`.\n\nThis method is equivalent to `write(new String.fromCharCode(charCode))`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"charCode","id":"charCode"}],"line":"31"}],"uri":"dart-sdk/lib/core/string_sink.dart","line":"7"},{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"kind":"class","name":"Error","id":"Error","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"safeToString","id":"safeToString1()","comment":"\nSafely convert a value to a [String] description.\n\nThe conversion is guaranteed to not throw, so it won't use the object's\ntoString method.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"14"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_objectToString","id":"_objectToString1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"isPrivate":true,"line":"65"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"property","name":"stackTrace","id":"stackTrace","line":"67"}],"uri":"dart-sdk/lib/core/errors.dart","line":"7"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:async","id":"dart.async","comment":"\nSupport for asynchronous programming,\nwith classes such as Future and Stream.\n\nFor an introduction to asynchronous programming in Dart, see the\n[dart:async section of the language tour]\n(https://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-asynchronous-programming).\n\n## Other resources\n\n* [Using Future Based APIs]\n(https://www.dartlang.org/articles/using-future-based-apis/): A first look at\nFutures and how to use them to write asynchronous Dart code.\n\n* [Futures and Error Handling]\n(https://www.dartlang.org/articles/futures-and-error-handling/): Everything\nyou wanted to know about handling errors and exceptions when working with\nFutures (but were afraid to ask).\n\n* [The Event Loop and Dart](https://www.dartlang.org/articles/event-loop/):\nLearn how Dart handles the event queue and microtask queue, so you can write\nbetter asynchronous code with fewer surprises.\n\n* [Asynchronous Unit Testing with Dart]\n(https://www.dartlang.org/articles/dart-unit-tests/#asynchronous-tests): How\nto test asynchronous code.\n","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"StreamTransformer","id":"StreamTransformer","comment":"\nThe target of a [Stream.transform] call.\n\nThe [Stream.transform] call will pass itself to this object and then return\nthe resulting stream.\n\nIt is good practice to write transformers that can be used multiple times.\n","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"}]},"kind":"param","name":"stream","id":"stream"}],"line":"1335"},{"returnType":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"},{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"constructor","name":"","id":"1()","comment":"\nCreates a [StreamTransformer].\n\nThe returned instance takes responsibility of implementing ([bind]).\nWhen the user invokes `bind` it returns a new \"bound\" stream. Only when\nthe user starts listening to the bound stream, the `listen` method\ninvokes the given closure [transformer].\n\nThe [transformer] closure receives the stream, that was bound, as argument\nand returns a [StreamSubscription]. In almost all cases the closure\nlistens itself to the stream that is given as argument.\n\nThe result of invoking the [transformer] closure is a [StreamSubscription].\nThe bound stream-transformer (created by the `bind` method above) then sets\nthe handlers it received as part of the `listen` call.\n\nConceptually this can be summarized as follows:\n\n1. `var transformer = new StreamTransformer(transformerClosure);`\n  creates a `StreamTransformer` that supports the `bind` method.\n2. `var boundStream = stream.transform(transformer);` binds the `stream`\n  and returns a bound stream that has a pointer to `stream`.\n3. `boundStream.listen(f1, onError: f2, onDone: f3, cancelOnError: b)`\n  starts the listening and transformation. This is accomplished\n  in 2 steps: first the `boundStream` invokes the `transformerClosure` with\n  the `stream` it captured: `transformerClosure(stream, b)`.\n  The result `subscription`, a [StreamSubscription], is then\n  updated to receive its handlers: `subscription.onData(f1)`,\n  `subscription.onError(f2)`, `subscription(f3)`. Finally the subscription\n  is returned as result of the `listen` call.\n\nThere are two common ways to create a StreamSubscription:\n\n1. by creating a new class that implements [StreamSubscription].\n   Note that the subscription should run callbacks in the [Zone] the\n   stream was listened to.\n2. by allocating a [StreamController] and to return the result of\n   listening to its stream.\n\nExample use of a duplicating transformer:\n\n    stringStream.transform(new StreamTransformer<String, String>(\n        (Stream<String> input, bool cancelOnError) {\n          StreamController<String> controller;\n          StreamSubscription<String> subscription;\n          controller = new StreamController<String>(\n            onListen: () {\n              subscription = input.listen((data) {\n                  // Duplicate the data.\n                  controller.add(data);\n                  controller.add(data);\n                },\n                onError: controller.addError,\n                onDone: controller.close,\n                cancelOnError: cancelOnError);\n            },\n            onPause: subscription.pause,\n            onResume: subscription.resume,\n            onCancel: subscription.cancel,\n            sync: true);\n          return controller.stream.listen(null);\n        });\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"transformer","id":"transformer","children":[{"returnType":{"name":"StreamSubscription","refId":"dart.async/StreamSubscription","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"}]},"kind":"param","name":"stream","id":"stream","uri":"dart-sdk/lib/async/stream.dart","line":"1315"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"cancelOnError","id":"cancelOnError","uri":"dart-sdk/lib/async/stream.dart","line":"1315"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1315"}],"line":"1314"},{"returnType":{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"},{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"constructor","name":"fromHandlers","id":"fromHandlers3()","comment":"\nCreates a [StreamTransformer] that delegates events to the given functions.\n\nExample use of a duplicating transformer:\n\n    stringStream.transform(new StreamTransformer<String, String>.fromHandlers(\n        handleData: (String value, EventSink<String> sink) {\n          sink.add(value);\n          sink.add(value);  // Duplicate the incoming events.\n        }));\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"handleData","id":"handleData","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"S","refId":"dart.async/StreamTransformer/S"},"kind":"param","name":"data","id":"data","uri":"dart-sdk/lib/async/stream.dart","line":"1330"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"param","name":"sink","id":"sink","uri":"dart-sdk/lib/async/stream.dart","line":"1330"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1330"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"handleError","id":"handleError","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"error","id":"error","uri":"dart-sdk/lib/async/stream.dart","line":"1331"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"param","name":"stackTrace","id":"stackTrace","uri":"dart-sdk/lib/async/stream.dart","line":"1331"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"param","name":"sink","id":"sink","uri":"dart-sdk/lib/async/stream.dart","line":"1331"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1331"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"handleDone","id":"handleDone","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"kind":"param","name":"sink","id":"sink","uri":"dart-sdk/lib/async/stream.dart","line":"1332"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"1332"}],"line":"1329"},{"kind":"typeparam","name":"S","id":"S"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/async/stream.dart","line":"1249"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"EventSink","id":"EventSink","comment":"\nAn interface that abstracts creation or handling of [Stream] events.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"Create a data event ","children":[{"ref":{"name":"T","refId":"dart.async/EventSink/T"},"kind":"param","name":"event","id":"event"}],"line":"1154"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addError","id":"addError2()","comment":"Create an async error. ","children":[{"kind":"param","name":"errorEvent","id":"errorEvent"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"1156"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","comment":"Request a stream to close. ","line":"1158"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/async/stream.dart","line":"1152"}],"uri":"dart-sdk/lib/async/async.dart","line":"32"}],"kind":"library","name":"dart:convert","id":"dart.convert","comment":"\nConverters for JSON and UTF-8, as well as support for creating additional\nconverters.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_combineSurrogatePair","id":"_combineSurrogatePair2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"lead","id":"lead"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"tail","id":"tail"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"364"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_isTailSurrogate","id":"_isTailSurrogate1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"codeUnit","id":"codeUnit"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"362"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_isLeadSurrogate","id":"_isLeadSurrogate1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"codeUnit","id":"codeUnit"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"360"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_isSurrogate","id":"_isSurrogate1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"codeUnit","id":"codeUnit"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"358"},{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"method","name":"_defaultToEncodable","id":"_defaultToEncodable1()","children":[{"kind":"param","name":"object","id":"object"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/json.dart","line":"307"},{"kind":"method","name":"_parseJson","id":"_parseJson2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"reviver","id":"reviver","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/convert/json.dart","line":"302"},{"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/convert/json.dart","line":"302"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"isPrivate":true,"uri":"dart-sdk/lib/convert/json.dart","line":"302"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_TAIL_SURROGATE_MIN","id":"_TAIL_SURROGATE_MIN","isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"356"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_LEAD_SURROGATE_MIN","id":"_LEAD_SURROGATE_MIN","isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"355"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_SURROGATE_VALUE_MASK","id":"_SURROGATE_VALUE_MASK","isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"354"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_SURROGATE_TAG_MASK","id":"_SURROGATE_TAG_MASK","isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"353"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_SURROGATE_MASK","id":"_SURROGATE_MASK","isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"352"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_FOUR_BYTE_LIMIT","id":"_FOUR_BYTE_LIMIT","isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"349"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_THREE_BYTE_LIMIT","id":"_THREE_BYTE_LIMIT","isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"348"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_TWO_BYTE_LIMIT","id":"_TWO_BYTE_LIMIT","isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"347"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_ONE_BYTE_LIMIT","id":"_ONE_BYTE_LIMIT","isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"346"},{"ref":{"name":"Utf8Codec","refId":"dart.convert/Utf8Codec"},"kind":"variable","name":"UTF8","id":"UTF8","comment":"\nAn instance of the default implementation of the [Utf8Codec].\n\nThis instance provides a convenient access to the most common UTF-8\nuse cases.\n\nExamples:\n\n    var encoded = UTF8.encode(\"Îñţérñåţîöñåļîžåţîờñ\");\n    var decoded = UTF8.decode([0x62, 0x6c, 0xc3, 0xa5, 0x62, 0xc3, 0xa6,\n                               0x72, 0x67, 0x72, 0xc3, 0xb8, 0x64]);\n","uri":"dart-sdk/lib/convert/utf.dart","line":"25"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_BOM_CHARACTER_RUNE","id":"UNICODE_BOM_CHARACTER_RUNE","comment":"The Unicode Byte Order Marker (BOM) character `U+FEFF`. ","uri":"dart-sdk/lib/convert/utf.dart","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"UNICODE_REPLACEMENT_CHARACTER_RUNE","id":"UNICODE_REPLACEMENT_CHARACTER_RUNE","comment":"The Unicode Replacement character `U+FFFD` (�). ","uri":"dart-sdk/lib/convert/utf.dart","line":"8"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_LATIN1_MASK","id":"_LATIN1_MASK","isPrivate":true,"uri":"dart-sdk/lib/convert/latin1.dart","line":"21"},{"ref":{"name":"Latin1Codec","refId":"dart.convert/Latin1Codec"},"kind":"variable","name":"LATIN1","id":"LATIN1","comment":"\nAn instance of the default implementation of the [Latin1Codec].\n\nThis instance provides a convenient access to the most common ISO Latin 1\nuse cases.\n\nExamples:\n\n    var encoded = LATIN1.encode(\"blåbærgrød\");\n    var decoded = LATIN1.decode([0x62, 0x6c, 0xe5, 0x62, 0xe6,\n                                 0x72, 0x67, 0x72, 0xf8, 0x64]);\n","uri":"dart-sdk/lib/convert/latin1.dart","line":"19"},{"ref":{"name":"JsonCodec","refId":"dart.convert/JsonCodec"},"kind":"variable","name":"JSON","id":"JSON","comment":"\nAn instance of the default implementation of the [JsonCodec].\n\nThis instance provides a convenient access to the most common JSON\nuse cases.\n\nExamples:\n\n    var encoded = JSON.encode([1, 2, { \"a\": null }]);\n    var decoded = JSON.decode('[\"foo\", { \"bar\": 499 }]');\n","uri":"dart-sdk/lib/convert/json.dart","line":"59"},{"ref":{"name":"HtmlEscape","refId":"dart.convert/HtmlEscape"},"kind":"variable","name":"HTML_ESCAPE","id":"HTML_ESCAPE","uri":"dart-sdk/lib/convert/html_escape.dart","line":"8"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_ASCII_MASK","id":"_ASCII_MASK","isPrivate":true,"uri":"dart-sdk/lib/convert/ascii.dart","line":"21"},{"ref":{"name":"AsciiCodec","refId":"dart.convert/AsciiCodec"},"kind":"variable","name":"ASCII","id":"ASCII","comment":"\nAn instance of the default implementation of the [AsciiCodec].\n\nThis instance provides a convenient access to the most common ASCII\nuse cases.\n\nExamples:\n\n    var encoded = ASCII.encode(\"This is ASCII!\");\n    var decoded = ASCII.decode([0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73,\n                                0x20, 0x41, 0x53, 0x43, 0x49, 0x49, 0x21]);\n","uri":"dart-sdk/lib/convert/ascii.dart","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_Utf8Decoder","id":"_Utf8Decoder","comment":"\nDecodes UTF-8.\n\nThe decoder handles chunked input.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"394"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"flush","id":"flush0()","comment":"\nFlushes this decoder as if closed.\n\nThis method throws if the input was partial and the decoder was\nconstructed with `allowMalformed` set to `false`.\n","line":"404"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"convert","id":"convert3()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"codeUnits","id":"codeUnits"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"startIndex","id":"startIndex"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"endIndex","id":"endIndex"}],"line":"416"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"hasPartialInput","id":"hasPartialInput","line":"385"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_allowMalformed","id":"_allowMalformed","isPrivate":true,"line":"376"},{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"isFinal":true,"kind":"variable","name":"_stringSink","id":"_stringSink","isPrivate":true,"line":"377"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_isFirstCharacter","id":"_isFirstCharacter","isPrivate":true,"line":"378"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"379"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_expectedUnits","id":"_expectedUnits","isPrivate":true,"line":"380"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_extraUnits","id":"_extraUnits","isPrivate":true,"line":"381"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"isStatic":true,"kind":"variable","name":"_LIMITS","id":"_LIMITS","isPrivate":true,"line":"388"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"initializedField":{"name":"_stringSink","refId":"dart.convert/_Utf8Decoder/_stringSink"},"kind":"param","name":"_stringSink","id":"_stringSink","isPrivate":true},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_allowMalformed","refId":"dart.convert/_Utf8Decoder/_allowMalformed"},"kind":"param","name":"_allowMalformed","id":"_allowMalformed","isPrivate":true}],"line":"383"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"375"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},{"name":"String","refId":"dart.core/String"}]},"kind":"class","name":"Utf8Decoder","id":"Utf8Decoder","comment":"\nThis class converts UTF-8 code units (lists of unsigned 8-bit integers)\nto a string.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"convert","id":"convert1()","comment":"\nConverts the UTF-8 [codeUnits] (a list of unsigned 8-bit integers) to the\ncorresponding string.\n\nIf the [codeUnits] start with a leading [UNICODE_BOM_CHARACTER_RUNE] this\ncharacter is discarded.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"codeUnits","id":"codeUnits"}],"line":"316"},{"returnType":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","comment":"\nStarts a chunked conversion.\n\nThe converter works more efficiently if the given [sink] is a\n[StringConversionSink].\n","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"sink","id":"sink","line":"331"}],"line":"330"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"param","name":"stream","id":"stream"}],"line":"342"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_allowMalformed","id":"_allowMalformed","isPrivate":true,"line":"294"},{"kind":"constructor","name":"","id":"1()","comment":"\nInstantiates a new [Utf8Decoder].\n\nThe optional [allowMalformed] argument defines how [convert] deals\nwith invalid or unterminated character sequences.\n\nIf it is `true` [convert] replaces invalid (or unterminated) character\nsequences with the Unicode Replacement character `U+FFFD` (�). Otherwise\nit throws a [FormatException].\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowMalformed","id":"allowMalformed"}],"line":"306"}],"uri":"dart-sdk/lib/convert/utf.dart","line":"293"},{"superclass":{"name":"_Utf8Encoder+StringConversionSinkMixin","refId":"dart.convert/_Utf8Encoder+StringConversionSinkMixin"},"kind":"class","name":"_Utf8EncoderSink","id":"_Utf8EncoderSink","comment":"\nThis class encodes chunked strings to UTF-8 code units (unsigned 8-bit\nintegers).\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"233"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"242"},{"ref":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"isFinal":true,"kind":"variable","name":"_sink","id":"_sink","isPrivate":true,"line":"229"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"initializedField":{"name":"_sink","refId":"dart.convert/_Utf8EncoderSink/_sink"},"kind":"param","name":"_sink","id":"_sink","isPrivate":true}],"line":"231"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"227"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_Utf8Encoder","id":"_Utf8Encoder","comment":"\nThis class encodes Strings to UTF-8 code units (unsigned 8 bit integers).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_writeSurrogate","id":"_writeSurrogate2()","comment":"\nTries to combine the given [leadingSurrogate] with the [nextCodeUnit] and\nwrites it to [_buffer].\n\nReturns true if the [nextCodeUnit] was combined with the\n[leadingSurrogate]. If it wasn't then nextCodeUnit was not a trailing\nsurrogate and has not been written yet.\n\nIt is safe to pass 0 for [nextCodeUnit] in which case only the leading\nsurrogate is written.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"leadingSurrogate","id":"leadingSurrogate"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"nextCodeUnit","id":"nextCodeUnit"}],"isPrivate":true,"line":"150"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_fillBuffer","id":"_fillBuffer3()","comment":"\nFills the [_buffer] with as many characters as possible.\n\nDoes not encode any trailing lead-surrogate. This must be done by the\ncaller.\n\nReturns the position in the string. The returned index points to the\nfirst code unit that hasn't been encoded.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"line":"184"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_carry","id":"_carry","isPrivate":true,"line":"127"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_bufferIndex","id":"_bufferIndex","isPrivate":true,"line":"128"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"isFinal":true,"kind":"variable","name":"_buffer","id":"_buffer","isPrivate":true,"line":"129"},{"isStatic":true,"kind":"variable","name":"_DEFAULT_BYTE_BUFFER_SIZE","id":"_DEFAULT_BYTE_BUFFER_SIZE","isPrivate":true,"line":"131"},{"kind":"constructor","name":"","id":"0()","line":"133"},{"kind":"constructor","name":"withBufferSize","id":"withBufferSize1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"bufferSize","id":"bufferSize"}],"line":"135"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/utf.dart","line":"126"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"class","name":"Utf8Encoder","id":"Utf8Encoder","comment":"\nThis class converts strings to their UTF-8 code units (a list of\nunsigned 8-bit integers).\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"convert","id":"convert1()","comment":"\nConverts [string] to its UTF-8 code units (a list of\nunsigned 8-bit integers).\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"}],"line":"87"},{"returnType":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","comment":"\nStarts a chunked conversion.\n\nThe converter works more efficiently if the given [sink] is a\n[ByteConversionSink].\n","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"param","name":"sink","id":"sink","line":"111"}],"line":"110"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"stream","id":"stream"}],"line":"119"},{"kind":"constructor","name":"","id":"0()","line":"81"}],"uri":"dart-sdk/lib/convert/utf.dart","line":"79"},{"superclass":{"name":"Encoding","refId":"dart.convert/Encoding"},"kind":"class","name":"Utf8Codec","id":"Utf8Codec","comment":"\nA [Utf8Codec] encodes strings to utf-8 code units (bytes) and decodes\nUTF-8 code units to strings.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decode","id":"decode2()","comment":"\nDecodes the UTF-8 [codeUnits] (a list of unsigned 8-bit integers) to the\ncorresponding string.\n\nIf the [codeUnits] start with a leading [UNICODE_BOM_CHARACTER_RUNE] this\ncharacter is discarded.\n\nIf [allowMalformed] is `true` the decoder replaces invalid (or\nunterminated) character sequences with the Unicode Replacement character\n`U+FFFD` (�). Otherwise it throws a [FormatException].\n\nIf [allowMalformed] is not given, it defaults to the `allowMalformed` that\nwas used to instantiate `this`.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"codeUnits","id":"codeUnits"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"allowMalformed","id":"allowMalformed"}],"line":"64"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","line":"48"},{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"property","name":"encoder","id":"encoder","line":"69"},{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"decoder","id":"decoder","line":"70"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_allowMalformed","id":"_allowMalformed","isPrivate":true,"line":"32"},{"kind":"constructor","name":"","id":"1()","comment":"\nInstantiates a new [Utf8Codec].\n\nThe optional [allowMalformed] argument defines how [decoder] (and [decode])\ndeal with invalid or unterminated character sequences.\n\nIf it is `true` (and not overriden at the method invocation) [decode] and\nthe [decoder] replace invalid (or unterminated) octet\nsequences with the Unicode Replacement character `U+FFFD` (�). Otherwise\nthey throw a [FormatException].\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowMalformed","id":"allowMalformed"}],"line":"45"}],"uri":"dart-sdk/lib/convert/utf.dart","line":"31"},{"superclass":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"class","name":"_Utf8ConversionSink","id":"_Utf8ConversionSink","comment":"\nDecodes UTF-8 code units.\n\nForwards the decoded strings to the given [StringConversionSink].\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"319"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"chunk","id":"chunk"}],"line":"330"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"chunk","id":"chunk"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"startIndex","id":"startIndex"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"endIndex","id":"endIndex"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"334"},{"ref":{"name":"_Utf8Decoder","refId":"dart.convert/_Utf8Decoder"},"isFinal":true,"kind":"variable","name":"_decoder","id":"_decoder","isPrivate":true,"line":"308"},{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"isFinal":true,"kind":"variable","name":"_chunkedSink","id":"_chunkedSink","isPrivate":true,"line":"309"},{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"isFinal":true,"kind":"variable","name":"_buffer","id":"_buffer","isPrivate":true,"line":"310"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"param","name":"sink","id":"sink"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"allowMalformed","id":"allowMalformed"}],"line":"311"},{"kind":"constructor","name":"_","id":"_3()","children":[{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"initializedField":{"name":"_chunkedSink","refId":"dart.convert/_Utf8ConversionSink/_chunkedSink"},"kind":"param","name":"_chunkedSink","id":"_chunkedSink","isPrivate":true},{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"kind":"param","name":"stringBuffer","id":"stringBuffer"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"allowMalformed","id":"allowMalformed","line":"315"}],"isPrivate":true,"line":"314"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"306"},{"superclass":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"class","name":"_Utf8StringSinkAdapter","id":"_Utf8StringSinkAdapter","comment":"\nDecodes UTF-8 code units and stores them in a [StringSink].\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"284"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"chunk","id":"chunk"}],"line":"289"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"codeUnits","id":"codeUnits"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"startIndex","id":"startIndex"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"endIndex","id":"endIndex"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast","line":"294"}],"line":"293"},{"ref":{"name":"_Utf8Decoder","refId":"dart.convert/_Utf8Decoder"},"isFinal":true,"kind":"variable","name":"_decoder","id":"_decoder","isPrivate":true,"line":"276"},{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink"},"isFinal":true,"kind":"variable","name":"_chunkedSink","id":"_chunkedSink","isPrivate":true,"line":"277"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink"},"kind":"param","name":"chunkedSink","id":"chunkedSink"},{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"kind":"param","name":"sink","id":"sink","line":"280"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"allowMalformed","id":"allowMalformed","line":"280"}],"line":"279"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"275"},{"superclass":{"name":"StringConversionSinkBase","refId":"dart.convert/StringConversionSinkBase"},"kind":"class","name":"_StringAdapterSink","id":"_StringAdapterSink","comment":"\nThis class adapts a simple [ChunkedConversionSink] to a\n[StringConversionSink].\n\nAll additional methods of the [StringConversionSink] (compared to the\nChunkedConversionSink) are redirected to the `add` method.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"257"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"259"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"268"},{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"_sink","id":"_sink","isPrivate":true,"line":"253"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"initializedField":{"name":"_sink","refId":"dart.convert/_StringAdapterSink/_sink"},"kind":"param","name":"_sink","id":"_sink","isPrivate":true}],"line":"255"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"252"},{"superclass":{"name":"_StringSinkConversionSink","refId":"dart.convert/_StringSinkConversionSink"},"kind":"class","name":"_StringCallbackSink","id":"_StringCallbackSink","comment":"\nThis class accumulates all chunks into one string\nand invokes a callback when the sink is closed.\n\nThis class can be used to terminate a chunked conversion.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"232"},{"returnType":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"method","name":"asUtf8Sink","id":"asUtf8Sink1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"allowMalformed","id":"allowMalformed"}],"line":"239"},{"ref":{"name":"_ChunkedConversionCallback","refId":"dart.convert/_ChunkedConversionCallback"},"isFinal":true,"kind":"variable","name":"_callback","id":"_callback","isPrivate":true,"line":"229"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"_ChunkedConversionCallback","refId":"dart.convert/_ChunkedConversionCallback"},"initializedField":{"name":"_callback","refId":"dart.convert/_StringCallbackSink/_callback"},"kind":"param","name":"_callback","id":"_callback","isPrivate":true}],"line":"230"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"228"},{"superclass":{"name":"StringConversionSinkBase","refId":"dart.convert/StringConversionSinkBase"},"kind":"class","name":"_StringSinkConversionSink","id":"_StringSinkConversionSink","comment":"\nThis class is a [StringConversionSink] that wraps a [StringSink].\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"199"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"200"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"211"},{"returnType":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"method","name":"asUtf8Sink","id":"asUtf8Sink1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"allowMalformed","id":"allowMalformed"}],"line":"213"},{"returnType":{"name":"ClosableStringSink","refId":"dart.convert/ClosableStringSink"},"kind":"method","name":"asStringSink","id":"asStringSink0()","line":"217"},{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"kind":"variable","name":"_stringSink","id":"_stringSink","isPrivate":true,"line":"196"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"initializedField":{"name":"_stringSink","refId":"dart.convert/_StringSinkConversionSink/_stringSink"},"kind":"param","name":"_stringSink","id":"_stringSink","isPrivate":true}],"line":"197"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"195"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"}],"kind":"class","name":"StringConversionSinkMixin","id":"StringConversionSinkMixin","comment":"\nThis class provides a mixin for converters that need to accept String\ninputs.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"178"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"179"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"str","id":"str"}],"line":"181"},{"returnType":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"method","name":"asUtf8Sink","id":"asUtf8Sink1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"allowMalformed","id":"allowMalformed"}],"line":"183"},{"returnType":{"name":"ClosableStringSink","refId":"dart.convert/ClosableStringSink"},"kind":"method","name":"asStringSink","id":"asStringSink0()","line":"187"}],"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"176"},{"superclass":{"name":"StringConversionSinkMixin","refId":"dart.convert/StringConversionSinkMixin"},"isAbstract":true,"kind":"class","name":"StringConversionSinkBase","id":"StringConversionSinkBase","comment":"\nThis class provides a base-class for converters that need to accept String\ninputs.\n","uri":"dart-sdk/lib/convert/string_conversion.dart","line":"169"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"ClosableStringSink","refId":"dart.convert/ClosableStringSink"}],"kind":"class","name":"_StringConversionSinkAsStringSinkAdapter","id":"_StringConversionSinkAsStringSinkAdapter","comment":"\nThis class wraps an existing [StringConversionSink] and exposes a\n[ClosableStringSink] interface. The wrapped sink only needs to implement\n`add` and `close`.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"120"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeCharCode","id":"writeCharCode1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"charCode","id":"charCode"}],"line":"125"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"write","id":"write1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"130"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeln","id":"writeln1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"o","id":"o"}],"line":"136"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeAll","id":"writeAll2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"objects","id":"objects"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"141"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_flush","id":"_flush0()","isPrivate":true,"line":"158"},{"isStatic":true,"kind":"variable","name":"_MIN_STRING_SIZE","id":"_MIN_STRING_SIZE","isPrivate":true,"line":"112"},{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"kind":"variable","name":"_buffer","id":"_buffer","isPrivate":true,"line":"114"},{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"variable","name":"_chunkedSink","id":"_chunkedSink","isPrivate":true,"line":"115"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"initializedField":{"name":"_chunkedSink","refId":"dart.convert/_StringConversionSinkAsStringSinkAdapter/_chunkedSink"},"kind":"param","name":"_chunkedSink","id":"_chunkedSink","isPrivate":true}],"line":"117"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"111"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"ClosableStringSink","refId":"dart.convert/ClosableStringSink"}],"kind":"class","name":"_ClosableStringSink","id":"_ClosableStringSink","comment":"\nThis class wraps an existing [StringSink] and invokes a\nclosure when [close] is invoked.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"96"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeCharCode","id":"writeCharCode1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"charCode","id":"charCode"}],"line":"98"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"write","id":"write1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"99"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeln","id":"writeln1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"o","id":"o"}],"line":"100"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"writeAll","id":"writeAll2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"objects","id":"objects"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"101"},{"ref":{"name":"_StringSinkCloseCallback","refId":"dart.convert/_StringSinkCloseCallback"},"isFinal":true,"kind":"variable","name":"_callback","id":"_callback","isPrivate":true,"line":"91"},{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"isFinal":true,"kind":"variable","name":"_sink","id":"_sink","isPrivate":true,"line":"92"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"initializedField":{"name":"_sink","refId":"dart.convert/_ClosableStringSink/_sink"},"kind":"param","name":"_sink","id":"_sink","isPrivate":true},{"ref":{"name":"_StringSinkCloseCallback","refId":"dart.convert/_StringSinkCloseCallback"},"initializedField":{"name":"_callback","refId":"dart.convert/_ClosableStringSink/_callback"},"kind":"param","name":"_callback","id":"_callback","isPrivate":true}],"line":"94"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"90"},{"returnType":{"name":"void","refId":"void"},"kind":"typedef","name":"_StringSinkCloseCallback","id":"_StringSinkCloseCallback","isPrivate":true,"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"84"},{"superclass":{"name":"StringSink","refId":"dart.core/StringSink"},"isAbstract":true,"kind":"class","name":"ClosableStringSink","id":"ClosableStringSink","comment":"\nA [ClosableStringSink] extends the [StringSink] interface by adding a\n`close` method.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","comment":"\nCloses `this` and flushes any outstanding data.\n","line":"81"},{"returnType":{"name":"ClosableStringSink","refId":"dart.convert/ClosableStringSink"},"kind":"constructor","name":"fromStringSink","id":"fromStringSink2()","comment":"\nCreates a new instance combining a [StringSink] [sink] and a callback\n[onClose] which is invoked when the returned instance is closed.\n","children":[{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"kind":"param","name":"sink","id":"sink"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"onClose","id":"onClose","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"75"}],"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"70"},{"superclass":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"isAbstract":true,"kind":"class","name":"StringConversionSink","id":"StringConversionSink","comment":"\nThis class provides an interface for converters to\nefficiently transmit String data.\n\nInstead of limiting the interface to one non-chunked String it accepts\npartial strings or can be transformed into a byte sink that\naccepts UTF-8 code units.\n\nThis abstract class will likely get more methods over time. Implementers are\nurged to extend [StringConversionSinkBase] or to mix in\n[StringConversionSinkMixin], to ensure that their class covers the newly\nadded methods.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","comment":"\nAdds the next [chunk] to `this`.\n\nAdds the substring defined by [start] and [end]-exclusive to `this`.\n\nIf [isLast] is `true` closes `this`.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"chunk","id":"chunk"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"45"},{"returnType":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"method","name":"asUtf8Sink","id":"asUtf8Sink1()","comment":"\nReturns `this` as a sink that accepts UTF-8 input.\n\nIf used, this method must be the first and only call to `this`. It\ninvalidates `this`. All further operations must be performed on the result.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"allowMalformed","id":"allowMalformed"}],"line":"53"},{"returnType":{"name":"ClosableStringSink","refId":"dart.convert/ClosableStringSink"},"kind":"method","name":"asStringSink","id":"asStringSink0()","comment":"\nReturns `this` as a [ClosableStringSink].\n\nIf used, this method must be the first and only call to `this`. It\ninvalidates `this`. All further operations must be performed on the result.\n","line":"63"},{"kind":"constructor","name":"","id":"0()","line":"22"},{"returnType":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"constructor","name":"withCallback","id":"withCallback1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"accumulated","id":"accumulated","uri":"dart-sdk/lib/convert/string_conversion.dart","line":"23"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"23"},{"returnType":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"constructor","name":"from","id":"from1()","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"sink","id":"sink"}],"line":"25"},{"returnType":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"constructor","name":"fromStringSink","id":"fromStringSink1()","comment":"\nCreates a new instance wrapping the given [sink].\n\nEvery string that is added to the returned instance is forwarded to\nthe [sink]. The instance is allowed to buffer and is not required to\nforward immediately.\n","children":[{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"kind":"param","name":"sink","id":"sink"}],"line":"35"}],"uri":"dart-sdk/lib/convert/string_conversion.dart","line":"20"},{"superclass":{"name":"StringConversionSinkBase","refId":"dart.convert/StringConversionSinkBase"},"kind":"class","name":"_LineSplitterSink","id":"_LineSplitterSink","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"chunk","id":"chunk"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"43"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"54"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_addSlice","id":"_addSlice5()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"chunk","id":"chunk"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"adder","id":"adder","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"val","id":"val","uri":"dart-sdk/lib/convert/line_splitter.dart","line":"59"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"59"}],"isPrivate":true,"line":"58"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_LF","id":"_LF","isPrivate":true,"line":"34"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_CR","id":"_CR","isPrivate":true,"line":"35"},{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"isFinal":true,"kind":"variable","name":"_sink","id":"_sink","isPrivate":true,"line":"37"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_carry","id":"_carry","isPrivate":true,"line":"39"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"initializedField":{"name":"_sink","refId":"dart.convert/_LineSplitterSink/_sink"},"kind":"param","name":"_sink","id":"_sink","isPrivate":true}],"line":"41"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/line_splitter.dart","line":"33"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]}]},"kind":"class","name":"LineSplitter","id":"LineSplitter","comment":"\nThis class splits [String] values into individual lines.\n","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"convert","id":"convert1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"data","id":"data"}],"line":"14"},{"returnType":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"sink","id":"sink","line":"23"}],"line":"22"},{"kind":"constructor","name":"","id":"0()","line":"12"}],"uri":"dart-sdk/lib/convert/line_splitter.dart","line":"10"},{"superclass":{"name":"ByteConversionSinkBase","refId":"dart.convert/ByteConversionSinkBase"},"kind":"class","name":"_Latin1DecoderSink","id":"_Latin1DecoderSink","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"118"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"source","id":"source"}],"line":"122"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addSliceToSink","id":"_addSliceToSink4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"source","id":"source"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"isPrivate":true,"line":"126"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"source","id":"source"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"135"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_allowInvalid","id":"_allowInvalid","isPrivate":true,"line":"114"},{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"variable","name":"_sink","id":"_sink","isPrivate":true,"line":"115"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_allowInvalid","refId":"dart.convert/_Latin1DecoderSink/_allowInvalid"},"kind":"param","name":"_allowInvalid","id":"_allowInvalid","isPrivate":true},{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"initializedField":{"name":"_sink","refId":"dart.convert/_Latin1DecoderSink/_sink"},"kind":"param","name":"_sink","id":"_sink","isPrivate":true}],"line":"116"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/latin1.dart","line":"113"},{"superclass":{"name":"_UnicodeSubsetDecoder","refId":"dart.convert/_UnicodeSubsetDecoder"},"kind":"class","name":"Latin1Decoder","id":"Latin1Decoder","comment":"\nThis class converts Latin-1 bytes (lists of unsigned 8-bit integers)\nto a string.\n","children":[{"returnType":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","comment":"\nStarts a chunked conversion.\n\nThe converter works more efficiently if the given [sink] is a\n[StringConversionSink].\n","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"sink","id":"sink","line":"101"}],"line":"100"},{"kind":"constructor","name":"","id":"1()","comment":"\nInstantiates a new [Latin1Decoder].\n\nThe optional [allowInvalid] argument defines how [convert] deals\nwith invalid bytes.\n\nIf it is `true`, [convert] replaces invalid bytes with the Unicode\nReplacement character `U+FFFD` (�).\nOtherwise it throws a [FormatException].\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowInvalid","id":"allowInvalid"}],"line":"91"}],"uri":"dart-sdk/lib/convert/latin1.dart","line":"80"},{"superclass":{"name":"_UnicodeSubsetEncoder","refId":"dart.convert/_UnicodeSubsetEncoder"},"kind":"class","name":"Latin1Encoder","id":"Latin1Encoder","comment":"\nThis class converts strings of only ISO Latin-1 characters to bytes.\n","children":[{"kind":"constructor","name":"","id":"0()","line":"73"}],"uri":"dart-sdk/lib/convert/latin1.dart","line":"72"},{"superclass":{"name":"Encoding","refId":"dart.convert/Encoding"},"kind":"class","name":"Latin1Codec","id":"Latin1Codec","comment":"\nA [LatinCodec] encodes strings to ISO Latin-1 (aka ISO-8859-1) bytes\nand decodes Latin-1 bytes to strings.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decode","id":"decode2()","comment":"\nDecodes the Latin-1 [bytes] (a list of unsigned 8-bit integers) to the\ncorresponding string.\n\nIf [bytes] contains values that are not in the range 0 .. 255, the decoder\nwill eventually throw a [FormatException].\n\nIf [allowInvalid] is not provided, it defaults to the value used to create\nthis [Latin1Codec].\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"allowInvalid","id":"allowInvalid"}],"line":"53"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","line":"41"},{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"property","name":"encoder","id":"encoder","line":"62"},{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"decoder","id":"decoder","line":"64"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_allowInvalid","id":"_allowInvalid","isPrivate":true,"line":"28"},{"kind":"constructor","name":"","id":"1()","comment":"\nInstantiates a new [Latin1Codec].\n\nIf [allowInvalid] is true, the [decode] method and the converter\nreturned by [decoder] will default to allowing invalid values. Invalid\nvalues are decoded into the Unicode Replacement character (U+FFFD).\nCalls to the [decode] method can override this default.\n\nEncoders will not accept invalid (non Latin-1) characters.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowInvalid","id":"allowInvalid"}],"line":"39"}],"uri":"dart-sdk/lib/convert/latin1.dart","line":"27"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_JsonStringifier","id":"_JsonStringifier","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"stringify","id":"stringify2()","children":[{"kind":"param","name":"object","id":"object"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"toEncodable","id":"toEncodable","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"object","id":"object","uri":"dart-sdk/lib/convert/json.dart","line":"332"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"332"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"printOn","id":"printOn3()","children":[{"kind":"param","name":"object","id":"object"},{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"kind":"param","name":"output","id":"output"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"toEncodable","id":"toEncodable","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"object","id":"object","uri":"dart-sdk/lib/convert/json.dart","line":"340"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"340"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"numberToString","id":"numberToString1()","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"line":"345"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"hexDigit","id":"hexDigit1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"x","id":"x"}],"line":"350"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"escape","id":"escape2()","children":[{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"kind":"param","name":"sb","id":"sb"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"}],"line":"352"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"checkCycle","id":"checkCycle1()","children":[{"kind":"param","name":"object","id":"object"}],"line":"396"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"stringifyValue","id":"stringifyValue1()","children":[{"kind":"param","name":"object","id":"object"}],"line":"403"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"stringifyJsonValue","id":"stringifyJsonValue1()","comment":"\nSerializes a [num], [String], [bool], [Null], [List] or [Map] value.\n\nReturns true if the value is one of these types, and false if not.\nIf a value is both a [List] and a [Map], it's serialized as a [List].\n","children":[{"kind":"param","name":"object","id":"object"}],"line":"427"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"BACKSPACE","id":"BACKSPACE","line":"311"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"TAB","id":"TAB","line":"312"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"NEWLINE","id":"NEWLINE","line":"313"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CARRIAGE_RETURN","id":"CARRIAGE_RETURN","line":"314"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"FORM_FEED","id":"FORM_FEED","line":"315"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"QUOTE","id":"QUOTE","line":"316"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"BACKSLASH","id":"BACKSLASH","line":"317"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CHAR_b","id":"CHAR_b","line":"318"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CHAR_f","id":"CHAR_f","line":"319"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CHAR_n","id":"CHAR_n","line":"320"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CHAR_r","id":"CHAR_r","line":"321"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CHAR_t","id":"CHAR_t","line":"322"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"CHAR_u","id":"CHAR_u","line":"323"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isFinal":true,"kind":"variable","name":"toEncodable","id":"toEncodable","line":"325"},{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"isFinal":true,"kind":"variable","name":"sink","id":"sink","line":"326"},{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"isFinal":true,"kind":"variable","name":"seen","id":"seen","line":"327"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"StringSink","refId":"dart.core/StringSink"},"initializedField":{"name":"sink","refId":"dart.convert/_JsonStringifier/sink"},"kind":"param","name":"sink","id":"sink"},{"ref":{"name":"Function","refId":"dart.core/Function"},"initializedField":{"name":"toEncodable","refId":"dart.convert/_JsonStringifier/toEncodable"},"kind":"param","name":"toEncodable","id":"toEncodable"}],"line":"329"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/json.dart","line":"309"},{"superclass":{"name":"_StringSinkConversionSink","refId":"dart.convert/_StringSinkConversionSink"},"kind":"class","name":"_JsonDecoderSink","id":"_JsonDecoderSink","comment":"\nImplements the chunked conversion from a JSON string to its corresponding\nobject.\n\nThe sink only creates one object, but its input can be chunked.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"290"},{"ref":{"name":"_Reviver","refId":"dart.convert/_Reviver"},"isFinal":true,"kind":"variable","name":"_reviver","id":"_reviver","isPrivate":true,"line":"284"},{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"isFinal":true,"kind":"variable","name":"_chunkedSink","id":"_chunkedSink","isPrivate":true,"line":"285"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"_Reviver","refId":"dart.convert/_Reviver"},"initializedField":{"name":"_reviver","refId":"dart.convert/_JsonDecoderSink/_reviver"},"kind":"param","name":"_reviver","id":"_reviver","isPrivate":true},{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"initializedField":{"name":"_chunkedSink","refId":"dart.convert/_JsonDecoderSink/_chunkedSink"},"kind":"param","name":"_chunkedSink","id":"_chunkedSink","isPrivate":true}],"line":"287"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/json.dart","line":"283"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Object","refId":"dart.core/Object"}]},"kind":"class","name":"JsonDecoder","id":"JsonDecoder","comment":"\nThis class parses JSON strings and builds the corresponding objects.\n","children":[{"kind":"method","name":"convert","id":"convert1()","comment":"\nConverts the given JSON-string [input] to its corresponding object.\n\nParsed JSON values are of the types [num], [String], [bool], [Null],\n[List]s of parsed JSON values or [Map]s from [String] to parsed\nJSON values.\n\nIf `this` was initialized with a reviver, then the parsing operation\ninvokes the reviver on every object or list property that has been parsed.\nThe arguments are the property name ([String]) or list index ([int]), and\nthe value is the parsed value. The return value of the reviver is used as\nthe value of that property instead the parsed value.\n\nThrows [FormatException] if the input is not valid JSON text.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"input","id":"input"}],"line":"259"},{"returnType":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","comment":"\nStarts a conversion from a chunked JSON string to its corresponding\nobject.\n\nThe output [sink] receives exactly one decoded element through `add`.\n","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"sink","id":"sink","line":"268"}],"line":"267"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"stream","id":"stream"}],"line":"273"},{"ref":{"name":"_Reviver","refId":"dart.convert/_Reviver"},"isFinal":true,"kind":"variable","name":"_reviver","id":"_reviver","isPrivate":true,"line":"236"},{"kind":"constructor","name":"","id":"1()","comment":"\nConstructs a new JsonDecoder.\n\nThe [reviver] may be `null`.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"reviver","id":"reviver","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/convert/json.dart","line":"242"},{"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/convert/json.dart","line":"242"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"242"}],"uri":"dart-sdk/lib/convert/json.dart","line":"235"},{"superclass":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"class","name":"_JsonEncoderSink","id":"_JsonEncoderSink","comment":"\nImplements the chunked conversion from object to its JSON representation.\n\nThe sink only accepts one value, but will produce output in a chunked way.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nEncodes the given object [o].\n\nIt is an error to invoke this method more than once on any instance. While\nthis makes the input effectly non-chunked the output will be generated in\na chunked way.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"219"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"229"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isFinal":true,"kind":"variable","name":"_toEncodableFunction","id":"_toEncodableFunction","isPrivate":true,"line":"206"},{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"isFinal":true,"kind":"variable","name":"_sink","id":"_sink","isPrivate":true,"line":"207"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"variable","name":"_isDone","id":"_isDone","isPrivate":true,"line":"208"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"initializedField":{"name":"_sink","refId":"dart.convert/_JsonEncoderSink/_sink"},"kind":"param","name":"_sink","id":"_sink","isPrivate":true},{"ref":{"name":"Function","refId":"dart.core/Function"},"initializedField":{"name":"_toEncodableFunction","refId":"dart.convert/_JsonEncoderSink/_toEncodableFunction"},"kind":"param","name":"_toEncodableFunction","id":"_toEncodableFunction","isPrivate":true}],"line":"210"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/json.dart","line":"205"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"Object","refId":"dart.core/Object"},{"name":"String","refId":"dart.core/String"}]},"kind":"class","name":"JsonEncoder","id":"JsonEncoder","comment":"\nThis class converts JSON objects to strings.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"convert","id":"convert1()","comment":"\nConverts the given object [o] to its JSON representation.\n\nDirectly serializable values are [num], [String], [bool], and [Null], as\nwell as some [List] and [Map] values.\nFor [List], the elements must all be serializable.\nFor [Map], the keys must be [String] and the values must be serializable.\n\nIf a value is any other type is attempted serialized, the conversion\nfunction provided in the constructor is invoked with the object as argument\nand the result, which must be a directly serializable value,\nis serialized instead of the original value.\n\nIf the conversion throws, or returns a value that is not directly\nserializable, a [JsonUnsupportedObjectError] exception is thrown.\nIf the call throws, the error is caught and stored in the\n[JsonUnsupportedObjectError]'s [:cause:] field.\n\nIf a [List] or [Map] contains a reference to itself, directly or through\nother lists or maps, it cannot be serialized and a [JsonCyclicError] is\nthrown.\n\nJson Objects should not change during serialization.\nIf an object is serialized more than once, [stringify] is allowed to cache\nthe JSON text for it. I.e., if an object changes after it is first\nserialized, the new values may or may not be reflected in the result.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"176"},{"returnType":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","comment":"\nStarts a chunked conversion.\n\nThe converter works more efficiently if the given [sink] is a\n[StringConversionSink].\n\nReturns a chunked-conversion sink that accepts at most one object. It is\nan error to invoke `add` more than once on the returned sink.\n","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"sink","id":"sink","line":"189"}],"line":"188"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"stream","id":"stream"}],"line":"197"},{"isFinal":true,"kind":"variable","name":"_toEncodableFunction","id":"_toEncodableFunction","isPrivate":true,"line":"132"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreates a JSON encoder.\n\nThe JSON encoder handles numbers, strings, booleans, null, lists and\nmaps directly.\n\nAny other object is attempted converted by [toEncodable] to an\nobject that is of one of the convertible types.\n\nIf [toEncodable] is omitted, it defaults to calling `.toJson()` on\nthe object.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"toEncodable","id":"toEncodable","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"nonSerializable","id":"nonSerializable","uri":"dart-sdk/lib/convert/json.dart","line":"146"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"146"}],"uri":"dart-sdk/lib/convert/json.dart","line":"131"},{"superclass":{"name":"JsonCodec","refId":"dart.convert/JsonCodec"},"kind":"class","name":"_ReviverJsonCodec","id":"_ReviverJsonCodec","children":[{"kind":"method","name":"decode","id":"decode2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"reviver","id":"reviver","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/convert/json.dart","line":"120"},{"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/convert/json.dart","line":"120"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"120"},{"ref":{"name":"JsonDecoder","refId":"dart.convert/JsonDecoder"},"kind":"property","name":"decoder","id":"decoder","line":"125"},{"ref":{"name":"_Reviver","refId":"dart.convert/_Reviver"},"isFinal":true,"kind":"variable","name":"_reviver","id":"_reviver","isPrivate":true,"line":"117"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"_Reviver","refId":"dart.convert/_Reviver"},"initializedField":{"name":"_reviver","refId":"dart.convert/_ReviverJsonCodec/_reviver"},"kind":"param","name":"_reviver","id":"_reviver","isPrivate":true}],"line":"118"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/json.dart","line":"116"},{"kind":"typedef","name":"_Reviver","id":"_Reviver","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/json.dart","line":"114"},{"superclass":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"Object","refId":"dart.core/Object"},{"name":"String","refId":"dart.core/String"}]},"kind":"class","name":"JsonCodec","id":"JsonCodec","comment":"\nA [JsonCodec] encodes JSON objects to strings and decodes strings to\nJSON objects.\n","children":[{"kind":"method","name":"decode","id":"decode2()","comment":"\nParses the string and returns the resulting Json object.\n\nThe optional [reviver] function is called once for each object or list\nproperty that has been parsed during decoding. The `key` argument is either\nthe integer list index for a list property, the map string for object\nproperties, or `null` for the final result.\n\nThe default [reviver] (when not provided) is the identity function.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"reviver","id":"reviver","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/convert/json.dart","line":"89"},{"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/convert/json.dart","line":"89"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"89"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"encode","id":"encode2()","comment":"\nConverts [value] to a JSON string.\n\nIf value contains objects that are not directly encodable to a JSON\nstring (a value that is not a number, boolean, string, null, list or a map\nwith string keys), the [toEncodable] function is used to convert it to an\nobject that must be directly encodable.\n\nIf [toEncodable] is omitted, it defaults to calling `.toJson()` on the\nunencodable object.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"toEncodable","id":"toEncodable","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"object","id":"object","uri":"dart-sdk/lib/convert/json.dart","line":"105"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"105"},{"ref":{"name":"JsonEncoder","refId":"dart.convert/JsonEncoder"},"kind":"property","name":"encoder","id":"encoder","line":"110"},{"ref":{"name":"JsonDecoder","refId":"dart.convert/JsonDecoder"},"kind":"property","name":"decoder","id":"decoder","line":"111"},{"kind":"constructor","name":"","id":"0()","line":"66"},{"returnType":{"name":"JsonCodec","refId":"dart.convert/JsonCodec"},"kind":"constructor","name":"withReviver","id":"withReviver1()","comment":"\nCreates a `JsonCodec` with the given reviver.\n\nThe [reviver] function is called once for each object or list property\nthat has been parsed during decoding. The `key` argument is either the\ninteger list index for a list property, the map string for object\nproperties, or `null` for the final result.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"reviver","id":"reviver","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/convert/json.dart","line":"76"},{"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/convert/json.dart","line":"76"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"76"}],"uri":"dart-sdk/lib/convert/json.dart","line":"65"},{"superclass":{"name":"JsonUnsupportedObjectError","refId":"dart.convert/JsonUnsupportedObjectError"},"isThrowable":true,"kind":"class","name":"JsonCyclicError","id":"JsonCyclicError","comment":"\nReports that an object could not be stringified due to cyclic references.\n\nAn object that references itself cannot be serialized by [stringify].\nWhen the cycle is detected, a [JsonCyclicError] is thrown.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"44"},{"kind":"constructor","name":"","id":"1()","comment":"The first object that was detected as part of a cycle. ","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"43"}],"uri":"dart-sdk/lib/convert/json.dart","line":"41"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"JsonUnsupportedObjectError","id":"JsonUnsupportedObjectError","comment":"\nError thrown by JSON serialization if an object cannot be serialized.\n\nThe [unsupportedObject] field holds that object that failed to be serialized.\n\nIf an object isn't directly serializable, the serializer calls the 'toJson'\nmethod on the object. If that call fails, the error will be stored in the\n[cause] field. If the call returns an object that isn't directly\nserializable, the [cause] is be null.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"25"},{"isFinal":true,"kind":"variable","name":"unsupportedObject","id":"unsupportedObject","comment":"The object that could not be serialized. ","line":"19"},{"isFinal":true,"kind":"variable","name":"cause","id":"cause","comment":"The exception thrown when trying to convert the object. ","line":"21"},{"kind":"constructor","name":"","id":"2()","children":[{"initializedField":{"name":"unsupportedObject","refId":"dart.convert/JsonUnsupportedObjectError/unsupportedObject"},"kind":"param","name":"unsupportedObject","id":"unsupportedObject"},{"isOptional":true,"isNamed":true,"initializedField":{"name":"cause","refId":"dart.convert/JsonUnsupportedObjectError/cause"},"kind":"param","name":"cause","id":"cause"}],"line":"23"}],"uri":"dart-sdk/lib/convert/json.dart","line":"17"},{"superclass":{"name":"StringConversionSinkBase","refId":"dart.convert/StringConversionSinkBase"},"kind":"class","name":"_HtmlEscapeSink","id":"_HtmlEscapeSink","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"chunk","id":"chunk"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"91"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"101"},{"ref":{"name":"HtmlEscape","refId":"dart.convert/HtmlEscape"},"isFinal":true,"kind":"variable","name":"_escape","id":"_escape","isPrivate":true,"line":"86"},{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"isFinal":true,"kind":"variable","name":"_sink","id":"_sink","isPrivate":true,"line":"87"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"HtmlEscape","refId":"dart.convert/HtmlEscape"},"initializedField":{"name":"_escape","refId":"dart.convert/_HtmlEscapeSink/_escape"},"kind":"param","name":"_escape","id":"_escape","isPrivate":true},{"ref":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"initializedField":{"name":"_sink","refId":"dart.convert/_HtmlEscapeSink/_sink"},"kind":"param","name":"_sink","id":"_sink","isPrivate":true}],"line":"89"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/html_escape.dart","line":"85"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"String","refId":"dart.core/String"}]},"kind":"class","name":"HtmlEscape","id":"HtmlEscape","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"convert","id":"convert1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"}],"line":"45"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_convert","id":"_convert3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"line":"50"},{"returnType":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"sink","id":"sink","line":"76"}],"line":"75"},{"ref":{"name":"HtmlEscapeMode","refId":"dart.convert/HtmlEscapeMode"},"isFinal":true,"kind":"variable","name":"mode","id":"mode","line":"40"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"HtmlEscapeMode","refId":"dart.convert/HtmlEscapeMode"},"defaultValue":"HtmlEscapeMode.UNKNOWN","isOptional":true,"initializedField":{"name":"mode","refId":"dart.convert/HtmlEscape/mode"},"kind":"param","name":"mode","id":"mode"}],"line":"43"}],"uri":"dart-sdk/lib/convert/html_escape.dart","line":"37"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"HtmlEscapeMode","id":"HtmlEscapeMode","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"33"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_name","id":"_name","isPrivate":true,"line":"11"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"escapeLtGt","id":"escapeLtGt","line":"12"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"escapeQuot","id":"escapeQuot","line":"13"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"escapeApos","id":"escapeApos","line":"14"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"escapeSlash","id":"escapeSlash","line":"15"},{"ref":{"name":"HtmlEscapeMode","refId":"dart.convert/HtmlEscapeMode"},"isStatic":true,"kind":"variable","name":"UNKNOWN","id":"UNKNOWN","line":"18"},{"ref":{"name":"HtmlEscapeMode","refId":"dart.convert/HtmlEscapeMode"},"isStatic":true,"kind":"variable","name":"ATTRIBUTE","id":"ATTRIBUTE","line":"22"},{"ref":{"name":"HtmlEscapeMode","refId":"dart.convert/HtmlEscapeMode"},"isStatic":true,"kind":"variable","name":"ELEMENT","id":"ELEMENT","line":"26"},{"kind":"constructor","name":"_","id":"_5()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_name","refId":"dart.convert/HtmlEscapeMode/_name"},"kind":"param","name":"_name","id":"_name","isPrivate":true},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"escapeLtGt","refId":"dart.convert/HtmlEscapeMode/escapeLtGt"},"kind":"param","name":"escapeLtGt","id":"escapeLtGt"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"escapeQuot","refId":"dart.convert/HtmlEscapeMode/escapeQuot"},"kind":"param","name":"escapeQuot","id":"escapeQuot"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"escapeApos","refId":"dart.convert/HtmlEscapeMode/escapeApos"},"kind":"param","name":"escapeApos","id":"escapeApos","line":"31"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"escapeSlash","refId":"dart.convert/HtmlEscapeMode/escapeSlash"},"kind":"param","name":"escapeSlash","id":"escapeSlash","line":"31"}],"isPrivate":true,"line":"30"}],"uri":"dart-sdk/lib/convert/html_escape.dart","line":"10"},{"superclass":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"isAbstract":true,"kind":"class","name":"Encoding","id":"Encoding","comment":"\nOpen-ended Encoding enum.\n","children":[{"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"decodeStream","id":"decodeStream1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"param","name":"byteStream","id":"byteStream"}],"line":"13"},{"returnType":{"name":"Encoding","refId":"dart.convert/Encoding"},"isStatic":true,"kind":"method","name":"getByName","id":"getByName1()","comment":"\nGets an [Encoding] object from the name of the character set\nname. The names used are the IANA official names for the\ncharacter set (see\nhttp://www.iana.org/assignments/character-sets/character-sets.xml).\n\nThe [name] passed is case insensitive.\n\nIf character set is not supported [:null:] is returned.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"name","id":"name"}],"line":"71"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","comment":"\nName of the encoding.\n\nIf the encoding is standardized, this is the lower-case version of one of\nthe IANA official names for the character set (see\nhttp://www.iana.org/assignments/character-sets/character-sets.xml)\n","line":"27"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Encoding","refId":"dart.convert/Encoding"}]},"isStatic":true,"kind":"variable","name":"_nameToEncoding","id":"_nameToEncoding","isPrivate":true,"line":"31"},{"kind":"constructor","name":"","id":"0()","line":"11"}],"uri":"dart-sdk/lib/convert/encoding.dart","line":"10"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"S","refId":"dart.convert/_FusedConverter/S"},{"name":"T","refId":"dart.convert/_FusedConverter/T"}]},"kind":"class","name":"_FusedConverter","id":"_FusedConverter","comment":"\nFuses two converters.\n\nFor a non-chunked conversion converts the input in sequence.\n","children":[{"returnType":{"name":"T","refId":"dart.convert/_FusedConverter/T"},"kind":"method","name":"convert","id":"convert1()","children":[{"ref":{"name":"S","refId":"dart.convert/_FusedConverter/S"},"kind":"param","name":"input","id":"input"}],"line":"58"},{"returnType":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink"},"kind":"param","name":"sink","id":"sink"}],"line":"60"},{"ref":{"name":"Converter","refId":"dart.convert/Converter"},"isFinal":true,"kind":"variable","name":"_first","id":"_first","isPrivate":true,"line":"53"},{"ref":{"name":"Converter","refId":"dart.convert/Converter"},"isFinal":true,"kind":"variable","name":"_second","id":"_second","isPrivate":true,"line":"54"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Converter","refId":"dart.convert/Converter"},"initializedField":{"name":"_first","refId":"dart.convert/_FusedConverter/_first"},"kind":"param","name":"_first","id":"_first","isPrivate":true},{"ref":{"name":"Converter","refId":"dart.convert/Converter"},"initializedField":{"name":"_second","refId":"dart.convert/_FusedConverter/_second"},"kind":"param","name":"_second","id":"_second","isPrivate":true}],"line":"56"},{"kind":"typeparam","name":"S","id":"S"},{"kind":"typeparam","name":"M","id":"M"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/converter.dart","line":"52"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"StreamTransformer","refId":"dart.async/StreamTransformer"}],"kind":"class","name":"Converter","id":"Converter","comment":"\nA [Converter] converts data from one representation into another.\n\nIt is recommended that implementations of `Converter` extend this class,\nto inherit any further methods that may be added to the class.\n","children":[{"returnType":{"name":"T","refId":"dart.convert/Converter/T"},"kind":"method","name":"convert","id":"convert1()","comment":"\nConverts [input] and returns the result of the conversion.\n","children":[{"ref":{"name":"S","refId":"dart.convert/Converter/S"},"kind":"param","name":"input","id":"input"}],"line":"19"},{"returnType":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"S","refId":"dart.convert/Converter/S"}]},"kind":"method","name":"fuse","id":"fuse1()","comment":"\nFuses `this` with [other].\n\nEncoding with the resulting converter is equivalent to converting with\n`this` before converting with `other`.\n","children":[{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"T","refId":"dart.convert/Converter/T"}]},"kind":"param","name":"other","id":"other"}],"line":"27"},{"returnType":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","comment":"\nStarts a chunked conversion.\n","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink"},"kind":"param","name":"sink","id":"sink"}],"line":"34"},{"returnType":{"name":"Stream","refId":"dart.async/Stream"},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream"},"kind":"param","name":"source","id":"source"}],"line":"40"},{"kind":"constructor","name":"","id":"0()","line":"14"},{"kind":"typeparam","name":"S","id":"S"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/convert/converter.dart","line":"13"},{"superclass":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"T","refId":"dart.convert/_InvertedCodec/T"},{"name":"S","refId":"dart.convert/_InvertedCodec/S"}]},"kind":"class","name":"_InvertedCodec","id":"_InvertedCodec","children":[{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"T","refId":"dart.convert/_InvertedCodec/T"},{"name":"S","refId":"dart.convert/_InvertedCodec/S"}]},"kind":"property","name":"encoder","id":"encoder","line":"98"},{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"S","refId":"dart.convert/_InvertedCodec/S"},{"name":"T","refId":"dart.convert/_InvertedCodec/T"}]},"kind":"property","name":"decoder","id":"decoder","line":"99"},{"ref":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"S","refId":"dart.convert/_InvertedCodec/S"},{"name":"T","refId":"dart.convert/_InvertedCodec/T"}]},"kind":"property","name":"inverted","id":"inverted","line":"101"},{"ref":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"S","refId":"dart.convert/_InvertedCodec/S"},{"name":"T","refId":"dart.convert/_InvertedCodec/T"}]},"isFinal":true,"kind":"variable","name":"_codec","id":"_codec","isPrivate":true,"line":"94"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"S","refId":"dart.convert/_InvertedCodec/S"},{"name":"T","refId":"dart.convert/_InvertedCodec/T"}]},"kind":"param","name":"codec","id":"codec"}],"line":"96"},{"kind":"typeparam","name":"T","id":"T"},{"kind":"typeparam","name":"S","id":"S"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/codec.dart","line":"93"},{"superclass":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"S","refId":"dart.convert/_FusedCodec/S"},{"name":"T","refId":"dart.convert/_FusedCodec/T"}]},"kind":"class","name":"_FusedCodec","id":"_FusedCodec","comment":"\nFuses the given codecs.\n\nIn the non-chunked conversion simply invokes the non-chunked conversions in\nsequence.\n","children":[{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"S","refId":"dart.convert/_FusedCodec/S"},{"name":"T","refId":"dart.convert/_FusedCodec/T"}]},"kind":"property","name":"encoder","id":"encoder","line":"87"},{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"T","refId":"dart.convert/_FusedCodec/T"},{"name":"S","refId":"dart.convert/_FusedCodec/S"}]},"kind":"property","name":"decoder","id":"decoder","line":"88"},{"ref":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"S","refId":"dart.convert/_FusedCodec/S"},{"name":"M","refId":"dart.convert/_FusedCodec/M"}]},"isFinal":true,"kind":"variable","name":"_first","id":"_first","isPrivate":true,"line":"84"},{"ref":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"M","refId":"dart.convert/_FusedCodec/M"},{"name":"T","refId":"dart.convert/_FusedCodec/T"}]},"isFinal":true,"kind":"variable","name":"_second","id":"_second","isPrivate":true,"line":"85"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"S","refId":"dart.convert/_FusedCodec/S"},{"name":"M","refId":"dart.convert/_FusedCodec/M"}]},"initializedField":{"name":"_first","refId":"dart.convert/_FusedCodec/_first"},"kind":"param","name":"_first","id":"_first","isPrivate":true},{"ref":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"M","refId":"dart.convert/_FusedCodec/M"},{"name":"T","refId":"dart.convert/_FusedCodec/T"}]},"initializedField":{"name":"_second","refId":"dart.convert/_FusedCodec/_second"},"kind":"param","name":"_second","id":"_second","isPrivate":true}],"line":"90"},{"kind":"typeparam","name":"S","id":"S"},{"kind":"typeparam","name":"M","id":"M"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/codec.dart","line":"83"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Codec","id":"Codec","comment":"\nA [Codec] encodes and (if supported) decodes data.\n\nCodecs can be fused. For example fusing [JSON] and [UTF8] produces\nan encoder that can convert Json objects directly to bytes, or can decode\nbytes directly to json objects.\n\nFused codecs generally attempt to optimize the operations and can be faster\nthan executing each step of an encoding separately.\n\n*Codecs are still experimental and are subject to change without notice.*\n","children":[{"returnType":{"name":"T","refId":"dart.convert/Codec/T"},"kind":"method","name":"encode","id":"encode1()","children":[{"ref":{"name":"S","refId":"dart.convert/Codec/S"},"kind":"param","name":"input","id":"input"}],"line":"22"},{"returnType":{"name":"S","refId":"dart.convert/Codec/S"},"kind":"method","name":"decode","id":"decode1()","children":[{"ref":{"name":"T","refId":"dart.convert/Codec/T"},"kind":"param","name":"encoded","id":"encoded"}],"line":"23"},{"returnType":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"S","refId":"dart.convert/Codec/S"}]},"kind":"method","name":"fuse","id":"fuse1()","comment":"\nFuses `this` with `other`.\n\nWhen encoding, the resulting codec encodes with `this` before\nencoding with [other].\n\nWhen decoding, the resulting codec decodes with [other] before decoding\nwith `this`.\n\nIn some cases one needs to use the [inverted] codecs to be able to fuse\nthem correctly. That is, the output type of `this` ([T]) must match the\ninput type of the second codec [other].\n\nExamples:\n\n    final JSON_TO_BYTES = JSON.fuse(UTF8);\n    List<int> bytes = JSON_TO_BYTES.encode([\"json-object\"]);\n    var decoded = JSON_TO_BYTES.decode(bytes);\n    assert(decoded is List && decoded[0] == \"json-object\");\n\n    var inverted = JSON.inverted;\n    var jsonIdentity = JSON.fuse(inverted);\n    var jsonObject = jsonIdentity.encode([\"1\", 2]);\n    assert(jsonObject is List && jsonObject[0] == \"1\" && jsonObject[1] == 2);\n","children":[{"ref":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"T","refId":"dart.convert/Codec/T"}]},"kind":"param","name":"other","id":"other"}],"line":"65"},{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"S","refId":"dart.convert/Codec/S"},{"name":"T","refId":"dart.convert/Codec/T"}]},"kind":"property","name":"encoder","id":"encoder","comment":"\nReturns the encoder from [S] to [T].\n\nIt may be stateful and should not be reused.\n","line":"30"},{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"T","refId":"dart.convert/Codec/T"},{"name":"S","refId":"dart.convert/Codec/S"}]},"kind":"property","name":"decoder","id":"decoder","comment":"\nReturns the decoder of `this`, converting from [T] to [S].\n\nIt may be stateful an should not be reused.\n","line":"36"},{"ref":{"name":"Codec","refId":"dart.convert/Codec","arguments":[{"name":"T","refId":"dart.convert/Codec/T"},{"name":"S","refId":"dart.convert/Codec/S"}]},"kind":"property","name":"inverted","id":"inverted","comment":"\nInverts `this`.\n\nThe [encoder] and [decoder] of the resulting codec are swapped.\n","line":"74"},{"kind":"constructor","name":"","id":"0()","line":"20"},{"kind":"typeparam","name":"S","id":"S"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/convert/codec.dart","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"S","refId":"dart.convert/_ConverterStreamEventSink/S"}]}],"kind":"class","name":"_ConverterStreamEventSink","id":"_ConverterStreamEventSink","comment":"\nThis class converts implements the logic for a chunked conversion as a\nstream transformer.\n\nIt is used as strategy in the [EventTransformStream].\n\nIt also implements the [ChunkedConversionSink] interface so that it\ncan be used as output sink in a chunked conversion.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"S","refId":"dart.convert/_ConverterStreamEventSink/S"},"kind":"param","name":"o","id":"o"}],"line":"86"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addError","id":"addError2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"error","id":"error"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"isOptional":true,"kind":"param","name":"stackTrace","id":"stackTrace"}],"line":"87"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"90"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.convert/_ConverterStreamEventSink/T"}]},"isFinal":true,"kind":"variable","name":"_eventSink","id":"_eventSink","comment":"The output sink for the converter. ","isPrivate":true,"line":"73"},{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink"},"kind":"variable","name":"_chunkedSink","id":"_chunkedSink","comment":"\nThe input sink for new data. All data that is received with\n[handleData] is added into this sink.\n","isPrivate":true,"line":"79"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Converter","refId":"dart.convert/Converter"},"kind":"param","name":"converter","id":"converter"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.convert/_ConverterStreamEventSink/T"}]},"kind":"param","name":"sink","id":"sink"}],"line":"81"},{"kind":"typeparam","name":"S","id":"S"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/chunked_conversion.dart","line":"71"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"T","refId":"dart.convert/_EventSinkAdapter/T"}]}],"kind":"class","name":"_EventSinkAdapter","id":"_EventSinkAdapter","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"T","refId":"dart.convert/_EventSinkAdapter/T"},"kind":"param","name":"data","id":"data"}],"line":"58"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"59"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.convert/_EventSinkAdapter/T"}]},"isFinal":true,"kind":"variable","name":"_sink","id":"_sink","isPrivate":true,"line":"54"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.convert/_EventSinkAdapter/T"}]},"initializedField":{"name":"_sink","refId":"dart.convert/_EventSinkAdapter/_sink"},"kind":"param","name":"_sink","id":"_sink","isPrivate":true}],"line":"56"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/chunked_conversion.dart","line":"53"},{"superclass":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"T","refId":"dart.convert/_SimpleCallbackSink/T"}]},"kind":"class","name":"_SimpleCallbackSink","id":"_SimpleCallbackSink","comment":"\nThis class accumulates all chunks and invokes a callback with a list of\nthe chunks when the sink is closed.\n\nThis class can be used to terminate a chunked conversion.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"T","refId":"dart.convert/_SimpleCallbackSink/T"},"kind":"param","name":"chunk","id":"chunk"}],"line":"49"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"50"},{"ref":{"name":"_ChunkedConversionCallback","refId":"dart.convert/_ChunkedConversionCallback"},"isFinal":true,"kind":"variable","name":"_callback","id":"_callback","isPrivate":true,"line":"44"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"T","refId":"dart.convert/_SimpleCallbackSink/T"}]},"isFinal":true,"kind":"variable","name":"_accumulated","id":"_accumulated","isPrivate":true,"line":"45"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"_ChunkedConversionCallback","refId":"dart.convert/_ChunkedConversionCallback"},"initializedField":{"name":"_callback","refId":"dart.convert/_SimpleCallbackSink/_callback"},"kind":"param","name":"_callback","id":"_callback","isPrivate":true}],"line":"47"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/chunked_conversion.dart","line":"43"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"ChunkedConversionSink","id":"ChunkedConversionSink","comment":"\nA [ChunkedConversionSink] is used to transmit data more efficiently between\ntwo converters during chunked conversions.\n\nIt is recommended that implementations of `ChunkedConversionSink` extends\nthis class, to inherit any further methods that may be added to the class.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds chunked data to this sink.\n\nThis method is also used when converters are used as [StreamTransformer]s.\n","children":[{"ref":{"name":"T","refId":"dart.convert/ChunkedConversionSink/T"},"kind":"param","name":"chunk","id":"chunk"}],"line":"26"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","comment":"\nCloses the sink.\n\nThis signals the end of the chunked conversion. This method is called\nwhen converters are used as [StreamTransformer]'s.\n","line":"34"},{"kind":"constructor","name":"","id":"0()","line":"17"},{"returnType":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"T","refId":"dart.convert/ChunkedConversionSink/T"}]},"kind":"constructor","name":"withCallback","id":"withCallback1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"T","refId":"dart.convert/ChunkedConversionSink/T"}]},"kind":"param","name":"accumulated","id":"accumulated","uri":"dart-sdk/lib/convert/chunked_conversion.dart","line":"19"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"19"}],"line":"18"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/convert/chunked_conversion.dart","line":"16"},{"returnType":{"name":"void","refId":"void"},"kind":"typedef","name":"_ChunkedConversionCallback","id":"_ChunkedConversionCallback","children":[{"ref":{"name":"T","refId":"dart.convert/_ChunkedConversionCallback/T"},"kind":"param","name":"accumulated","id":"accumulated"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/chunked_conversion.dart","line":"7"},{"superclass":{"name":"ByteConversionSinkBase","refId":"dart.convert/ByteConversionSinkBase"},"kind":"class","name":"_ByteCallbackSink","id":"_ByteCallbackSink","comment":"\nThis class accumulates all chunks into one list of bytes\nand invokes a callback when the sink is closed.\n\nThis class can be used to terminate a chunked conversion.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"chunk","id":"chunk"}],"line":"88"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"_roundToPowerOf2","id":"_roundToPowerOf21()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"v","id":"v"}],"isPrivate":true,"line":"103"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"115"},{"isStatic":true,"kind":"variable","name":"_INITIAL_BUFFER_SIZE","id":"_INITIAL_BUFFER_SIZE","isPrivate":true,"line":"78"},{"ref":{"name":"_ChunkedConversionCallback","refId":"dart.convert/_ChunkedConversionCallback"},"isFinal":true,"kind":"variable","name":"_callback","id":"_callback","isPrivate":true,"line":"80"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"variable","name":"_buffer","id":"_buffer","isPrivate":true,"line":"82"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_bufferIndex","id":"_bufferIndex","isPrivate":true,"line":"83"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"accumulated","id":"accumulated","uri":"dart-sdk/lib/convert/byte_conversion.dart","line":"85"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"85"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/byte_conversion.dart","line":"77"},{"superclass":{"name":"ByteConversionSinkBase","refId":"dart.convert/ByteConversionSinkBase"},"kind":"class","name":"_ByteAdapterSink","id":"_ByteAdapterSink","comment":"\nThis class adapts a simple [ChunkedConversionSink] to a [ByteConversionSink].\n\nAll additional methods of the [ByteConversionSink] (compared to the\nChunkedConversionSink) are redirected to the `add` method.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"chunk","id":"chunk"}],"line":"67"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"68"},{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"isFinal":true,"kind":"variable","name":"_sink","id":"_sink","isPrivate":true,"line":"63"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"initializedField":{"name":"_sink","refId":"dart.convert/_ByteAdapterSink/_sink"},"kind":"param","name":"_sink","id":"_sink","isPrivate":true}],"line":"65"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/byte_conversion.dart","line":"62"},{"superclass":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"isAbstract":true,"kind":"class","name":"ByteConversionSinkBase","id":"ByteConversionSinkBase","comment":"\nThis class provides a base-class for converters that need to accept byte\ninputs.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"chunk","id":"chunk"}],"line":"47"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"48"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"chunk","id":"chunk"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"50"}],"uri":"dart-sdk/lib/convert/byte_conversion.dart","line":"45"},{"superclass":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"isAbstract":true,"kind":"class","name":"ByteConversionSink","id":"ByteConversionSink","comment":"\nThe [ByteConversionSink] provides an interface for converters to\nefficiently transmit byte data.\n\nInstead of limiting the interface to one non-chunked list of bytes it\naccepts its input in chunks (themselves being lists of bytes).\n\nThis abstract class will likely get more methods over time. Implementers are\nurged to extend or mix in [ByteConversionSinkBase] to ensure that their\nclass covers the newly added methods.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","comment":"\nAdds the next [chunk] to `this`.\n\nAdds the bytes defined by [start] and [end]-exclusive to `this`.\n\nIf [isLast] is `true` closes `this`.\n\nContrary to `add` the given [chunk] must not be held onto. Once the method\nreturns, it is safe to overwrite the data in it.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"chunk","id":"chunk"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"35"},{"kind":"constructor","name":"","id":"0()","line":"19"},{"returnType":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"constructor","name":"withCallback","id":"withCallback1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"callback","id":"callback","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"accumulated","id":"accumulated","uri":"dart-sdk/lib/convert/byte_conversion.dart","line":"20"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"20"},{"returnType":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"constructor","name":"from","id":"from1()","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"param","name":"sink","id":"sink"}],"line":"22"}],"uri":"dart-sdk/lib/convert/byte_conversion.dart","line":"18"},{"superclass":{"name":"ByteConversionSinkBase","refId":"dart.convert/ByteConversionSinkBase"},"kind":"class","name":"_AsciiDecoderSink","id":"_AsciiDecoderSink","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"254"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"source","id":"source"}],"line":"258"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"source","id":"source"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"262"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_allowInvalid","id":"_allowInvalid","isPrivate":true,"line":"250"},{"ref":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"variable","name":"_utf8Sink","id":"_utf8Sink","isPrivate":true,"line":"251"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_allowInvalid","refId":"dart.convert/_AsciiDecoderSink/_allowInvalid"},"kind":"param","name":"_allowInvalid","id":"_allowInvalid","isPrivate":true},{"ref":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"initializedField":{"name":"_utf8Sink","refId":"dart.convert/_AsciiDecoderSink/_utf8Sink"},"kind":"param","name":"_utf8Sink","id":"_utf8Sink","isPrivate":true}],"line":"252"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/ascii.dart","line":"249"},{"superclass":{"name":"_UnicodeSubsetDecoder","refId":"dart.convert/_UnicodeSubsetDecoder"},"kind":"class","name":"AsciiDecoder","id":"AsciiDecoder","children":[{"returnType":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","comment":"\nStarts a chunked conversion.\n\nThe converter works more efficiently if the given [sink] is a\n[StringConversionSink].\n","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"sink","id":"sink","line":"234"}],"line":"233"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowInvalid","id":"allowInvalid"}],"line":"224"}],"uri":"dart-sdk/lib/convert/ascii.dart","line":"223"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},{"name":"String","refId":"dart.core/String"}]},"isAbstract":true,"kind":"class","name":"_UnicodeSubsetDecoder","id":"_UnicodeSubsetDecoder","comment":"\nThis class converts Latin-1 bytes (lists of unsigned 8-bit integers)\nto a string.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"convert","id":"convert1()","comment":"\nConverts the [bytes] (a list of unsigned 7- or 8-bit integers) to the\ncorresponding string.\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"}],"line":"178"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_convertInvalid","id":"_convertInvalid1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"}],"isPrivate":true,"line":"191"},{"returnType":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","comment":"\nStarts a chunked conversion.\n\nThe converter works more efficiently if the given [sink] is a\n[StringConversionSink].\n","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"sink","id":"sink","line":"208"}],"line":"207"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"param","name":"stream","id":"stream"}],"line":"220"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_allowInvalid","id":"_allowInvalid","isPrivate":true,"line":"155"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_subsetMask","id":"_subsetMask","isPrivate":true,"line":"156"},{"kind":"constructor","name":"","id":"2()","comment":"\nInstantiates a new decoder.\n\nThe [_allowInvalid] argument defines how [convert] deals\nwith invalid bytes.\n\nThe [_subsetMask] argument is a bit mask used to define the subset\nof Unicode being decoded. Use [_LATIN1_MASK] for Latin-1 (8-bit) or\n[_ASCII_MASK] for ASCII (7-bit).\n\nIf [_allowInvalid] is `true`, [convert] replaces invalid bytes with the\nUnicode Replacement character `U+FFFD` (�).\nOtherwise it throws a [FormatException].\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_allowInvalid","refId":"dart.convert/_UnicodeSubsetDecoder/_allowInvalid"},"kind":"param","name":"_allowInvalid","id":"_allowInvalid","isPrivate":true},{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_subsetMask","refId":"dart.convert/_UnicodeSubsetDecoder/_subsetMask"},"kind":"param","name":"_subsetMask","id":"_subsetMask","isPrivate":true}],"line":"172"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/ascii.dart","line":"154"},{"superclass":{"name":"StringConversionSinkBase","refId":"dart.convert/StringConversionSinkBase"},"kind":"class","name":"_UnicodeSubsetEncoderSink","id":"_UnicodeSubsetEncoderSink","comment":"\nThis class encodes chunked strings to bytes (unsigned 8-bit\nintegers).\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"close","id":"close0()","line":"125"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addSlice","id":"addSlice4()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"isLast","id":"isLast"}],"line":"129"},{"ref":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"isFinal":true,"kind":"variable","name":"_sink","id":"_sink","isPrivate":true,"line":"120"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_subsetMask","id":"_subsetMask","isPrivate":true,"line":"121"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_subsetMask","refId":"dart.convert/_UnicodeSubsetEncoderSink/_subsetMask"},"kind":"param","name":"_subsetMask","id":"_subsetMask","isPrivate":true},{"ref":{"name":"ByteConversionSink","refId":"dart.convert/ByteConversionSink"},"initializedField":{"name":"_sink","refId":"dart.convert/_UnicodeSubsetEncoderSink/_sink"},"kind":"param","name":"_sink","id":"_sink","isPrivate":true}],"line":"123"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/ascii.dart","line":"119"},{"superclass":{"name":"_UnicodeSubsetEncoder","refId":"dart.convert/_UnicodeSubsetEncoder"},"kind":"class","name":"AsciiEncoder","id":"AsciiEncoder","comment":"\nThis class converts strings of only ASCII characters to bytes.\n","children":[{"kind":"constructor","name":"","id":"0()","line":"112"}],"uri":"dart-sdk/lib/convert/ascii.dart","line":"111"},{"superclass":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"class","name":"_UnicodeSubsetEncoder","id":"_UnicodeSubsetEncoder","children":[{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"method","name":"convert","id":"convert1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"}],"line":"77"},{"returnType":{"name":"StringConversionSink","refId":"dart.convert/StringConversionSink"},"kind":"method","name":"startChunkedConversion","id":"startChunkedConversion1()","comment":"\nStarts a chunked conversion.\n\nThe converter works more efficiently if the given [sink] is a\n[ByteConversionSink].\n","children":[{"ref":{"name":"ChunkedConversionSink","refId":"dart.convert/ChunkedConversionSink","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"param","name":"sink","id":"sink","line":"97"}],"line":"96"},{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"method","name":"bind","id":"bind1()","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"String","refId":"dart.core/String"}]},"kind":"param","name":"stream","id":"stream"}],"line":"105"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_subsetMask","id":"_subsetMask","isPrivate":true,"line":"73"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"initializedField":{"name":"_subsetMask","refId":"dart.convert/_UnicodeSubsetEncoder/_subsetMask"},"kind":"param","name":"_subsetMask","id":"_subsetMask","isPrivate":true}],"line":"75"}],"isPrivate":true,"uri":"dart-sdk/lib/convert/ascii.dart","line":"72"},{"superclass":{"name":"Encoding","refId":"dart.convert/Encoding"},"kind":"class","name":"AsciiCodec","id":"AsciiCodec","comment":"\nAn [AsciiCodec] allows encoding strings as ASCII bytes\nand decoding ASCII bytes to strings.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"decode","id":"decode2()","comment":"\nDecodes the ASCII [bytes] (a list of unsigned 7-bit integers) to the\ncorresponding string.\n\nIf [bytes] contains values that are not in the range 0 .. 127, the decoder\nwill eventually throw a [FormatException].\n\nIf [allowInvalid] is not provided, it defaults to the value used to create\nthis [AsciiCodec].\n","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"kind":"param","name":"bytes","id":"bytes"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"isNamed":true,"kind":"param","name":"allowInvalid","id":"allowInvalid"}],"line":"54"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"property","name":"name","id":"name","line":"42"},{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}]},"kind":"property","name":"encoder","id":"encoder","line":"63"},{"ref":{"name":"Converter","refId":"dart.convert/Converter","arguments":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},{"name":"String","refId":"dart.core/String"}]},"kind":"property","name":"decoder","id":"decoder","line":"65"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_allowInvalid","id":"_allowInvalid","isPrivate":true,"line":"28"},{"kind":"constructor","name":"","id":"1()","comment":"\nInstantiates a new [AsciiCodec].\n\nIf [allowInvalid] is true, the [decode] method and the converter\nreturned by [decoder] will default to allowing invalid values.\nIf allowing invalid values, the values will be decoded into the Unicode\nReplacement character (U+FFFD). If not, an exception will be thrown.\nCalls to the [decode] method can choose to override this default.\n\nEncoders will not accept invalid (non Latin-1) characters.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"allowInvalid","id":"allowInvalid"}],"line":"40"}],"uri":"dart-sdk/lib/convert/ascii.dart","line":"27"}],"uri":"dart-sdk/lib/convert/convert.dart","line":"9"}