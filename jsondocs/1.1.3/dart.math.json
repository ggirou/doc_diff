{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"dart:math","id":"dart.math","comment":"\nMathematical constants and functions, plus a random number generator.\n","children":[{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"log","id":"log1()","comment":"\nConverts [x] to a double and returns the natural logarithm of the value.\nReturns negative infinity if [x] is equal to zero.\nReturns NaN if [x] is NaN or less than zero.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"line":"253"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"exp","id":"exp1()","comment":"\nConverts [x] to a double and returns the natural exponent, [E],\nto the power [x].\nReturns NaN if [x] is NaN.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"line":"246"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"sqrt","id":"sqrt1()","comment":"\nConverts [x] to a double and returns the positive square root of the value.\n\nReturns -0.0 if [x] is -0.0, and NaN if [x] is otherwise negative or NaN.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"line":"239"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"atan","id":"atan1()","comment":"\nConverts [x] to a dobule and returns the arc tangent of the vlaue.\nReturns a value in the range -PI/2..PI/2, or NaN if [x] is NaN.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"line":"232"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"asin","id":"asin1()","comment":"\nConverts [x] to a double and returns the arc sine of the value.\nReturns a value in the range -PI..PI, or  NaN if [x] is outside\nthe range -1..1.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"line":"226"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"acos","id":"acos1()","comment":"\nConverts [x] to a double and returns the arc cosine of the value.\n\nReturns a value in the range -PI..PI, or NaN if [x] is outside\nthe range -1..1.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"line":"219"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"tan","id":"tan1()","comment":"\nConverts [x] to a double and returns the tangent of the value.\n\nThe tangent function is equivalent to [:sin(x)/cos(x):] and may be\ninfinite (positive or negative) when [:cos(x):] is equal to zero.\nIf [x] is not a finite number, the result is NaN.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"line":"211"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"cos","id":"cos1()","comment":"\nConverts [x] to a double and returns the cosine of the value.\n\nIf [x] is not a finite number, the result is NaN.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"line":"202"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"sin","id":"sin1()","comment":"\nConverts [x] to a double and returns the sine of the value.\n\nIf [x] is not a finite number, the result is NaN.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"}],"line":"195"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"pow","id":"pow2()","comment":"\nReturns [x] to the power of [exponent].\n\nIf [x] is an [int] and [exponent] is a non-negative [int], the result is\nan [int], otherwise both arguments are converted to doubles first, and the\nresult is a [double].\n\nFor integers, the power is always equal to the mathematical result of `x` to\nthe power `exponent`, only limited by the available memory.\n\nFor doubles, `pow(x, y)` handles edge cases as follows:\n\n- if `y` is zero (0.0 or -0.0), the result is always 1.0.\n- if `x` is 1.0, the result is always 1.0.\n- otherwise, if either `x` or `y` is NaN then the result is NaN.\n- if `x` is negative (but not -0.0) and `y` is a finite non-integer, the\n  result is NaN.\n- if `x` is Infinity and `y` is negative, the result is 0.0.\n- if `x` is Infinity and `y` is positive, the result is Infinity.\n- if `x` is 0.0 and `y` is negative, the result is Infinity.\n- if `x` is 0.0 and `y` is positive, the result is 0.0.\n- if `x` is -Infinity or -0.0 and `y` is an odd integer, then the result is\n  `-pow(-x ,y)`.\n- if `x` is -Infinity or -0.0 and `y` is not an odd integer, then the result\n  is the same as `pow(-x , y)`.\n- if `y` is Infinity and the absolute value of `x` is less than 1, the\n  result is 0.0.\n- if `y` is Infinity and `x` is -1, the result is 1.0.\n- if `y` is Infinity and the absolute value of `x` is greater than 1,\n  the result is Infinity.\n- if `y` is -Infinity, the result is `1/pow(x, Infinity)`.\n\nThis corresponds to the `pow` function defined in the IEEE Standard 754-2008.\n\nNotice that an [int] result cannot overflow, but a [double] result might\nbe [double.INFINITY].\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"x","id":"x"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"exponent","id":"exponent"}],"line":"188"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"atan2","id":"atan22()","comment":"\nA variant of [atan].\n\nConverts both arguments to doubles.\n\nReturns the angle between the positive x-axis and the vector ([b],[a]).\nThe result, in radians, is in the range -PI..PI.\n\nIf [b] is positive, this is the same as [:atan(b/a):].\n\nThe result is negative when [a] is negative (including when [a] is the\ndouble -0.0).\n\nIf [a] is equal to zero, the vector ([b],[a]) is considered parallel to\nthe x-axis, even if [b] is also equal to zero. The sign of [b] determines\nthe direction of the vector along the x-axis.\n\nReturns NaN if either argument is NaN.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"b","id":"b"}],"line":"149"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"max","id":"max2()","comment":"\nReturns the larger of two numbers.\n\nReturns NaN if either argument is NaN.\nThe larger of [:-0.0:] and [:0.0:] is [:0.0:]. If the arguments are\notherwise equal (including int and doubles with the same mathematical value)\nthen it is unspecified which of the two arguments is returned.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"b","id":"b"}],"line":"101"},{"returnType":{"name":"num","refId":"dart.core/num"},"kind":"method","name":"min","id":"min2()","comment":"\nReturns the lesser of two numbers.\n\nReturns NaN if either argument is NaN.\nThe lesser of [:-0.0:] and [:0.0:] is [:-0.0:].\nIf the arguments are otherwise equal (including int and doubles with the\nsame mathematical value) then it is unspecified which of the two arguments\nis returned.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"b","id":"b"}],"line":"66"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"SQRT2","id":"SQRT2","comment":"\nSquare root of 2.\n","line":"55"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"SQRT1_2","id":"SQRT1_2","comment":"\nSquare root of 1/2.\n","line":"50"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"PI","id":"PI","comment":"\nThe PI constant.\n","line":"45"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"LOG10E","id":"LOG10E","comment":"\nBase-10 logarithm of [E].\n","line":"40"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"LOG2E","id":"LOG2E","comment":"\nBase-2 logarithm of [E].\n","line":"35"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"LN2","id":"LN2","comment":"\nNatural logarithm of 2.\n","line":"30"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"LN10","id":"LN10","comment":"\nNatural logarithm of 10.\n","line":"25"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"variable","name":"E","id":"E","comment":"\nBase of the natural logarithms.\n\nTypically written as \"e\".\n","line":"20"},{"superclass":{"name":"_RectangleBase","refId":"dart.math/_RectangleBase","arguments":[{"name":"T","refId":"dart.math/MutableRectangle/T"}]},"interfaces":[{"name":"Rectangle","refId":"dart.math/Rectangle","arguments":[{"name":"T","refId":"dart.math/MutableRectangle/T"}]}],"kind":"class","name":"MutableRectangle","id":"MutableRectangle","comment":"\nA class for representing two-dimensional axis-aligned rectangles with mutable\nproperties.\n","children":[{"ref":{"name":"T","refId":"dart.math/MutableRectangle/T"},"kind":"variable","name":"left","id":"left","line":"150"},{"ref":{"name":"T","refId":"dart.math/MutableRectangle/T"},"kind":"variable","name":"top","id":"top","line":"151"},{"ref":{"name":"T","refId":"dart.math/MutableRectangle/T"},"kind":"variable","name":"width","id":"width","line":"152"},{"ref":{"name":"T","refId":"dart.math/MutableRectangle/T"},"kind":"variable","name":"height","id":"height","line":"153"},{"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"T","refId":"dart.math/MutableRectangle/T"},"initializedField":{"name":"left","refId":"dart.math/MutableRectangle/left"},"kind":"param","name":"left","id":"left"},{"ref":{"name":"T","refId":"dart.math/MutableRectangle/T"},"initializedField":{"name":"top","refId":"dart.math/MutableRectangle/top"},"kind":"param","name":"top","id":"top"},{"ref":{"name":"T","refId":"dart.math/MutableRectangle/T"},"initializedField":{"name":"width","refId":"dart.math/MutableRectangle/width"},"kind":"param","name":"width","id":"width"},{"ref":{"name":"T","refId":"dart.math/MutableRectangle/T"},"initializedField":{"name":"height","refId":"dart.math/MutableRectangle/height"},"kind":"param","name":"height","id":"height"}],"line":"155"},{"returnType":{"name":"MutableRectangle","refId":"dart.math/MutableRectangle","arguments":[{"name":"T","refId":"dart.math/MutableRectangle/T"}]},"kind":"constructor","name":"fromPoints","id":"fromPoints2()","children":[{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/MutableRectangle/T"}]},"kind":"param","name":"a","id":"a"},{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/MutableRectangle/T"}]},"kind":"param","name":"b","id":"b"}],"line":"157"},{"upperBound":{"name":"num","refId":"dart.core/num"},"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/math/rectangle.dart","line":"148"},{"superclass":{"name":"_RectangleBase","refId":"dart.math/_RectangleBase","arguments":[{"name":"T","refId":"dart.math/Rectangle/T"}]},"kind":"class","name":"Rectangle","id":"Rectangle","comment":"\nA class for representing two-dimensional rectangles whose properties are\nimmutable.\n","children":[{"ref":{"name":"T","refId":"dart.math/Rectangle/T"},"isFinal":true,"kind":"variable","name":"left","id":"left","line":"128"},{"ref":{"name":"T","refId":"dart.math/Rectangle/T"},"isFinal":true,"kind":"variable","name":"top","id":"top","line":"129"},{"ref":{"name":"T","refId":"dart.math/Rectangle/T"},"isFinal":true,"kind":"variable","name":"width","id":"width","line":"130"},{"ref":{"name":"T","refId":"dart.math/Rectangle/T"},"isFinal":true,"kind":"variable","name":"height","id":"height","line":"131"},{"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"T","refId":"dart.math/Rectangle/T"},"initializedField":{"name":"left","refId":"dart.math/Rectangle/left"},"kind":"param","name":"left","id":"left"},{"ref":{"name":"T","refId":"dart.math/Rectangle/T"},"initializedField":{"name":"top","refId":"dart.math/Rectangle/top"},"kind":"param","name":"top","id":"top"},{"ref":{"name":"T","refId":"dart.math/Rectangle/T"},"initializedField":{"name":"width","refId":"dart.math/Rectangle/width"},"kind":"param","name":"width","id":"width"},{"ref":{"name":"T","refId":"dart.math/Rectangle/T"},"initializedField":{"name":"height","refId":"dart.math/Rectangle/height"},"kind":"param","name":"height","id":"height"}],"line":"133"},{"returnType":{"name":"Rectangle","refId":"dart.math/Rectangle","arguments":[{"name":"T","refId":"dart.math/Rectangle/T"}]},"kind":"constructor","name":"fromPoints","id":"fromPoints2()","children":[{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/Rectangle/T"}]},"kind":"param","name":"a","id":"a"},{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/Rectangle/T"}]},"kind":"param","name":"b","id":"b"}],"line":"135"},{"upperBound":{"name":"num","refId":"dart.core/num"},"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/math/rectangle.dart","line":"127"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"_RectangleBase","id":"_RectangleBase","comment":"\nA base class for representing two-dimensional axis-aligned rectangles.\n\nThis rectangle uses a left-handed Cartesian coordinate system, with x\ndirected to the right and y directed down, as per the convention in 2D\ncomputer graphics.\n\nSee also:\n   [W3C Coordinate Systems Specification](http://www.w3.org/TR/SVG/coords.html#InitialCoordinateSystem).\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"33"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"37"},{"returnType":{"name":"Rectangle","refId":"dart.math/Rectangle","arguments":[{"name":"T","refId":"dart.math/_RectangleBase/T"}]},"kind":"method","name":"intersection","id":"intersection1()","comment":"\nComputes the intersection of `this` and [other].\n\nThe intersection of two axis-aligned rectangles, if any, is always another\naxis-aligned rectangle.\n\nReturns the intersection of this and `other`, or `null` if they don't\nintersect.\n","children":[{"ref":{"name":"Rectangle","refId":"dart.math/Rectangle","arguments":[{"name":"T","refId":"dart.math/_RectangleBase/T"}]},"kind":"param","name":"other","id":"other"}],"line":"55"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"intersects","id":"intersects1()","comment":"\nReturns true if `this` intersects [other].\n","children":[{"ref":{"name":"Rectangle","refId":"dart.math/Rectangle","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"param","name":"other","id":"other"}],"line":"74"},{"returnType":{"name":"Rectangle","refId":"dart.math/Rectangle","arguments":[{"name":"T","refId":"dart.math/_RectangleBase/T"}]},"kind":"method","name":"boundingBox","id":"boundingBox1()","comment":"\nReturns a new rectangle which completely contains `this` and [other].\n","children":[{"ref":{"name":"Rectangle","refId":"dart.math/Rectangle","arguments":[{"name":"T","refId":"dart.math/_RectangleBase/T"}]},"kind":"param","name":"other","id":"other"}],"line":"84"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsRectangle","id":"containsRectangle1()","comment":"\nTests whether `this` entirely contains [another].\n","children":[{"ref":{"name":"Rectangle","refId":"dart.math/Rectangle","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"param","name":"another","id":"another"}],"line":"97"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsPoint","id":"containsPoint1()","comment":"\nTests whether [another] is inside or along the edges of `this`.\n","children":[{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"num","refId":"dart.core/num"}]},"kind":"param","name":"another","id":"another"}],"line":"107"},{"ref":{"name":"T","refId":"dart.math/_RectangleBase/T"},"kind":"property","name":"left","id":"left","comment":"The x-coordinate of the left edge. ","line":"20"},{"ref":{"name":"T","refId":"dart.math/_RectangleBase/T"},"kind":"property","name":"top","id":"top","comment":"The y-coordinate of the top edge. ","line":"22"},{"ref":{"name":"T","refId":"dart.math/_RectangleBase/T"},"kind":"property","name":"width","id":"width","comment":"The `width` of the rectangle. ","line":"24"},{"ref":{"name":"T","refId":"dart.math/_RectangleBase/T"},"kind":"property","name":"height","id":"height","comment":"The `height` of the rectangle. ","line":"26"},{"ref":{"name":"T","refId":"dart.math/_RectangleBase/T"},"kind":"property","name":"right","id":"right","comment":"The x-coordinate of the right edge. ","line":"29"},{"ref":{"name":"T","refId":"dart.math/_RectangleBase/T"},"kind":"property","name":"bottom","id":"bottom","comment":"The y-coordinate of the bottom edge. ","line":"31"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"43"},{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/_RectangleBase/T"}]},"kind":"property","name":"topLeft","id":"topLeft","line":"114"},{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/_RectangleBase/T"}]},"kind":"property","name":"topRight","id":"topRight","line":"115"},{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/_RectangleBase/T"}]},"kind":"property","name":"bottomRight","id":"bottomRight","line":"116"},{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/_RectangleBase/T"}]},"kind":"property","name":"bottomLeft","id":"bottomLeft","line":"118"},{"kind":"constructor","name":"","id":"0()","line":"17"},{"upperBound":{"name":"num","refId":"dart.core/num"},"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"dart-sdk/lib/math/rectangle.dart","line":"16"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Random","id":"Random","comment":"\nA generator of random bool, int, or double values.\n\nThe default implementation supplies a stream of\npseudo-random bits that are not suitable for cryptographic purposes.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"nextInt","id":"nextInt1()","comment":"\nGenerates a positive random integer uniformly distributed on the range\nfrom 0, inclusive, to [max], exclusive.\n\nImplementation note: The default implementation supports [max] values\nbetween 1 and ((1<<32) - 1) inclusive.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"max","id":"max"}],"line":"30"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"nextDouble","id":"nextDouble0()","comment":"\nGenerates a positive random floating point value uniformly distributed on\nthe range from 0.0, inclusive, to 1.0, exclusive.\n","line":"36"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"nextBool","id":"nextBool0()","comment":"\nGenerates a random boolean value.\n","line":"41"},{"returnType":{"name":"Random","refId":"dart.math/Random"},"kind":"constructor","name":"","id":"1()","comment":"\nCreates a random-number generator. The optional parameter [seed] is used\nto initialize the internal state of the generator. The implementation of\nthe random stream can change between releases of the library.\n\nImplementation note: The default implementation uses up to 64-bits of seed.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"seed","id":"seed"}],"line":"21"}],"uri":"dart-sdk/lib/math/random.dart","line":"13"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Point","id":"Point","comment":"\nA utility class for representing two-dimensional positions.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"15"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","children":[{"kind":"param","name":"other","id":"other"}],"line":"17"},{"returnType":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/Point/T"}]},"isOperator":true,"kind":"method","name":"+","id":"+1()","comment":"\nAdd [other] to `this`, as if both points were vectors.\n\nReturns the resulting \"vector\" as a Point.\n","children":[{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/Point/T"}]},"kind":"param","name":"other","id":"other"}],"line":"29"},{"returnType":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/Point/T"}]},"isOperator":true,"kind":"method","name":"-","id":"-1()","comment":"\nSubtract [other] from `this`, as if both points were vectors.\n\nReturns the resulting \"vector\" as a Point.\n","children":[{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/Point/T"}]},"kind":"param","name":"other","id":"other"}],"line":"38"},{"returnType":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/Point/T"}]},"isOperator":true,"kind":"method","name":"*","id":"*1()","comment":"\nScale this point by [factor] as if it were a vector.\n\n*Important* *Note*: This function accepts a `num` as its argument only so\nthat you can scale Point<double> objects by an `int` factor. Because the\nstar operator always returns the same type of Point that originally called\nit, passing in a double [factor] on a `Point<int>` _causes_ _a_\n_runtime_ _error_ in checked mode.\n","children":[{"ref":{"name":"num","refId":"dart.core/num"},"kind":"param","name":"factor","id":"factor"}],"line":"51"},{"returnType":{"name":"double","refId":"dart.core/double"},"kind":"method","name":"distanceTo","id":"distanceTo1()","comment":"\nReturns the distance between `this` and [other].\n","children":[{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/Point/T"}]},"kind":"param","name":"other","id":"other"}],"line":"64"},{"returnType":{"name":"T","refId":"dart.math/Point/T"},"kind":"method","name":"squaredDistanceTo","id":"squaredDistanceTo1()","comment":"\nReturns the squared distance between `this` and [other].\n\nSquared distances can be used for comparisons when the actual value is not\nrequired.\n","children":[{"ref":{"name":"Point","refId":"dart.math/Point","arguments":[{"name":"T","refId":"dart.math/Point/T"}]},"kind":"param","name":"other","id":"other"}],"line":"76"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","line":"22"},{"ref":{"name":"double","refId":"dart.core/double"},"kind":"property","name":"magnitude","id":"magnitude","comment":"\nGet the straight line (Euclidean) distance between the origin (0, 0) and\nthis point.\n","line":"59"},{"ref":{"name":"T","refId":"dart.math/Point/T"},"isFinal":true,"kind":"variable","name":"x","id":"x","line":"10"},{"ref":{"name":"T","refId":"dart.math/Point/T"},"isFinal":true,"kind":"variable","name":"y","id":"y","line":"11"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"T","refId":"dart.math/Point/T"},"kind":"param","name":"x","id":"x"},{"ref":{"name":"T","refId":"dart.math/Point/T"},"kind":"param","name":"y","id":"y"}],"line":"13"},{"upperBound":{"name":"num","refId":"dart.core/num"},"kind":"typeparam","name":"T","id":"T"}],"uri":"dart-sdk/lib/math/point.dart","line":"9"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_JenkinsSmiHash","id":"_JenkinsSmiHash","comment":"\nThis is the [Jenkins hash function][1] but using masking to keep\nvalues in SMI range.\n\n[1]: http://en.wikipedia.org/wiki/Jenkins_hash_function\n\nUse:\nHash each value with the hash of the previous value, then get the final\nhash by calling finish.\n\n    var hash = 0;\n    for (var value in values) {\n      hash = JenkinsSmiHash.combine(hash, value.hashCode);\n    }\n    hash = JenkinsSmiHash.finish(hash);\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"combine","id":"combine2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"hash","id":"hash"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"value","id":"value"}],"line":"25"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"finish","id":"finish1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"hash","id":"hash"}],"line":"31"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"hash2","id":"hash22()","children":[{"kind":"param","name":"a","id":"a"},{"kind":"param","name":"b","id":"b"}],"line":"37"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"hash4","id":"hash44()","children":[{"kind":"param","name":"a","id":"a"},{"kind":"param","name":"b","id":"b"},{"kind":"param","name":"c","id":"c"},{"kind":"param","name":"d","id":"d"}],"line":"39"}],"isPrivate":true,"uri":"dart-sdk/lib/math/jenkins_smi_hash.dart","line":"22"}],"uri":"dart-sdk/lib/math/math.dart","line":"8"}