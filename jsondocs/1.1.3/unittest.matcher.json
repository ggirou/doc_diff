{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"kind":"class","name":"Error","id":"Error","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"safeToString","id":"safeToString1()","comment":"\nSafely convert a value to a [String] description.\n\nThe conversion is guaranteed to not throw, so it won't use the object's\ntoString method.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"14"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_objectToString","id":"_objectToString1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"isPrivate":true,"line":"65"},{"ref":{"name":"StackTrace","refId":"dart.core/StackTrace"},"kind":"property","name":"stackTrace","id":"stackTrace","line":"67"}],"uri":"dart-sdk/lib/core/errors.dart","line":"7"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"}],"kind":"library","name":"file:///home/ggirou/dev/dart/doc_diff/bin/packages/unittest/matcher.dart","id":"unittest.matcher","comment":"\nSupport for specifying test expectations,\nsuch as for unit tests.\n\nThis library is included in the\n[unittest package on pub.dartlang.org]\n(http://pub.dartlang.org/packages/unittest).\nImport this library into your Dart code with:\n\n    import 'package:unittest/matcher.dart';\n\nThe matcher library provides a third-generation assertion mechanism, drawing\ninspiration from [Hamcrest](http://code.google.com/p/hamcrest/).\nFor more information, see\n[Unit Testing with Dart]\n(http://www.dartlang.org/articles/dart-unit-tests/).\n","children":[{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"matches","id":"matches1()","comment":"\nReturns a matcher that matches if the match argument is a string and\nmatches the regular expression given by [re]. [re] can be a RegExp\ninstance or a string; in the latter case it will be used to create\na RegExp instance.\n","children":[{"kind":"param","name":"re","id":"re"}],"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"167"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"stringContainsInOrder","id":"stringContainsInOrder1()","comment":"\nReturns a matcher that matches if the match argument is a string and\ncontains a given list of [substrings] in relative order.\n\nFor example, `stringContainsInOrder([\"a\", \"e\", \"i\", \"o\", \"u\"])` will match\n\"abcdefghijklmnopqrstuvwxyz\".\n","children":[{"kind":"param","name":"substrings","id":"substrings"}],"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"134"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"endsWith","id":"endsWith1()","comment":"\nReturns a matcher that matches if the match argument is a string and\nends with [suffixString].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"suffixString","id":"suffixString"}],"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"111"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"startsWith","id":"startsWith1()","comment":"\nReturns a matcher that matches if the match argument is a string and\nstarts with [prefixString].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"prefixString","id":"prefixString"}],"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"93"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"collapseWhitespace","id":"collapseWhitespace1()","comment":"\nUtility function to collapse whitespace runs to single spaces\nand strip leading/trailing whitespace.\n","children":[{"kind":"param","name":"_string","id":"_string","isPrivate":true}],"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"70"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"equalsIgnoringWhitespace","id":"equalsIgnoringWhitespace1()","comment":"\nReturns a matcher which matches if the match argument is a string and\nis equal to [value] when compared with all runs of whitespace\ncollapsed to single spaces and leading and trailing whitespace removed.\n\nFor example, `equalsIgnoringCase(\"hello world\")` will match\n\"hello   world\", \"  hello world\" and \"hello world  \".\n","children":[{"kind":"param","name":"_string","id":"_string","isPrivate":true}],"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"36"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"equalsIgnoringCase","id":"equalsIgnoringCase1()","comment":"\nReturns a matcher which matches if the match argument is a string and\nis equal to [value] when compared case-insensitively.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"value","id":"value"}],"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"11"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"anyOf","id":"anyOf7()","comment":"\nMatches if any of the given matchers evaluate to true. The\narguments can be a set of matchers as separate parameters\n(up to 7), or a List of matchers.\n\nThe matchers are evaluated from left to right using short-circuit\nevaluation, so evaluation stops as soon as a matcher returns true.\n\nAny argument that is not a matcher is implicitly wrapped in a\nMatcher to check for equality.\n","children":[{"kind":"param","name":"arg0","id":"arg0"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg1","id":"arg1","line":"116"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg2","id":"arg2","line":"117"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg3","id":"arg3","line":"118"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg4","id":"arg4","line":"119"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg5","id":"arg5","line":"120"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg6","id":"arg6","line":"121"}],"uri":"doc_diff/bin/packages/unittest/src/operator_matchers.dart","line":"115"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"allOf","id":"allOf7()","comment":"\nThis returns a matcher that matches if all of the matchers passed as\narguments (up to 7) match. Instead of passing the matchers separately\nthey can be passed as a single List argument.\nAny argument that is not a matcher is implicitly wrapped in a\nMatcher to check for equality.\n","children":[{"kind":"param","name":"arg0","id":"arg0"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg1","id":"arg1","line":"32"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg2","id":"arg2","line":"33"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg3","id":"arg3","line":"34"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg4","id":"arg4","line":"35"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg5","id":"arg5","line":"36"},{"defaultValue":"null","isOptional":true,"kind":"param","name":"arg6","id":"arg6","line":"37"}],"uri":"doc_diff/bin/packages/unittest/src/operator_matchers.dart","line":"31"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"isNot","id":"isNot1()","comment":"\nThis returns a matcher that inverts [matcher] to its logical negation.\n","children":[{"kind":"param","name":"matcher","id":"matcher"}],"uri":"doc_diff/bin/packages/unittest/src/operator_matchers.dart","line":"10"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"inClosedOpenRange","id":"inClosedOpenRange2()","comment":"\nReturns a matcher which matches if the match argument is greater\nthan or equal to a [low] and less than [high].\n","children":[{"kind":"param","name":"low","id":"low"},{"kind":"param","name":"high","id":"high"}],"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"192"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"inOpenClosedRange","id":"inOpenClosedRange2()","comment":"\nReturns a matcher which matches if the match argument is greater\nthan [low] and less than or equal to [high].\n","children":[{"kind":"param","name":"low","id":"low"},{"kind":"param","name":"high","id":"high"}],"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"186"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"inExclusiveRange","id":"inExclusiveRange2()","comment":"\nReturns a matcher which matches if the match argument is greater\nthan [low] and less than [high].\n","children":[{"kind":"param","name":"low","id":"low"},{"kind":"param","name":"high","id":"high"}],"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"180"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"inInclusiveRange","id":"inInclusiveRange2()","comment":"\nReturns a matcher which matches if the match argument is greater\nthan or equal to [low] and less than or equal to [high].\n","children":[{"kind":"param","name":"low","id":"low"},{"kind":"param","name":"high","id":"high"}],"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"174"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"closeTo","id":"closeTo2()","comment":"\nReturns a matcher which matches if the match argument is within [delta]\nof some [value]; i.e. if the match argument is greater than\nthan or equal [value]-[delta] and less than or equal to [value]+[delta].\n","children":[{"kind":"param","name":"value","id":"value"},{"kind":"param","name":"delta","id":"delta"}],"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"134"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_isNumeric","id":"_isNumeric1()","children":[{"kind":"param","name":"value","id":"value"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"76"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"lessThanOrEqualTo","id":"lessThanOrEqualTo1()","comment":"\nReturns a matcher which matches if the match argument is less\nthan or equal to the given [value].\n","children":[{"kind":"param","name":"value","id":"value"}],"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"33"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"lessThan","id":"lessThan1()","comment":"\nReturns a matcher which matches if the match argument is less\nthan the given [value].\n","children":[{"kind":"param","name":"value","id":"value"}],"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"26"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"greaterThanOrEqualTo","id":"greaterThanOrEqualTo1()","comment":"\nReturns a matcher which matches if the match argument is greater\nthan or equal to the given [value].\n","children":[{"kind":"param","name":"value","id":"value"}],"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"18"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"greaterThan","id":"greaterThan1()","comment":"\nReturns a matcher which matches if the match argument is greater\nthan the given [value].\n","children":[{"kind":"param","name":"value","id":"value"}],"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"11"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"containsPair","id":"containsPair2()","comment":"\nReturns a matcher which matches maps containing the key-value pair\nwith [key] => [value].\n","children":[{"kind":"param","name":"key","id":"key"},{"kind":"param","name":"value","id":"value"}],"uri":"doc_diff/bin/packages/unittest/src/map_matchers.dart","line":"26"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"containsValue","id":"containsValue1()","comment":"\nReturns a matcher which matches maps containing the given [value].\n","children":[{"kind":"param","name":"value","id":"value"}],"uri":"doc_diff/bin/packages/unittest/src/map_matchers.dart","line":"10"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"completion","id":"completion2()","comment":"\nMatches a [Future] that completes succesfully with a value that matches\n[matcher]. Note that this creates an asynchronous expectation. The call to\n`expect()` that includes this will return immediately and execution will\ncontinue. Later, when the future completes, the actual expectation will run.\n\nTo test that a Future completes with an exception, you can use [throws] and\n[throwsA].\n\n[id] is an optional tag that can be used to identify the completion matcher\nin error messages.\n","children":[{"kind":"param","name":"matcher","id":"matcher"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"kind":"param","name":"id","id":"id"}],"uri":"doc_diff/bin/packages/unittest/src/future_matchers.dart","line":"30"},{"returnType":{"name":"ErrorFormatter","refId":"unittest.matcher/ErrorFormatter"},"kind":"method","name":"configureExpectFormatter","id":"configureExpectFormatter1()","comment":"\nChanges or resets to default the failure message formatter for expect().\n[formatter] is a reference to the new formatter; if this is omitted or\nnull then the failure formatter is reset to the default. The new\nformatter is returned; this allows custom expect handlers to easily\nget a reference to the default formatter.\n","children":[{"ref":{"name":"ErrorFormatter","refId":"unittest.matcher/ErrorFormatter"},"defaultValue":"null","isOptional":true,"kind":"param","name":"formatter","id":"formatter"}],"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"170"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_defaultErrorFormatter","id":"_defaultErrorFormatter5()","children":[{"kind":"param","name":"actual","id":"actual"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"param","name":"matcher","id":"matcher"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"146"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"146"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"145"},{"returnType":{"name":"FailureHandler","refId":"unittest.matcher/FailureHandler"},"kind":"method","name":"getOrCreateExpectFailureHandler","id":"getOrCreateExpectFailureHandler0()","uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"134"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"configureExpectFailureHandler","id":"configureExpectFailureHandler1()","comment":"\nChanges or resets to the default the failure handler for expect()\n[handler] is a reference to the new handler; if this is omitted\nor null then the failure handler is reset to the default, which\nthrows [TestFailure]s on [expect] assertion failures.\n","children":[{"ref":{"name":"FailureHandler","refId":"unittest.matcher/FailureHandler"},"defaultValue":"null","isOptional":true,"kind":"param","name":"handler","id":"handler"}],"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"127"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"wrapMatcher","id":"wrapMatcher1()","comment":"\nTakes an argument and returns an equivalent matcher.\nIf the argument is already a matcher this does nothing,\nelse if the argument is a function, it generates a predicate\nfunction matcher, else it generates an equals matcher.\n","children":[{"kind":"param","name":"x","id":"x"}],"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"92"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fail","id":"fail2()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"message","id":"message"},{"ref":{"name":"FailureHandler","refId":"unittest.matcher/FailureHandler"},"isOptional":true,"isNamed":true,"kind":"param","name":"failureHandler","id":"failureHandler"}],"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"79"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"expect","id":"expect5()","comment":"\nThis is the main assertion function. It asserts that [actual]\nmatches the [matcher]. [reason] is optional and is typically not\nsupplied, as a reason is generated from the matcher; if [reason]\nis included it is appended to the reason generated by the matcher.\n\n[matcher] can be a value in which case it will be wrapped in an\n[equals] matcher.\n\nIf the assertion fails, then the default behavior is to throw a\n[TestFailure], but this behavior can be changed by calling\n[configureExpectFailureHandler] and providing an alternative handler that\nimplements the [IFailureHandler] interface. It is also possible to\npass a [failureHandler] to [expect] as a final parameter for fine-\ngrained control.\n\nIn some cases extra diagnostic info can be produced on failure (for\nexample, stack traces on mismatched exceptions). To enable these,\n[verbose] should be specified as true;\n","children":[{"kind":"param","name":"actual","id":"actual"},{"kind":"param","name":"matcher","id":"matcher"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"isNamed":true,"kind":"param","name":"reason","id":"reason"},{"ref":{"name":"FailureHandler","refId":"unittest.matcher/FailureHandler"},"isOptional":true,"isNamed":true,"kind":"param","name":"failureHandler","id":"failureHandler"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"false","isOptional":true,"isNamed":true,"kind":"param","name":"verbose","id":"verbose","line":"59"}],"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"58"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addStateInfo","id":"addStateInfo2()","comment":"\nUseful utility for nesting match states.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"values","id":"values"}],"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"20"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"predicate","id":"predicate2()","comment":"\nReturns a matcher that uses an arbitrary function that returns\ntrue or false for the actual value. For example:\n\n    expect(v, predicate((x) => ((x % 2) == 0), \"is even\"))\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f"},{"defaultValue":"'satisfies function'","isOptional":true,"kind":"param","name":"description","id":"description"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"824"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"isIn","id":"isIn1()","comment":"\nReturns a matcher that matches if the match argument is in\nthe expected value. This is the converse of [contains].\n","children":[{"kind":"param","name":"expected","id":"expected"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"795"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns a matcher that matches if the match argument contains\nthe expected value. For [String]s this means substring matching;\nfor [Map]s it means the map has the key, and for [Iterable]s\n(including [Iterable]s) it means the iterable has a matching\nelement. In the case of iterables, [expected] can itself be a\nmatcher.\n","children":[{"kind":"param","name":"expected","id":"expected"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"754"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"hasLength","id":"hasLength1()","comment":"\nReturns a matcher that matches if an object has a length property\nthat matches [matcher].\n","children":[{"kind":"param","name":"matcher","id":"matcher"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"708"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"throwsA","id":"throwsA1()","comment":"\nThis can be used to match two kinds of objects:\n\n  * A [Function] that throws an exception when called. The function cannot\n    take any arguments. If you want to test that a function expecting\n    arguments throws, wrap it in another zero-argument function that calls\n    the one you want to test.\n\n  * A [Future] that completes with an exception. Note that this creates an\n    asynchronous expectation. The call to `expect()` that includes this will\n    return immediately and execution will continue. Later, when the future\n    completes, the actual expectation will run.\n\nIn both cases, when an exception is thrown, this will test that the exception\nobject matches [matcher]. If [matcher] is not an instance of [Matcher], it\nwill implicitly be treated as `equals(matcher)`.\n","children":[{"kind":"param","name":"matcher","id":"matcher"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"395"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"equals","id":"equals2()","comment":"\nReturns a matcher that does a deep recursive match. This only works\nwith scalars, Maps and Iterables. To handle cyclic structures a\nrecursion depth [limit] can be provided. The default limit is 100.\n","children":[{"kind":"param","name":"expected","id":"expected"},{"defaultValue":"100","isOptional":true,"kind":"param","name":"limit","id":"limit"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"88"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"same","id":"same1()","comment":"\nReturns a matches that matches if the value is the same instance\nas [object] (`===`).\n","children":[{"kind":"param","name":"expected","id":"expected"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"72"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"pairwiseCompare","id":"pairwiseCompare3()","comment":"\nA pairwise matcher for iterable. You can pass an arbitrary [comparator]\nfunction that takes an expected and actual argument which will be applied\nto each pair in order. [description]  should be a meaningful name for\nthe comparator.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"expected","id":"expected"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"comparator","id":"comparator"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"description","id":"description","line":"227"}],"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"226"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"unorderedMatches","id":"unorderedMatches1()","comment":"\nReturns a matcher which matches [Iterable]s whose elements match the matchers\nin [expected], but not necessarily in the same order.\n\n Note that this is `O(n^2)` and so should only be used on small objects.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"expected","id":"expected"}],"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"159"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"unorderedEquals","id":"unorderedEquals1()","comment":"\nReturns a matcher which matches [Iterable]s that have the same\nlength and the same elements as [expected], but not necessarily in\nthe same order. Note that this is O(n^2) so should only be used on\nsmall objects.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"expected","id":"expected"}],"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"118"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"orderedEquals","id":"orderedEquals1()","comment":"\nReturns a matcher which matches [Iterable]s that have the same\nlength and the same elements as [expected], and in the same order.\nThis is equivalent to equals but does not recurse.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"expected","id":"expected"}],"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"85"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"anyElement","id":"anyElement1()","comment":"\nReturns a matcher which matches [Iterable]s in which at least one\nelement matches the given [matcher].\n","children":[{"kind":"param","name":"matcher","id":"matcher"}],"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"64"},{"returnType":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"method","name":"everyElement","id":"everyElement1()","comment":"\nReturns a matcher which matches [Iterable]s in which all elements\nmatch the given [matcher].\n","children":[{"kind":"param","name":"matcher","id":"matcher"}],"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"11"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isNonNegative","id":"isNonNegative","comment":"\nA matcher which matches if the match argument is zero or positive.\n","uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"72"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isNegative","id":"isNegative","comment":"\nA matcher which matches if the match argument is negative.\n","uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"66"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isNonPositive","id":"isNonPositive","comment":"\nA matcher which matches if the match argument is zero or negative.\n","uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"59"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isPositive","id":"isPositive","comment":"\nA matcher which matches if the match argument is positive.\n","uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"53"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isNonZero","id":"isNonZero","comment":"\nA matcher which matches if the match argument is non-zero.\n","uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"47"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isZero","id":"isZero","comment":"\nA matcher which matches if the match argument is zero.\n","uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"40"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isFinal":true,"kind":"variable","name":"completes","id":"completes","comment":"\nMatches a [Future] that completes successfully with a value. Note that this\ncreates an asynchronous expectation. The call to `expect()` that includes\nthis will return immediately and execution will continue. Later, when the\nfuture completes, the actual expectation will run.\n\nTo test that a Future completes with an exception, you can use [throws] and\n[throwsA].\n","uri":"doc_diff/bin/packages/unittest/src/future_matchers.dart","line":"16"},{"ref":{"name":"ErrorFormatter","refId":"unittest.matcher/ErrorFormatter"},"kind":"variable","name":"_assertErrorFormatter","id":"_assertErrorFormatter","isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"142"},{"ref":{"name":"FailureHandler","refId":"unittest.matcher/FailureHandler"},"kind":"variable","name":"_assertFailureHandler","id":"_assertFailureHandler","isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"103"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"variable","name":"wrapAsync","id":"wrapAsync","comment":"\nSome matchers, like those for Futures and exception testing,\ncan fail in asynchronous sections, and throw exceptions.\nA user of this library will typically want to catch and handle\nsuch exceptions. The [wrapAsync] property is a function that\ncan wrap callbacks used by these Matchers so that they can be\nused safely. For example, the unittest library will set this\nto be expectAsync1. By default this is an identity function.\n","uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"36"},{"kind":"variable","name":"isList","id":"isList","comment":"A matcher for List types. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"697"},{"kind":"variable","name":"isMap","id":"isMap","comment":"A matcher for Map types. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"689"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsCyclicInitializationError","id":"throwsCyclicInitializationError","comment":"A matcher for functions that throw CyclicInitializationError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"680"},{"kind":"variable","name":"isCyclicInitializationError","id":"isCyclicInitializationError","comment":"A matcher for CyclicInitializationError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"677"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsAbstractClassInstantiationError","id":"throwsAbstractClassInstantiationError","comment":"A matcher for functions that throw AbstractClassInstantiationError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"667"},{"kind":"variable","name":"isAbstractClassInstantiationError","id":"isAbstractClassInstantiationError","comment":"A matcher for AbstractClassInstantiationError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"663"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsConcurrentModificationError","id":"throwsConcurrentModificationError","comment":"A matcher for functions that throw ConcurrentModificationError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"654"},{"kind":"variable","name":"isConcurrentModificationError","id":"isConcurrentModificationError","comment":"A matcher for ConcurrentModificationError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"651"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsNullThrownError","id":"throwsNullThrownError","comment":"A matcher for functions that throw NullThrownError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"642"},{"kind":"variable","name":"isNullThrownError","id":"isNullThrownError","comment":"A matcher for NullThrownError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"639"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsFallThroughError","id":"throwsFallThroughError","comment":"A matcher for functions that throw FallThroughError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"630"},{"kind":"variable","name":"isFallThroughError","id":"isFallThroughError","comment":"A matcher for FallThroughError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"627"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsStateError","id":"throwsStateError","comment":"A matcher for functions that throw StateError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"618"},{"kind":"variable","name":"isStateError","id":"isStateError","comment":"A matcher for StateErrors. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"615"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsUnsupportedError","id":"throwsUnsupportedError","comment":"A matcher for functions that throw UnsupportedError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"606"},{"kind":"variable","name":"isUnsupportedError","id":"isUnsupportedError","comment":"A matcher for UnsupportedError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"603"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsUnimplementedError","id":"throwsUnimplementedError","comment":"A matcher for functions that throw Exception. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"594"},{"kind":"variable","name":"isUnimplementedError","id":"isUnimplementedError","comment":"A matcher for UnimplementedErrors. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"591"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsNoSuchMethodError","id":"throwsNoSuchMethodError","comment":"A matcher for functions that throw NoSuchMethodError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"582"},{"kind":"variable","name":"isNoSuchMethodError","id":"isNoSuchMethodError","comment":"A matcher for NoSuchMethodErrors. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"579"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsRangeError","id":"throwsRangeError","comment":"A matcher for functions that throw RangeError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"570"},{"kind":"variable","name":"isRangeError","id":"isRangeError","comment":"A matcher for RangeErrors. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"567"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsArgumentError","id":"throwsArgumentError","comment":"A matcher for functions that throw ArgumentError. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"558"},{"kind":"variable","name":"isArgumentError","id":"isArgumentError","comment":"A matcher for ArgumentErrors. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"555"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsException","id":"throwsException","comment":"A matcher for functions that throw Exception. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"547"},{"kind":"variable","name":"isException","id":"isException","comment":"A matcher for Exceptions. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"544"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throwsFormatException","id":"throwsFormatException","comment":"A matcher for functions that throw FormatException. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"535"},{"kind":"variable","name":"isFormatException","id":"isFormatException","comment":"A matcher for FormatExceptions. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"532"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"returnsNormally","id":"returnsNormally","comment":"\nA matcher that matches a function call against no exception.\nThe function will be called once. Any exceptions will be silently swallowed.\nThe value passed to expect() should be a reference to the function.\nNote that the function cannot take arguments; to handle this\na wrapper will have to be created.\n","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"404"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"throws","id":"throws","comment":"\nThis can be used to match two kinds of objects:\n\n  * A [Function] that throws an exception when called. The function cannot\n    take any arguments. If you want to test that a function expecting\n    arguments throws, wrap it in another zero-argument function that calls\n    the one you want to test.\n\n  * A [Future] that completes with an exception. Note that this creates an\n    asynchronous expectation. The call to `expect()` that includes this will\n    return immediately and execution will continue. Later, when the future\n    completes, the actual expectation will run.\n","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"376"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"anything","id":"anything","comment":"A matcher that matches any value. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"323"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isFalse","id":"isFalse","comment":"A matcher that matches anything except the Boolean value true. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"52"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isTrue","id":"isTrue","comment":"A matcher that matches the Boolean value true. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"49"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isNotNull","id":"isNotNull","comment":"A matcher that matches any non-null value. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"32"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isNull","id":"isNull","comment":"A matcher that matches any null value. ","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"29"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"isEmpty","id":"isEmpty","comment":"\nReturns a matcher that matches empty strings, maps or iterables\n(including collections).\n","uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"11"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isAbstract":true,"kind":"class","name":"_StringMatcher","id":"_StringMatcher","children":[{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"194"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"194"}],"line":"193"},{"kind":"constructor","name":"","id":"0()","line":"192"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"191"},{"superclass":{"name":"_StringMatcher","refId":"unittest.matcher/_StringMatcher"},"kind":"class","name":"_MatchesRegExp","id":"_MatchesRegExp","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"182"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"185"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"kind":"variable","name":"_regexp","id":"_regexp","isPrivate":true,"line":"170"},{"kind":"constructor","name":"","id":"1()","children":[{"kind":"param","name":"re","id":"re"}],"line":"172"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"169"},{"superclass":{"name":"_StringMatcher","refId":"unittest.matcher/_StringMatcher"},"kind":"class","name":"_StringContainsInOrder","id":"_StringContainsInOrder","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"143"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"156"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isFinal":true,"kind":"variable","name":"_substrings","id":"_substrings","isPrivate":true,"line":"139"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"initializedField":{"name":"_substrings","refId":"unittest.matcher/_StringContainsInOrder/_substrings"},"kind":"param","name":"_substrings","id":"_substrings","isPrivate":true}],"line":"141"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"137"},{"superclass":{"name":"_StringMatcher","refId":"unittest.matcher/_StringMatcher"},"kind":"class","name":"_StringEndsWith","id":"_StringEndsWith","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"119"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"122"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_suffix","id":"_suffix","isPrivate":true,"line":"115"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_suffix","refId":"unittest.matcher/_StringEndsWith/_suffix"},"kind":"param","name":"_suffix","id":"_suffix","isPrivate":true}],"line":"117"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"113"},{"superclass":{"name":"_StringMatcher","refId":"unittest.matcher/_StringMatcher"},"kind":"class","name":"_StringStartsWith","id":"_StringStartsWith","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"100"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"103"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_prefix","id":"_prefix","isPrivate":true,"line":"96"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_prefix","refId":"unittest.matcher/_StringStartsWith/_prefix"},"kind":"param","name":"_prefix","id":"_prefix","isPrivate":true}],"line":"98"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"95"},{"superclass":{"name":"_StringMatcher","refId":"unittest.matcher/_StringMatcher"},"kind":"class","name":"_IsEqualIgnoringWhitespace","id":"_IsEqualIgnoringWhitespace","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"47"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"50"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"54"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"54"}],"line":"53"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"40"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_matchValue","id":"_matchValue","isPrivate":true,"line":"41"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_value","refId":"unittest.matcher/_IsEqualIgnoringWhitespace/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true}],"line":"43"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"39"},{"superclass":{"name":"_StringMatcher","refId":"unittest.matcher/_StringMatcher"},"kind":"class","name":"_IsEqualIgnoringCase","id":"_IsEqualIgnoringCase","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"21"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"24"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"14"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_matchValue","id":"_matchValue","isPrivate":true,"line":"15"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_value","refId":"unittest.matcher/_IsEqualIgnoringCase/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true}],"line":"17"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/string_matchers.dart","line":"13"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_AnyOf","id":"_AnyOf","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"165"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"174"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Matcher","refId":"unittest.matcher/Matcher"}]},"isFinal":true,"kind":"variable","name":"_matchers","id":"_matchers","isPrivate":true,"line":"161"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Matcher","refId":"unittest.matcher/Matcher"}]},"initializedField":{"name":"_matchers","refId":"unittest.matcher/_AnyOf/_matchers"},"kind":"param","name":"_matchers","id":"_matchers","isPrivate":true}],"line":"163"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/operator_matchers.dart","line":"160"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_AllOf","id":"_AllOf","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"81"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"92"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"92"}],"line":"91"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"99"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Matcher","refId":"unittest.matcher/Matcher"}]},"isFinal":true,"kind":"variable","name":"_matchers","id":"_matchers","isPrivate":true,"line":"77"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Matcher","refId":"unittest.matcher/Matcher"}]},"initializedField":{"name":"_matchers","refId":"unittest.matcher/_AllOf/_matchers"},"kind":"param","name":"_matchers","id":"_matchers","isPrivate":true}],"line":"79"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/operator_matchers.dart","line":"76"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_IsNot","id":"_IsNot","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"17"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"20"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isFinal":true,"kind":"variable","name":"_matcher","id":"_matcher","isPrivate":true,"line":"13"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"initializedField":{"name":"_matcher","refId":"unittest.matcher/_IsNot/_matcher"},"kind":"param","name":"_matcher","id":"_matcher","isPrivate":true}],"line":"15"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/operator_matchers.dart","line":"12"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_InRange","id":"_InRange","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"value","id":"value"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"201"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"217"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"223"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"223"}],"line":"222"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"_low","id":"_low","isPrivate":true,"line":"195"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"_high","id":"_high","isPrivate":true,"line":"195"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_lowMatchValue","id":"_lowMatchValue","isPrivate":true,"line":"196"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_highMatchValue","id":"_highMatchValue","isPrivate":true,"line":"196"},{"kind":"constructor","name":"","id":"4()","children":[{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"_low","refId":"unittest.matcher/_InRange/_low"},"kind":"param","name":"_low","id":"_low","isPrivate":true},{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"_high","refId":"unittest.matcher/_InRange/_high"},"kind":"param","name":"_high","id":"_high","isPrivate":true},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_lowMatchValue","refId":"unittest.matcher/_InRange/_lowMatchValue"},"kind":"param","name":"_lowMatchValue","id":"_lowMatchValue","isPrivate":true,"line":"199"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_highMatchValue","refId":"unittest.matcher/_InRange/_highMatchValue"},"kind":"param","name":"_highMatchValue","id":"_highMatchValue","isPrivate":true,"line":"199"}],"line":"198"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"194"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_IsCloseTo","id":"_IsCloseTo","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"141"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"150"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"157"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"157"}],"line":"156"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"137"},{"ref":{"name":"num","refId":"dart.core/num"},"isFinal":true,"kind":"variable","name":"_delta","id":"_delta","isPrivate":true,"line":"137"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"_value","refId":"unittest.matcher/_IsCloseTo/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true},{"ref":{"name":"num","refId":"dart.core/num"},"initializedField":{"name":"_delta","refId":"unittest.matcher/_IsCloseTo/_delta"},"kind":"param","name":"_delta","id":"_delta","isPrivate":true}],"line":"139"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"136"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_OrderingComparison","id":"_OrderingComparison","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"103"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"113"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"123"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"123"}],"line":"122"},{"isFinal":true,"kind":"variable","name":"_value","id":"_value","comment":"Expected value. ","isPrivate":true,"line":"82"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_equalValue","id":"_equalValue","comment":"What to return if actual == expected ","isPrivate":true,"line":"84"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_lessThanValue","id":"_lessThanValue","comment":"What to return if actual < expected ","isPrivate":true,"line":"86"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_greaterThanValue","id":"_greaterThanValue","comment":"What to return if actual > expected ","isPrivate":true,"line":"88"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_comparisonDescription","id":"_comparisonDescription","comment":"Textual name of the inequality ","isPrivate":true,"line":"90"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isFinal":true,"kind":"variable","name":"_valueInDescription","id":"_valueInDescription","comment":"Whether to include the expected value in the description ","isPrivate":true,"line":"92"},{"kind":"constructor","name":"","id":"6()","children":[{"initializedField":{"name":"_value","refId":"unittest.matcher/_OrderingComparison/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true,"line":"95"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_equalValue","refId":"unittest.matcher/_OrderingComparison/_equalValue"},"kind":"param","name":"_equalValue","id":"_equalValue","isPrivate":true,"line":"96"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_lessThanValue","refId":"unittest.matcher/_OrderingComparison/_lessThanValue"},"kind":"param","name":"_lessThanValue","id":"_lessThanValue","isPrivate":true,"line":"97"},{"ref":{"name":"bool","refId":"dart.core/bool"},"initializedField":{"name":"_greaterThanValue","refId":"unittest.matcher/_OrderingComparison/_greaterThanValue"},"kind":"param","name":"_greaterThanValue","id":"_greaterThanValue","isPrivate":true,"line":"98"},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_comparisonDescription","refId":"unittest.matcher/_OrderingComparison/_comparisonDescription"},"kind":"param","name":"_comparisonDescription","id":"_comparisonDescription","isPrivate":true,"line":"99"},{"defaultValue":"true","isOptional":true,"kind":"param","name":"valueInDescription","id":"valueInDescription","line":"100"}],"line":"94"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/numeric_matchers.dart","line":"80"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_ContainsMapping","id":"_ContainsMapping","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"35"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"39"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"45"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"45"}],"line":"44"},{"isFinal":true,"kind":"variable","name":"_key","id":"_key","isPrivate":true,"line":"30"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isFinal":true,"kind":"variable","name":"_valueMatcher","id":"_valueMatcher","isPrivate":true,"line":"31"},{"kind":"constructor","name":"","id":"2()","children":[{"initializedField":{"name":"_key","refId":"unittest.matcher/_ContainsMapping/_key"},"kind":"param","name":"_key","id":"_key","isPrivate":true},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"initializedField":{"name":"_valueMatcher","refId":"unittest.matcher/_ContainsMapping/_valueMatcher"},"kind":"param","name":"_valueMatcher","id":"_valueMatcher","isPrivate":true}],"line":"33"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/map_matchers.dart","line":"29"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_ContainsValue","id":"_ContainsValue","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"17"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"18"},{"isFinal":true,"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"13"},{"kind":"constructor","name":"","id":"1()","children":[{"initializedField":{"name":"_value","refId":"unittest.matcher/_ContainsValue/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true}],"line":"15"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/map_matchers.dart","line":"12"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"FailureHandler","id":"FailureHandler","comment":"\nFailed matches are reported using a default IFailureHandler.\nThe default implementation simply throws [TestFailure]s;\nthis can be replaced by some other implementation of\nIFailureHandler by calling configureExpectHandler.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fail","id":"fail1()","comment":"This handles failures given a textual decription ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"}],"line":"91"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"failMatch","id":"failMatch5()","comment":"\nThis handles failures given the actual [value], the [matcher]\nthe [reason] (argument from [expect]), some additonal [matchState]\ngenerated by the [matcher], and a verbose flag which controls in\nsome cases how much [matchState] information is used. It will use\nthese to create a detailed error message (typically by calling\nan [ErrorFormatter]) and then call [fail] with this message.\n","children":[{"kind":"param","name":"actual","id":"actual"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"param","name":"matcher","id":"matcher"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"102"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"102"}],"line":"101"}],"uri":"doc_diff/bin/packages/unittest/src/interfaces.dart","line":"89"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Matcher","id":"Matcher","comment":"\n[expect] Matchers must implement/extend the Matcher class.\nThe base Matcher class has a generic implementation of [describeMismatch]\nso this does not need to be provided unless a more clear description is\nrequired. The other two methods ([matches] and [describe])\nmust always be provided as they are highly matcher-specific.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","comment":"\nThis does the matching of the actual vs expected values.\n[item] is the actual value. [matchState] can be supplied\nand may be used to add details about the mismatch that are too\ncostly to determine in [describeMismatch].\n","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"64"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","comment":"This builds a textual description of the matcher. ","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"67"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","comment":"\nThis builds a textual description of a specific mismatch. [item]\nis the value that was tested by [matches]; [matchState] is\nthe [Map] that was passed to and supplemented by [matches]\nwith additional information about the mismact, and [mismatchDescription]\nis the [Description] that is being built to decribe the mismatch.\nA few matchers make use of the [verbose] flag to provide detailed\ninformation that is not typically included but can be of help in\ndiagnosing failures, such as stack traces.\n","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"80"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"80"}],"line":"79"},{"kind":"constructor","name":"","id":"0()","line":"56"}],"uri":"doc_diff/bin/packages/unittest/src/interfaces.dart","line":"55"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Description","id":"Description","comment":"\nMatchers build up their error messages by appending to\nDescription objects. This interface is implemented by\nStringDescription. This interface is unlikely to need\nother implementations, but could be useful to replace in\nsome cases - e.g. language conversion.\n","children":[{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"replace","id":"replace1()","comment":"Change the value of the description. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"}],"line":"32"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"add","id":"add1()","comment":"This is used to add arbitrary text to the description. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"}],"line":"35"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"addDescriptionOf","id":"addDescriptionOf1()","comment":"This is used to add a meaningful description of a value. ","children":[{"kind":"param","name":"value","id":"value"}],"line":"38"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"addAll","id":"addAll4()","comment":"\nThis is used to add a description of an [Iterable] [list],\nwith appropriate [start] and [end] markers and inter-element [separator].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"separator","id":"separator"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"list","id":"list","line":"45"}],"line":"44"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"29"}],"uri":"doc_diff/bin/packages/unittest/src/interfaces.dart","line":"28"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"typedef","name":"ErrorFormatter","id":"ErrorFormatter","comment":"\nThe ErrorFormatter type is used for functions that\ncan be used to build up error reports upon [expect] failures.\nThere is one built-in implementation ([defaultErrorFormatter])\nwhich is used by the default failure handler. If the failure handler\nis replaced it may be desirable to replace the [stringDescription]\nerror formatter with another.\n","children":[{"kind":"param","name":"actual","id":"actual"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"param","name":"matcher","id":"matcher"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"19"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"19"}],"uri":"doc_diff/bin/packages/unittest/src/interfaces.dart","line":"18"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_Completes","id":"_Completes","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"39"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"60"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isFinal":true,"kind":"variable","name":"_matcher","id":"_matcher","isPrivate":true,"line":"34"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_id","id":"_id","isPrivate":true,"line":"35"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"initializedField":{"name":"_matcher","refId":"unittest.matcher/_Completes/_matcher"},"kind":"param","name":"_matcher","id":"_matcher","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_id","refId":"unittest.matcher/_Completes/_id"},"kind":"param","name":"_id","id":"_id","isPrivate":true}],"line":"37"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/future_matchers.dart","line":"33"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"FailureHandler","refId":"unittest.matcher/FailureHandler"}],"kind":"class","name":"DefaultFailureHandler","id":"DefaultFailureHandler","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fail","id":"fail1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"}],"line":"112"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"failMatch","id":"failMatch5()","children":[{"kind":"param","name":"actual","id":"actual"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"param","name":"matcher","id":"matcher"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"reason","id":"reason"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"116"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"116"}],"line":"115"},{"kind":"constructor","name":"","id":"0()","line":"107"}],"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"106"},{"superclass":{"name":"Error","refId":"dart.core/Error"},"isThrowable":true,"kind":"class","name":"TestFailure","id":"TestFailure","comment":"The objects thrown by the default failure handler. ","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"13"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"message","id":"message","line":"9"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"message","refId":"unittest.matcher/TestFailure/message"},"kind":"param","name":"message","id":"message"}],"line":"11"}],"uri":"doc_diff/bin/packages/unittest/src/expect.dart","line":"8"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Description","refId":"unittest.matcher/Description"}],"kind":"class","name":"StringDescription","id":"StringDescription","comment":"\nThe default implementation of IDescription. This should rarely need\nsubstitution, although conceivably it is a place where other languages\ncould be supported.\n","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"Get the description as a string. ","line":"23"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"add","id":"add1()","comment":"Append [text] to the description.  ","children":[{"kind":"param","name":"text","id":"text"}],"line":"26"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"replace","id":"replace1()","comment":"Change the value of the description. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"text","id":"text"}],"line":"32"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"addDescriptionOf","id":"addDescriptionOf1()","comment":"\nAppends a description of [value]. If it is an IMatcher use its\ndescribe method; if it is a string use its literal value after\nescaping any embedded control characters; otherwise use its\ntoString() value and wrap it in angular \"quotes\".\n","children":[{"kind":"param","name":"value","id":"value"}],"line":"43"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"addAll","id":"addAll4()","comment":"\nAppend an [Iterable] [list] of objects to the description, using the\nspecified [separator] and framing the list with [start]\nand [end].\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"separator","id":"separator"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"list","id":"list","line":"58"}],"line":"57"},{"kind":"method","name":"_addEscapedString","id":"_addEscapedString1()","comment":"Escape the control characters in [string] so that they are visible. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"string","id":"string"}],"isPrivate":true,"line":"73"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"20"},{"kind":"variable","name":"_out","id":"_out","isPrivate":true,"line":"13"},{"kind":"constructor","name":"","id":"1()","comment":"Initialize the description with initial contents [init]. ","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"''","isOptional":true,"kind":"param","name":"init","id":"init"}],"line":"16"}],"uri":"doc_diff/bin/packages/unittest/src/description.dart","line":"12"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"CustomMatcher","id":"CustomMatcher","comment":"\nA useful utility class for implementing other matchers through inheritance.\nDerived classes should call the base constructor with a feature name and\ndescription, and an instance matcher, and should implement the\n[featureValueOf] abstract method.\n\nThe feature description will typically describe the item and the feature,\nwhile the feature name will just name the feature. For example, we may\nhave a Widget class where each Widget has a price; we could make a\n[CustomMatcher] that can make assertions about prices with:\n\n    class HasPrice extends CustomMatcher {\n      const HasPrice(matcher) :\n          super(\"Widget with price that is\", \"price\", matcher);\n      featureValueOf(actual) => actual.price;\n    }\n\nand then use this for example like:\n\n     expect(inventoryItem, new HasPrice(greaterThan(0)));\n","children":[{"kind":"method","name":"featureValueOf","id":"featureValueOf1()","comment":"Override this to extract the interesting feature.","children":[{"kind":"param","name":"actual","id":"actual"}],"line":"870"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"872"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"879"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"883"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"883"}],"line":"882"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_featureDescription","id":"_featureDescription","isPrivate":true,"line":"862"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_featureName","id":"_featureName","isPrivate":true,"line":"863"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isFinal":true,"kind":"variable","name":"_matcher","id":"_matcher","isPrivate":true,"line":"864"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_featureDescription","refId":"unittest.matcher/CustomMatcher/_featureDescription"},"kind":"param","name":"_featureDescription","id":"_featureDescription","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_featureName","refId":"unittest.matcher/CustomMatcher/_featureName"},"kind":"param","name":"_featureName","id":"_featureName","isPrivate":true},{"kind":"param","name":"matcher","id":"matcher"}],"line":"866"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"861"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_Predicate","id":"_Predicate","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"834"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"836"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isFinal":true,"kind":"variable","name":"_matcher","id":"_matcher","isPrivate":true,"line":"829"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_description","id":"_description","isPrivate":true,"line":"830"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"initializedField":{"name":"_matcher","refId":"unittest.matcher/_Predicate/_matcher"},"kind":"param","name":"_matcher","id":"_matcher","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_description","refId":"unittest.matcher/_Predicate/_description"},"kind":"param","name":"_description","id":"_description","isPrivate":true}],"line":"832"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"827"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_In","id":"_In","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"803"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"814"},{"isFinal":true,"kind":"variable","name":"_expected","id":"_expected","isPrivate":true,"line":"799"},{"kind":"constructor","name":"","id":"1()","children":[{"initializedField":{"name":"_expected","refId":"unittest.matcher/_In/_expected"},"kind":"param","name":"_expected","id":"_expected","isPrivate":true}],"line":"801"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"797"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_Contains","id":"_Contains","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"762"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"777"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"781"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"781"}],"line":"780"},{"isFinal":true,"kind":"variable","name":"_expected","id":"_expected","isPrivate":true,"line":"758"},{"kind":"constructor","name":"","id":"1()","children":[{"initializedField":{"name":"_expected","refId":"unittest.matcher/_Contains/_expected"},"kind":"param","name":"_expected","id":"_expected","isPrivate":true}],"line":"760"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"756"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_HasLength","id":"_HasLength","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"715"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"727"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"732"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"732"}],"line":"731"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isFinal":true,"kind":"variable","name":"_matcher","id":"_matcher","isPrivate":true,"line":"712"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"defaultValue":"null","isOptional":true,"kind":"param","name":"matcher","id":"matcher"}],"line":"713"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"711"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_IsList","id":"_IsList","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"701"},{"kind":"constructor","name":"","id":"0()","line":"700"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"699"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_IsMap","id":"_IsMap","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"693"},{"kind":"constructor","name":"","id":"0()","line":"692"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"691"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_CyclicInitializationError","id":"_CyclicInitializationError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"685"},{"kind":"constructor","name":"","id":"0()","line":"684"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"683"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_AbstractClassInstantiationError","id":"_AbstractClassInstantiationError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"673"},{"kind":"constructor","name":"","id":"0()","line":"671"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"670"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_ConcurrentModificationError","id":"_ConcurrentModificationError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"659"},{"kind":"constructor","name":"","id":"0()","line":"658"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"657"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_NullThrownError","id":"_NullThrownError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"647"},{"kind":"constructor","name":"","id":"0()","line":"646"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"645"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_FallThroughError","id":"_FallThroughError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"635"},{"kind":"constructor","name":"","id":"0()","line":"634"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"633"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_StateError","id":"_StateError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"623"},{"kind":"constructor","name":"","id":"0()","line":"622"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"621"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_UnsupportedError","id":"_UnsupportedError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"611"},{"kind":"constructor","name":"","id":"0()","line":"609"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"608"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_UnimplementedError","id":"_UnimplementedError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"599"},{"kind":"constructor","name":"","id":"0()","line":"598"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"597"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_NoSuchMethodError","id":"_NoSuchMethodError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"587"},{"kind":"constructor","name":"","id":"0()","line":"586"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"585"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_RangeError","id":"_RangeError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"575"},{"kind":"constructor","name":"","id":"0()","line":"574"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"573"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_ArgumentError","id":"_ArgumentError","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"563"},{"kind":"constructor","name":"","id":"0()","line":"562"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"561"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_Exception","id":"_Exception","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"551"},{"kind":"constructor","name":"","id":"0()","line":"550"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"549"},{"superclass":{"name":"TypeMatcher","refId":"unittest.matcher/TypeMatcher"},"kind":"class","name":"_FormatException","id":"_FormatException","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"540"},{"kind":"constructor","name":"","id":"0()","line":"539"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"538"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isAbstract":true,"kind":"class","name":"TypeMatcher","id":"TypeMatcher","children":[{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"527"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_name","id":"_name","isPrivate":true,"line":"525"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_name","refId":"unittest.matcher/TypeMatcher/_name"},"kind":"param","name":"_name","id":"_name","isPrivate":true}],"line":"526"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"524"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_ReturnsNormally","id":"_ReturnsNormally","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"f","id":"f"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"479"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"489"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"493"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"494"}],"line":"492"},{"kind":"constructor","name":"","id":"0()","line":"477"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"476"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"Throws","id":"Throws","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"412"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"450"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"459"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"460"}],"line":"458"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isFinal":true,"kind":"variable","name":"_matcher","id":"_matcher","isPrivate":true,"line":"407"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isOptional":true,"kind":"param","name":"matcher","id":"matcher"}],"line":"409"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"406"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"isInstanceOf","id":"isInstanceOf","comment":"\nReturns a matcher that matches if an object is an instance\nof [type] (or a subtype).\n\nAs types are not first class objects in Dart we can only\napproximate this test by using a generic wrapper class.\n\nFor example, to test whether 'bar' is an instance of type\n'Foo', we would write:\n\n    expect(bar, new isInstanceOf<Foo>());\n\nTo get better error message, supply a name when creating the\nType wrapper; e.g.:\n\n    expect(bar, new isInstanceOf<Foo>('Foo'));\n\nNote that this does not currently work in dart2js; it will\nmatch any type, and isNot(new isInstanceof<T>()) will always\nfail. This is because dart2js currently ignores template type\nparameters.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"obj","id":"obj"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"357"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"359"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_name","id":"_name","isPrivate":true,"line":"355"},{"kind":"constructor","name":"","id":"1()","children":[{"defaultValue":"'specified type'","isOptional":true,"kind":"param","name":"name","id":"name"}],"line":"356"},{"kind":"typeparam","name":"T","id":"T"}],"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"354"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_IsAnything","id":"_IsAnything","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"327"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"328"},{"kind":"constructor","name":"","id":"0()","line":"326"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"325"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_StringEqualsMatcher","id":"_StringEqualsMatcher","comment":"A special equality matcher for strings. ","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"252"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"254"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"258"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"258"}],"line":"257"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_escape","id":"_escape1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"}],"isPrivate":true,"line":"300"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_writeLeading","id":"_writeLeading3()","children":[{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"kind":"param","name":"buff","id":"buff"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"}],"isPrivate":true,"line":"303"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"_writeTrailing","id":"_writeTrailing3()","children":[{"ref":{"name":"StringBuffer","refId":"dart.core/StringBuffer"},"kind":"param","name":"buff","id":"buff"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"s","id":"s"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"}],"isPrivate":true,"line":"312"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"showActualValue","id":"showActualValue","line":"250"},{"ref":{"name":"String","refId":"dart.core/String"},"isFinal":true,"kind":"variable","name":"_value","id":"_value","isPrivate":true,"line":"246"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_value","refId":"unittest.matcher/_StringEqualsMatcher/_value"},"kind":"param","name":"_value","id":"_value","isPrivate":true}],"line":"248"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"245"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_DeepMatcher","id":"_DeepMatcher","children":[{"returnType":{"name":"List","refId":"dart.core/List"},"kind":"method","name":"_compareIterables","id":"_compareIterables5()","children":[{"kind":"param","name":"expected","id":"expected"},{"kind":"param","name":"actual","id":"actual"},{"kind":"param","name":"matcher","id":"matcher"},{"kind":"param","name":"depth","id":"depth"},{"kind":"param","name":"location","id":"location"}],"isPrivate":true,"line":"101"},{"returnType":{"name":"List","refId":"dart.core/List"},"kind":"method","name":"_recursiveMatch","id":"_recursiveMatch4()","children":[{"kind":"param","name":"expected","id":"expected"},{"kind":"param","name":"actual","id":"actual"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"param","name":"location","id":"location"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"depth","id":"depth"}],"isPrivate":true,"line":"129"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_match","id":"_match3()","children":[{"kind":"param","name":"expected","id":"expected"},{"kind":"param","name":"actual","id":"actual"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"isPrivate":true,"line":"204"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"222"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"225"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"229"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"229"}],"line":"228"},{"isFinal":true,"kind":"variable","name":"_expected","id":"_expected","isPrivate":true,"line":"94"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_limit","id":"_limit","isPrivate":true,"line":"95"},{"kind":"variable","name":"count","id":"count","line":"96"},{"kind":"constructor","name":"","id":"2()","children":[{"initializedField":{"name":"_expected","refId":"unittest.matcher/_DeepMatcher/_expected"},"kind":"param","name":"_expected","id":"_expected","isPrivate":true},{"defaultValue":"1000","isOptional":true,"kind":"param","name":"limit","id":"limit"}],"line":"98"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"93"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_IsSameAs","id":"_IsSameAs","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"77"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"79"},{"isFinal":true,"kind":"variable","name":"_expected","id":"_expected","isPrivate":true,"line":"75"},{"kind":"constructor","name":"","id":"1()","children":[{"initializedField":{"name":"_expected","refId":"unittest.matcher/_IsSameAs/_expected"},"kind":"param","name":"_expected","id":"_expected","isPrivate":true}],"line":"76"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"74"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_IsFalse","id":"_IsFalse","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"63"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"64"},{"kind":"constructor","name":"","id":"0()","line":"62"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"61"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_IsTrue","id":"_IsTrue","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"56"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"57"},{"kind":"constructor","name":"","id":"0()","line":"55"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"54"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_IsNotNull","id":"_IsNotNull","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"43"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"44"},{"kind":"constructor","name":"","id":"0()","line":"42"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"41"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_IsNull","id":"_IsNull","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"36"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"37"},{"kind":"constructor","name":"","id":"0()","line":"35"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"34"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_Empty","id":"_Empty","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"15"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"24"},{"kind":"constructor","name":"","id":"0()","line":"14"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/core_matchers.dart","line":"13"},{"superclass":{"name":"_IterableMatcher","refId":"unittest.matcher/_IterableMatcher"},"kind":"class","name":"_PairwiseCompare","id":"_PairwiseCompare","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"237"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"254"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"258"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"258"}],"line":"257"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"variable","name":"_expected","id":"_expected","isPrivate":true,"line":"231"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"variable","name":"_comparator","id":"_comparator","isPrivate":true,"line":"232"},{"ref":{"name":"String","refId":"dart.core/String"},"kind":"variable","name":"_description","id":"_description","isPrivate":true,"line":"233"},{"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"initializedField":{"name":"_expected","refId":"unittest.matcher/_PairwiseCompare/_expected"},"kind":"param","name":"_expected","id":"_expected","isPrivate":true},{"ref":{"name":"Function","refId":"dart.core/Function"},"initializedField":{"name":"_comparator","refId":"unittest.matcher/_PairwiseCompare/_comparator"},"kind":"param","name":"_comparator","id":"_comparator","isPrivate":true},{"ref":{"name":"String","refId":"dart.core/String"},"initializedField":{"name":"_description","refId":"unittest.matcher/_PairwiseCompare/_description"},"kind":"param","name":"_description","id":"_description","isPrivate":true}],"line":"235"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"230"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_UnorderedMatches","id":"_UnorderedMatches","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_test","id":"_test1()","children":[{"kind":"param","name":"item","id":"item"}],"isPrivate":true,"line":"168"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"mismatchState","id":"mismatchState"}],"line":"207"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"209"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"216"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"216"}],"line":"215"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Matcher","refId":"unittest.matcher/Matcher"}]},"isFinal":true,"kind":"variable","name":"_expected","id":"_expected","isPrivate":true,"line":"163"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"expected","id":"expected"}],"line":"165"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"162"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"isAbstract":true,"kind":"class","name":"_IterableMatcher","id":"_IterableMatcher","comment":"\nIterable matchers match against [Iterable]s. We add this intermediate\nclass to give better mismatch error messages than the base Matcher class.\n","children":[{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"141"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"141"}],"line":"140"},{"kind":"constructor","name":"","id":"0()","line":"139"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"138"},{"superclass":{"name":"_UnorderedMatches","refId":"unittest.matcher/_UnorderedMatches"},"kind":"class","name":"_UnorderedEquals","id":"_UnorderedEquals","children":[{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"127"},{"ref":{"name":"List","refId":"dart.core/List"},"isFinal":true,"kind":"variable","name":"_expectedValues","id":"_expectedValues","isPrivate":true,"line":"121"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"expected","id":"expected"}],"line":"123"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"120"},{"superclass":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"class","name":"_OrderedEquals","id":"_OrderedEquals","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"95"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"98"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"102"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"102"}],"line":"101"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"isFinal":true,"kind":"variable","name":"_expected","id":"_expected","isPrivate":true,"line":"88"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"_matcher","id":"_matcher","isPrivate":true,"line":"89"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"initializedField":{"name":"_expected","refId":"unittest.matcher/_OrderedEquals/_expected"},"kind":"param","name":"_expected","id":"_expected","isPrivate":true}],"line":"91"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"87"},{"superclass":{"name":"_IterableMatcher","refId":"unittest.matcher/_IterableMatcher"},"kind":"class","name":"_AnyElement","id":"_AnyElement","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"71"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"75"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"_matcher","id":"_matcher","isPrivate":true,"line":"67"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"initializedField":{"name":"_matcher","refId":"unittest.matcher/_AnyElement/_matcher"},"kind":"param","name":"_matcher","id":"_matcher","isPrivate":true}],"line":"69"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"66"},{"superclass":{"name":"_IterableMatcher","refId":"unittest.matcher/_IterableMatcher"},"kind":"class","name":"_EveryElement","id":"_EveryElement","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"matches","id":"matches2()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState"}],"line":"18"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describe","id":"describe1()","children":[{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"description","id":"description"}],"line":"33"},{"returnType":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"method","name":"describeMismatch","id":"describeMismatch4()","children":[{"kind":"param","name":"item","id":"item"},{"ref":{"name":"Description","refId":"unittest.matcher/Description"},"kind":"param","name":"mismatchDescription","id":"mismatchDescription"},{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"matchState","id":"matchState","line":"37"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"verbose","id":"verbose","line":"37"}],"line":"36"},{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"kind":"variable","name":"_matcher","id":"_matcher","isPrivate":true,"line":"14"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Matcher","refId":"unittest.matcher/Matcher"},"initializedField":{"name":"_matcher","refId":"unittest.matcher/_EveryElement/_matcher"},"kind":"param","name":"_matcher","id":"_matcher","isPrivate":true}],"line":"16"}],"isPrivate":true,"uri":"doc_diff/bin/packages/unittest/src/iterable_matchers.dart","line":"13"}],"uri":"doc_diff/bin/packages/unittest/matcher.dart","line":"21"}