{"dependencies":[{"kind":"library","name":"dart:core","id":"dart.core","comment":"\n\nBuilt-in types, collections,\nand other core functionality for every Dart program.\n\nThis library is automatically imported.\n\nSome classes in this library,\nsuch as [String] and [num],\nsupport Dart's built-in data types.\nOther classes, such as [List] and [Map], provide data structures\nfor managing collections of objects.\nAnd still other classes represent commonly used types of data\nsuch as URIs, dates and times, and errors.\n\n## Numbers and booleans\n\n[int] and [double] provide support for Dart's built-in numerical data types:\nintegers and double-precision floating point numbers, respectively.\nAn object of type [bool] is either true or false.\nVariables of these types can be constructed from literals:\n\n    int meaningOfLife = 42;\n    double valueOfPi  = 3.141592;\n    bool visible      = true;\n\n## Strings and regular expressions\n\nA [String] is immutable and represents a sequence of characters.\n\n    String shakespeareQuote = \"All the world's a stage, ...\";\n\n[StringBuffer] provides a way to construct strings efficiently.\n\n    StringBuffer moreShakespeare = new StringBuffer();\n    moreShakespeare.write('And all the men and women ');\n    moreShakespeare.write('merely players; ...');\n\nThe String and StringBuffer classes implement string concatenation,\ninterpolation, and other string manipulation features.\n\n    String philosophy = 'Live on ';\n    String get palindrome => philosophy + philosophy.split('').reversed.join();\n\n[RegExp] implements Dart regular expressions,\nwhich provide a grammar for matching patterns within text.\nFor example, here's a regular expression that matches\na string of one or more digits:\n\n    var numbers = new RegExp(r'\\d+');\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n## Collections\n\nThe dart:core library provides basic collections,\nsuch as [List], [Map], and [Set].\n\nA List is an ordered collection of objects, with a length.\nLists are sometimes called arrays.\nUse a List when you need to access objects by index.\n\n    List superheroes = [ 'Batman', 'Superman', 'Harry Potter' ];\n\nA Set is an unordered collection of unique objects.\nYou cannot get an item by index (position).\nAdding a duplicate item has no effect.\n\n    Set villains = new Set();\n    villains.add('Joker');\n    villains.addAll( ['Lex Luther', 'Voldemort'] );\n\nA Map is an unordered collection of key-value pairs.\nMaps are sometimes called associative arrays because\nmaps associate a key to some value for easy retrieval.\nKeys are unique.\nUse a Map when you need to access objects\nby a unique identifier.\n\n    Map sidekicks = { 'Batman': 'Robin',\n                      'Superman': 'Lois Lane',\n                      'Harry Potter': 'Ron and Hermione' };\n\nIn addition to these classes,\ndart:core contains [Iterable],\nan interface that defines functionality\ncommon in collections of objects.\nExamples include the ability\nto run a function on each element in the collection,\nto apply a test to each element,\nto retrieve an object, and to determine length.\n\nIterable is implemented by List and Set,\nand used by Map for its keys and values.\n\nFor other kinds of collections, check out the\n[dart:collection](#dart-collection) library.\n\n## Date and time\n\nUse [DateTime] to represent a point in time\nand [Duration] to represent a span of time.\n\nYou can create DateTime objects with constructors\nor by parsing a correctly formatted string.\n\n    DateTime now = new DateTime.now();\n    DateTime berlinWallFell = new DateTime(1989, 11, 9);\n    DateTime moonLanding = DateTime.parse(\"1969-07-20\");\n\nCreate a Duration object specifying the individual time units.\n\n    Duration timeRemaining = new Duration(hours:56, minutes:14);\n\nIn addition to DateTime and Duration,\ndart:core contains the [Stopwatch] class for measuring elapsed time.\n\n## Uri\n\nA [Uri] object represents a uniform resource identifier,\nwhich identifies a resource on the web.\n\n    Uri dartlang = Uri.parse('http://dartlang.org/');\n\n## Errors\n\nThe [Error] class represents the occurrence of an error\nduring runtime.\nSubclasses of this class represent specific kinds of errors.\n\n## Other documentation\n\nFor more information about how to use the built-in types, refer to\n[Built-in Types](http://www.dartlang.org/docs/dart-up-and-running/contents/ch02.html#built-in-types)\nin Chapter 2 of\n[Dart: Up and Running](http://www.dartlang.org/docs/dart-up-and-running/).\n\nAlso, see\n[dart:core - Numbers, Collections, Strings, and More](http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-dartcore---strings-collections-and-more)\nfor more coverage of classes in this package.\n\nThe\n[Dart Language Specification](http://www.dartlang.org/docs/spec/)\nprovides technical details.\n","children":[{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"isAbstract":true,"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"}],"kind":"class","name":"Set","id":"Set","comment":"\nA collection of objects in which each object can occur only once.\n\nThat is, for each object of the element type, the object is either considered\nto be in the set, or to _not_ be in the set.\n\nSet implementations may consider some elements indistinguishable. These\nelements are treated as being the same for any operation on the set.\n\nThe default `Set` implementation, [LinkedHashSet], considers objects\nindistinguishable if they are equal with regard to [Object.operator==].\n\nSets may be either ordered or unordered. [HashSet] is unordered and\ndoesn't guarantee anything about the order that elements are accessed in by\niteration. [LinkedHashSet] iterates in the insertion order of its elements.\n\nIt is generally not allowed to modify the set (add or remove elements) while\nan operation on the set is being performed, for example during a call to\n[forEach] or [containsAll]. Nor is it allowed to modify the set while\niterating either the set itself or any `Iterable` that is backed by the set,\nsuch as the ones returned by methods like [where] and [map].\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if [value] is in the set.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"59"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds [value] into the set. Returns `true` if [value] was added to the set.\n\nIf [value] already exists, the set is not changed and `false` is returned.\n","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"kind":"param","name":"value","id":"value"}],"line":"66"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAdds all of [elements] to this Set.\n\nEquivalent to adding each element in [elements] using [add],\nbut some collections may be able to optimize it.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"elements","id":"elements"}],"line":"74"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves [value] from the set. Returns true if [value] was\nin the set. Returns false otherwise. The method has no effect\nif [value] value was not in the set.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"81"},{"returnType":{"name":"E","refId":"dart.core/Set/E"},"kind":"method","name":"lookup","id":"lookup1()","comment":"\nIf an object equal to [object] is in the set, return it.\n\nChecks if there is an object in the set that is equal to [object].\nIf so, that object is returned, otherwise returns null.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"89"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll1()","comment":"\nRemoves each element of [elements] from this set.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"elements","id":"elements"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainAll","id":"retainAll1()","comment":"\nRemoves all elements of this set that are not elements in [elements].\n\nChecks for each element of [elements] whether there is an element in this\nset that is equal to it (according to `this.contains`), and if so, the\nequal element in this set is retained, and elements that are not equal\nto any element in `elements` are removed.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"elements","id":"elements"}],"line":"104"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\nRemoves all elements of this set that satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/set.dart","line":"109"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"109"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\nRemoves all elements of this set that fail to satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/set.dart","line":"114"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"114"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsAll","id":"containsAll1()","comment":"\nReturns whether this Set contains all the elements of [other].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"other","id":"other"}],"line":"119"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"method","name":"intersection","id":"intersection1()","comment":"\nReturns a new set which is the intersection between this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare also elements of `other` according to `other.contains`.\n","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"other","id":"other"}],"line":"127"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"method","name":"union","id":"union1()","comment":"\nReturns a new set which contains all the elements of this set and [other].\n\nThat is, the returned set contains all the elements of this `Set` and\nall the elements of [other].\n","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"other","id":"other"}],"line":"135"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"method","name":"difference","id":"difference1()","comment":"\nReturns a new set with the the elements of this that are not in [other].\n\nThat is, the returned set contains all the elements of this `Set` that\nare not elements of [other] according to `other.contains`.\n","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"other","id":"other"}],"line":"143"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all elements in the set.\n","line":"148"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"constructor","name":"","id":"0()","comment":"\nCreates an empty [Set].\n\nThe created `Set` is a [LinkedHashSet]. As such, it considers elements that\nare equal (using `==`) to be indistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","line":"37"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an empty identity [Set].\n\nThe created `Set` is a [LinkedHashSet] that uses identity as equality\nrelation.\n","line":"45"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a [Set] that contains all elements of [other].\n\nThe created `Set` is a [LinkedHashSet]. As such, it considers elements that\nare equal (using `==`) to be undistinguishable, and requires them to\nhave a compatible [Object.hashCode] implementation.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"kind":"param","name":"other","id":"other"}],"line":"54"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/set.dart","line":"29"},{"kind":"class","name":"Object","id":"Object","comment":"\nThe base class for all Dart objects.\n\nBecause Object is the root of the Dart class hierarchy,\nevery other Dart class is a subclass of Object.\n\nWhen you define a class, you should override [toString]\nto return a string describing an instance of that class.\nYou might also need to define [hashCode] and [==], as described in the\n[Implementing map keys]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-implementing-map-keys)\nsection of the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html).\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isOperator":true,"kind":"method","name":"==","id":"==1()","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nOverride this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:\n\n * Total: It must return a boolean for all arguments. It should never throw\n   or return `null`.\n\n * Reflexive: For all objects `o`, `o == o` must be true.\n\n * Symmetric: For all objects `o1` and `o2`, `o1 == o2` and `o2 == o1` must\n   either both be true, or both be false.\n\n * Transitive: For all objects `o1`, `o2`, and `o3`, if `o1 == o2` and\n   `o2 == o3` are true, then `o1 == o3` must be true.\n\nThe method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","children":[{"kind":"param","name":"other","id":"other"}],"line":"59"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of this object.\n","line":"78"},{"kind":"method","name":"noSuchMethod","id":"noSuchMethod1()","comment":"\n[noSuchMethod] is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[NoSuchMethodError].\n","children":[{"ref":{"name":"Invocation","refId":"dart.core/Invocation"},"kind":"param","name":"invocation","id":"invocation"}],"line":"90"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"hashCode","id":"hashCode","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"73"},{"ref":{"name":"Type","refId":"dart.core/Type"},"kind":"property","name":"runtimeType","id":"runtimeType","comment":"\nA representation of the runtime type of the object.\n","line":"95"},{"kind":"constructor","name":"","id":"0()","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"29"}],"uri":"dart-sdk/lib/core/object.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Map","id":"Map","comment":"\nAn unordered collection of key-value pairs, from which you retrieve a value\nby using its associated key.\n\nEach key can occur at most once in a map.\n\nIt is generally not allowed to modify the map (add or remove keys) while\nan operation is being performed on the map, for example in functions called\nduring a [forEach] or [putIfAbsent] call.\nModifying the map while iterating the keys or values will also most likely\nbreak the iteration.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsValue","id":"containsValue1()","comment":"\nReturns true if this map contains the given value.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"109"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsKey","id":"containsKey1()","comment":"\nReturns true if this map contains the given key.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"114"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse [containsKey] to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"122"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nAssociates the [key] with the given [value].\n","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"V","refId":"dart.core/Map/V"},"kind":"param","name":"value","id":"value"}],"line":"127"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"method","name":"putIfAbsent","id":"putIfAbsent2()","comment":"\nIf [key] is not associated to a value, calls [ifAbsent] and\nupdates the map by mapping [key] to the value returned by\n[ifAbsent]. Returns the value in the map.\n\n    Map<String, int> scores = {'Bob': 36};\n    for (var key in ['Bob', 'Rohan', 'Sophena']) {\n      scores.putIfAbsent(key, () => key.length);\n    }\n    scores['Bob'];      // 36\n    scores['Rohan'];    //  5\n    scores['Sophena'];  //  7\n\nThe code that [ifAbsent] executes must not add or remove keys.\n","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"144"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAdds all key-value pairs of [other] to this map.\n\nIf a key of [other] is already in this map, its value is overwritten.\n\nThe operation is equivalent to doing `this[key] = value` for each key\nand associated value in other. It iterates over [other], which must\ntherefore not change during the iteration.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"other","id":"other"}],"line":"155"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the association for the given [key]. Returns the value for\n[key] in the map or null if [key] is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"163"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all pairs from the map.\n","line":"168"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies [f] to each {key, value} pair of the map.\n\nIt is an error to add or remove keys from the map during iteration.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/core/map.dart","line":"175"},{"ref":{"name":"V","refId":"dart.core/Map/V"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/map.dart","line":"175"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"175"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.core/Map/K"}]},"kind":"property","name":"keys","id":"keys","comment":"\nThe keys of [this].\n\nThe returned iterable has efficient `length` and `contains` operations,\nbased on [length] and [containsKey] of the map.\n","line":"183"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.core/Map/V"}]},"kind":"property","name":"values","id":"values","comment":"\nThe values of [this].\n\nThe returned iterable has an efficient `length` method based on the\n[length] of the map.\n","line":"191"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nThe number of key-value pairs in the map.\n","line":"196"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no key-value pair in the map.\n","line":"201"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one key-value pair in the map.\n","line":"206"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"","id":"0()","comment":"\nCreates a Map instance with the default implementation, [LinkedHashMap].\n\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n","line":"26"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a [LinkedHashMap] instance that contains all key-value pairs of\n[other].\n\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"other","id":"other"}],"line":"35"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an identity map with the default implementation, [LinkedHashMap].\n\nThe returned map allows `null` as a key.\n","line":"42"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"fromIterable","id":"fromIterable3()","comment":"\nCreates a Map instance in which the keys and values are computed from the\n[iterable].\n\nThe created map is a [LinkedHashMap].\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n\nFor each element of the [iterable] this constructor computes a key-value\npair, by applying [key] and [value] respectively.\n\nThe example below creates a new Map from a List. The keys of `map` are\n`list` values converted to strings, and the values of the `map` are the\nsquares of the `list` values:\n\n    List<int> list = [1, 2, 3];\n    Map<String, int> map = new Map.fromIterable(list,\n        key: (item) => item.toString(),\n        value: (item) => item * item));\n\n    map['1'] + map['2']; // 1 + 4\n    map['3'] - map['2']; // 9 - 4\n\nIf no values are specified for [key] and [value] the default is the\nidentity function.\n\nIn the following example, the keys and corresponding values of `map`\nare `list` values:\n\n    map = new Map.fromIterable(list);\n    map[1] + map[2]; // 1 + 2\n    map[3] - map[2]; // 3 - 2\n\nThe keys computed by the source [iterable] do not need to be unique. The\nlast occurrence of a key will simply overwrite any previous value.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"key","id":"key","children":[{"returnType":{"name":"K","refId":"dart.core/Map/K"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/map.dart","line":"81"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"81"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"value","id":"value","children":[{"returnType":{"name":"V","refId":"dart.core/Map/V"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/map.dart","line":"81"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"81"}],"line":"80"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"kind":"constructor","name":"fromIterables","id":"fromIterables2()","comment":"\nCreates a Map instance associating the given [keys] to [values].\n\nThe created map is a [LinkedHashMap].\nA `LinkedHashMap` requires the keys to implement compatible\n`operator==` and `hashCode`, and it allows null as a key.\n\nThis constructor iterates over [keys] and [values] and maps each element of\n[keys] to the corresponding element of [values].\n\n    List<String> letters = ['b', 'c'];\n    List<String> words = ['bad', 'cat'];\n    Map<String, String> map = new Map.fromIterables(letters, words);\n    map['b'] + map['c'];  // badcat\n\nIf [keys] contains the same object multiple times, the last occurrence\noverwrites the previous value.\n\nIt is an error if the two [Iterable]s don't have the same length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.core/Map/K"}]},"kind":"param","name":"keys","id":"keys"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.core/Map/V"}]},"kind":"param","name":"values","id":"values"}],"line":"103"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"uri":"dart-sdk/lib/core/map.dart","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"},{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]}],"kind":"class","name":"List","id":"List","comment":"\nAn indexable collection of objects with a length.\n\nSubclasses of this class implement different kinds of lists.\nThe most common kinds of lists are:\n\n* Fixed-length list.\n  An error occurs when attempting to use operations\n  that can change the length of the list.\n\n* Growable list. Full implementation of the API defined in this class.\n\nThe default growable list, as returned by `new List()` or `[]`, keeps\nan internal buffer, and grows that buffer when necessary. This guarantees\nthat a sequence of [add] operations will each execute in amortized constant\ntime. Setting the length directly may take time proportional to the new\nlength, and may change the internal capacity so that a following add\noperation will need to immediately increase the buffer capacity.\nOther list implementations may have different performance behavior.\n\nThe following code illustrates that some List implementations support\nonly a subset of the API.\n\n    List<int> fixedLengthList = new List(5);\n    fixedLengthList.length = 0;  // Error\n    fixedLengthList.add(499);    // Error\n    fixedLengthList[0] = 87;\n    List<int> growableList = [1, 2];\n    growableList.length = 0;\n    growableList.add(499);\n    growableList[0] = 87;\n\nLists are [Iterable]. Iteration occurs over values in index order. Changing\nthe values does not affect iteration, but changing the valid\nindices&mdash;that is, changing the list's length&mdash;between iteration\nsteps causes a [ConcurrentModificationError]. This means that only growable\nlists can throw ConcurrentModificationError. If the length changes\ntemporarily and is restored before continuing the iteration, the iterator\ndoes not detect it.\n\nIt is generally not allowed to modify the list's length (adding or removing\nelements) while an operation on the list is being performed,\nfor example during a call to [forEach] or [sort].\nChanging the list's length while it is being iterated, either by iterating it\ndirectly or through iterating an `Iterable` that is backed by the list, will\nbreak the iteration.\n","children":[{"returnType":{"name":"E","refId":"dart.core/List/E"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","comment":"\nReturns the object at the given [index] in the list\nor throws a [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"136"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"\nSets the value at the given [index] in the list to [value]\nor throws a [RangeError] if [index] is out of bounds.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"value","id":"value"}],"line":"142"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"length=","id":"length=1()","comment":"\nChanges the length of this list.\n\nIf [newLength] is greater than\nthe current length, entries are initialized to [:null:].\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLength","id":"newLength"}],"line":"159"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds [value] to the end of this list,\nextending the length by one.\n\nThrows an [UnsupportedError] if the list is fixed-length.\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"value","id":"value"}],"line":"167"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAppends all objects of [iterable] to the end of this list.\n\nExtends the length of the list by the number of objects in [iterable].\nThrows an [UnsupportedError] if this list is fixed-length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"175"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","comment":"\nSorts this list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    // Sort from shortest to longest.\n    numbers.sort((x, y) => x.length.compareTo(y.length));\n    numbers.join(', '); // 'one, two, four, three'\n\nThe default List implementations use [Comparable.compare] if\n[compare] is omitted.\n\n    List<int> nums = [13, 2, -11];\n    nums.sort();\n         nums.join(', '); // '-11, 2, 13'\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/core/list.dart","line":"199"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/core/list.dart","line":"199"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"199"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","comment":"\nShuffles the elements of this list randomly.\n","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"204"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","comment":"\nReturns the first index of [element] in this list.\n\nSearches the list from index [start] to the end of the list.\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\n    List<String> notes = ['do', 're', 'mi', 're'];\n    notes.indexOf('re');    // 1\n    notes.indexOf('re', 2); // 3\n\nReturns -1 if [element] is not found.\n\n    notes.indexOf('fa');    // -1\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"221"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index of [element] in this list.\n\nSearches the list backwards from index [start] to 0.\n\nThe first time an object [:o:] is encountered so that [:o == element:],\nthe index of [:o:] is returned.\n\n    List<String> notes = ['do', 're', 'mi', 're'];\n    notes.lastIndexOf('re', 2); // 1\n\nIf [start] is not provided, this method searches from the end of the\nlist./Returns\n\n    notes.lastIndexOf('re');  // 3\n\nReturns -1 if [element] is not found.\n\n    notes.lastIndexOf('fa');  // -1\n","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"start","id":"start"}],"line":"243"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all objects from this list;\nthe length of the list becomes zero.\n\nThrows an [UnsupportedError], and retains all objects, if this\nis a fixed-length list.\n","line":"252"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","comment":"\nInserts the object at position [index] in this list.\n\nThis increases the length of the list by one and shifts all objects\nat or after the index towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element"}],"line":"263"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","comment":"\nInserts all objects of [iterable] at position [index] in this list.\n\nThis increases the length of the list by the length of [iterable] and\nshifts all later objects towards the end of the list.\n\nAn error occurs if the [index] is less than 0 or greater than length.\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"274"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","comment":"\nOverwrites objects of `this` with the objects of [iterable], starting\nat position [index] in this list.\n\n    List<String> list = ['a', 'b', 'c'];\n    list.setAll(1, ['bee', 'sea']);\n    list.join(', '); // 'a, bee, sea'\n\nThis operation does not increase the length of `this`.\n\nThe [index] must be non-negative and no greater than [length].\n\nThe [iterable] must not have more elements than what can fit from [index]\nto [length].\n\nIf `iterable` is based on this list, its values may change /during/ the\n`setAll` operation.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"294"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemoves the first occurence of [value] from this list.\n\nReturns true if [value] was in the list, false otherwise.\n\n    List<String> parts = ['head', 'shoulders', 'knees', 'toes'];\n    parts.remove('head'); // true\n    parts.join(', ');     // 'shoulders, knees, toes'\n\nThe method has no effect if [value] was not in the list.\n\n    // Note: 'head' has already been removed.\n    parts.remove('head'); // false\n    parts.join(', ');     // 'shoulders, knees, toes'\n\nAn [UnsupportedError] occurs if the list is fixed-length.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"313"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"method","name":"removeAt","id":"removeAt1()","comment":"\nRemoves the object at position [index] from this list.\n\nThis method reduces the length of `this` by one and moves all later objects\ndown by one position.\n\nReturns the removed object.\n\nThe [index] must be in the range `0 ≤ index < length`.\n\nThrows an [UnsupportedError] if this is a fixed-length list. In that case\nthe list is not modified.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"328"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"method","name":"removeLast","id":"removeLast0()","comment":"\nPops and returns the last object in this list.\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","line":"335"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\nRemoves all objects from this list that satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    numbers.removeWhere((item) => item.length == 3);\n    numbers.join(', '); // 'three, four'\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/list.dart","line":"348"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"348"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\nRemoves all objects from this list that fail to satisfy [test].\n\nAn object [:o:] satisfies [test] if [:test(o):] is true.\n\n    List<String> numbers = ['one', 'two', 'three', 'four'];\n    numbers.retainWhere((item) => item.length == 3);\n    numbers.join(', '); // 'one, two'\n\nThrows an [UnsupportedError] if this is a fixed-length list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/list.dart","line":"361"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"361"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"sublist","id":"sublist2()","comment":"\nReturns a new list containing the objects from [start] inclusive to [end]\nexclusive.\n\n    List<String> colors = ['red', 'green', 'blue', 'orange', 'pink'];\n    colors.sublist(1, 3); // ['green', 'blue']\n\nIf [end] is omitted, the [length] of `this` is used.\n\n    colors.sublist(1);  // ['green', 'blue', 'orange', 'pink']\n\nAn error occurs if [start] is outside the range `0` .. `length` or if\n[end] is outside the range `start` .. `length`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"377"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"getRange","id":"getRange2()","comment":"\nReturns an [Iterable] that iterates over the objects in the range\n[start] inclusive to [end] exclusive.\n\nAn error occurs if [end] is before [start].\n\nAn error occurs if the [start] and [end] are not valid ranges at the time\nof the call to this method. The returned [Iterable] behaves like\n`skip(start).take(end - start)`. That is, it does not throw exceptions\nif `this` changes size.\n\n    List<String> colors = ['red', 'green', 'blue', 'orange', 'pink'];\n    Iterable<String> range = colors.getRange(1, 4);\n    range.join(', ');  // 'green, blue, orange'\n    colors.length = 3;\n    range.join(', ');  // 'green, blue'\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"396"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","comment":"\nCopies the objects of [iterable], skipping [skipCount] objects first,\ninto the range [start], inclusive, to [end], exclusive, of the list.\n\n    List<int> list1 = [1, 2, 3, 4];\n    List<int> list2 = [5, 6, 7, 8, 9];\n    // Copies the 4th and 5th items in list2 as the 2nd and 3rd items\n    // of list1.\n    list1.setRange(1, 3, list2, 3);\n    list1.join(', '); // '1, 8, 9, 4'\n\nThe [start] and [end] indices must satisfy `0 ≤ start ≤ end ≤ length`.\nIf [start] equals [end], this method has no effect.\n\nThe [iterable] must have enough objects to fill the range from `start`\nto `end` after skipping [skipCount] objects.\n\nIf `iterable` is this list, the operation will copy the elements originally\nin the range from `skipCount` to `skipCount + (end - start)` to the\nrange `start` to `end`, even if the two ranges overlap.\n\nIf `iterable` depends on this list in some other way, no guarantees are\nmade.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"422"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive.\n\nThe [start] and [end] indices must be in the range\n`0 ≤ index ≤ length`, and `start ≤ end`.\n\nThrows an [UnsupportedError] if this is a fixed-length list. In that case\nthe list is not modified.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"433"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","comment":"\nSets the objects in the range [start] inclusive to [end] exclusive\nto the given [fillValue].\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.core/List/E"},"isOptional":true,"kind":"param","name":"fillValue","id":"fillValue"}],"line":"441"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","comment":"\nRemoves the objects in the range [start] inclusive to [end] exclusive\nand inserts the contents of [replacement] in its place.\n\n    List<int> list = [1, 2, 3, 4, 5];\n    list.replaceRange(1, 4, [6, 7]);\n    list.join(', '); // '1, 6, 7, 5'\n\nAn error occurs if [start]..[end] is not a valid range for `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"param","name":"replacement","id":"replacement"}],"line":"453"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.core/List/E"}]},"kind":"method","name":"asMap","id":"asMap0()","comment":"\nReturns an unmodifiable [Map] view of `this`.\n\nThe map uses the indices of this list as keys and the corresponding objects\nas values. The `Map.keys` [Iterable] iterates the indices of this list\nin numerical order.\n\n    List<String> words = ['fee', 'fi', 'fo', 'fum'];\n    Map<int, String> map = words.asMap();\n    map[0] + map[1];   // 'feefi';\n    map.keys.toList(); // [0, 1, 2, 3]\n","line":"467"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of objects in this list.\n\nThe valid indices for a list are `0` through `length - 1`.\n","line":"149"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"property","name":"reversed","id":"reversed","comment":"\nReturns an [Iterable] of the objects in this list in reverse order.\n","line":"180"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"","id":"1()","comment":"\nCreates a list of the given length.\n\nThe created list is fixed-length if [length] is provided.\n\n    List fixedLengthList = new List(3);\n    fixedLengthList.length;     // 3\n    fixedLengthList.length = 1; // Error\n\n\nThe list has length 0 and is growable if [length] is omitted.\n\n    List growableList = new List();\n    growableList.length; // 0;\n    growableList.length = 3;\n\nThe [length] must not be negative or null, if it is provided.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"length","id":"length"}],"line":"73"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"filled","id":"filled2()","comment":"\nCreates a fixed-length list of the given length, and initializes the\nvalue at each position with [fill]:\n\n    new List<int>.filled(3, 0); // [0, 0, 0]\n\nThe [length] must not be negative or null.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"E","refId":"dart.core/List/E"},"kind":"param","name":"fill","id":"fill"}],"line":"83"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"from","id":"from2()","comment":"\nCreates a list and initializes it using the contents of [other].\n\nThe [Iterator] of [other] provides the order of the objects.\n\nThis constructor returns a growable list if [growable] is true;\notherwise, it returns a fixed-length list.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"other","id":"other"},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"93"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"kind":"constructor","name":"generate","id":"generate3()","comment":"\nGenerates a list of values.\n\nCreates a list with [length] positions and fills it with values created by\ncalling [generator] for each index in the range `0` .. `length - 1`\nin increasing order.\n\n    new List<int>.generate(3, (int index) => index * index); // [0, 1, 4]\n\nThe created list is fixed-length unless [growable] is true.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"length","id":"length"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/List/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/list.dart","line":"118"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable","line":"119"}],"line":"118"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/list.dart","line":"54"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterator","id":"Iterator","comment":"\nAn interface for getting items, one at a time, from an object.\n\nThe for-in construct transparently uses Iterator to test for the end\nof the iteration, and to get each item (or _element_).\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe Iterator is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If no element is left, then [moveNext]\nreturns false.\n\nA typical usage of an Iterator looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n\n**See also:** [Iteration]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html#ch03-iteration)\nin the [library tour]\n(http://www.dartlang.org/docs/dart-up-and-running/contents/ch03.html)\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","line":"41"},{"ref":{"name":"E","refId":"dart.core/Iterator/E"},"kind":"property","name":"current","id":"current","comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","line":"50"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterator.dart","line":"33"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"Iterable","id":"Iterable","comment":"\nAn object that uses an [Iterator] to serve objects one at a time.\n\nYou can iterate over all objects served by an Iterable object\nusing the for-in loop construct.\nFor example, you can iterate over all of the keys in a [Map],\nbecause Map keys are iterable.\n\n    Map kidsBooks = {'Matilda': 'Roald Dahl',\n                     'Green Eggs and Ham': 'Dr Seuss',\n                     'Where the Wild Things Are': 'Maurice Sendak'};\n    for (var book in kidsBooks.keys) {\n      print('$book was written by ${kidsBooks[book]}');\n    }\n\nThe [List] class and the [Set] class implement this interface,\nas do classes in the [dart:collection](#dart-collection) library.\n\nYou can implement Iterable in your own class.\nIf you do, then an instance of your Iterable class\ncan be the right-hand side of a for-in construct.\n\nSome subclasss of `Iterable` can be modified. It is generally not allowed\nto modify such collections while they are being iterated. Doing so will break\nthe iteration, which is typically signalled by throwing a\n[ConcurrentModificationError] when it is detected.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","comment":"\nReturns a lazy [Iterable] where each element [:e:] of `this` is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"66"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"66"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"where","id":"where1()","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [test].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [test] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the returned [Iterable] will invoke the supplied\nfunction [test] multiple times on the same element.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"78"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"78"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","comment":"\nExpands each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable runs through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and calls [f] for each element\nof this every time it's iterated.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"89"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"89"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","comment":"\nReturns true if the collection contains an element equal to [element].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"94"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nApplies the function [f] to each element of this collection.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"99"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"99"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"reduce","id":"reduce1()","comment":"\nReduces a collection to a single value by iteratively combining elements\nof the collection using the provided function.\n\nExample of calculating the sum of an iterable:\n\n    iterable.reduce((value, element) => value + element);\n\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"110"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"kind":"method","name":"fold","id":"fold2()","comment":"\nReduces a collection to a single value by iteratively combining each\nelement of the collection with an existing value using the provided\nfunction.\n\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of an iterable:\n\n    iterable.fold(0, (prev, element) => prev + element);\n\n","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/core/iterable.dart","line":"126"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"126"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"126"}],"line":"125"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","comment":"\nReturns true if every elements of this collection satisify the\npredicate [test]. Returns `false` otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"132"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"132"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","comment":"\nConverts each element to a [String] and concatenates the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"141"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","comment":"\nReturns true if one element of this collection satisfies the\npredicate [test]. Returns false otherwise.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"151"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"151"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toList","id":"toList1()","comment":"\nCreates a [List] containing the elements of this [Iterable].\n\nThe elements are in iteration order. The list is fixed-length\nif [growable] is false.\n","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"159"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"toSet","id":"toSet0()","comment":"\nCreates a [Set] containing the elements of this [Iterable].\n","line":"164"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"take","id":"take1()","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if `this`\ncontains fewer than [n] elements.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"192"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","comment":"\nReturns an Iterable that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable starts iterating over the elements of `this`.\n\nWhen the iterator encounters an element `e` that does not satisfy [test],\nit discards `e` and moves into the finished state. That is, it does not\nget or provide any more elements.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"204"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"204"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skip","id":"skip1()","comment":"\nReturns an Iterable that skips the first [n] elements.\n\nIf `this` has fewer than [n] elements, then the resulting Iterable is\nempty.\n\nIt is an error if [n] is negative.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"214"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","comment":"\nReturns an Iterable that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new Iterator of the returned\nIterable iterates over all elements of `this`.\n\nAs long as the iterator's elements satisfy [test] they are\ndiscarded. Once an element does not satisfy the [test] the iterator stops\ntesting and uses every later element unconditionally. That is, the elements\nof the returned Iterable are the elements of `this` starting from the\nfirst element that does not satisfy [test].\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/core/iterable.dart","line":"228"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"228"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"firstWhere","id":"firstWhere2()","comment":"\nReturns the first element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"259"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"259"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"lastWhere","id":"lastWhere2()","comment":"\nReturns the last element that satisfies the given predicate [test].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"268"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"268"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","comment":"\nReturns the single element that satisfies [test]. If no or more than one\nelement match then a [StateError] is thrown.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/core/iterable.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"method","name":"elementAt","id":"elementAt1()","comment":"\nReturns the [index]th element.\n\nIf `this` has fewer than [index] elements throws a [RangeError].\n\nNote: if `this` does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in `this`.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"285"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"property","name":"iterator","id":"iterator","comment":"\nReturns an Iterator that iterates over this Iterable object.\n","line":"54"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","line":"172"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","comment":"\nReturns true if there is no element in this collection.\n","line":"177"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","comment":"\nReturns true if there is at least one element in this collection.\n","line":"182"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"first","id":"first","comment":"\nReturns the first element.\n\nIf `this` is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","line":"236"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"last","id":"last","comment":"\nReturns the last element.\n\nIf `this` is empty throws a [StateError].\n","line":"243"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"property","name":"single","id":"single","comment":"\nReturns the single element in `this`.\n\nIf `this` is empty or has more than one element throws a [StateError].\n","line":"250"},{"kind":"constructor","name":"","id":"0()","line":"35"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"kind":"constructor","name":"generate","id":"generate2()","comment":"\nCreates an Iterable that generates its elements dynamically.\n\nThe Iterators created by the Iterable count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an Iterable, [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"generator","id":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index","uri":"dart-sdk/lib/core/iterable.dart","line":"47"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"47"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/core/iterable.dart","line":"34"}],"uri":"dart-sdk/lib/core/core.dart","line":"153"},{"kind":"library","name":"dart:_collection-dev","id":"dart._collection.dev","children":[{"superclass":{"name":"ListBase","refId":"dart.collection/ListBase","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListBase/E"}]},"isAbstract":true,"interfaces":[{"name":"UnmodifiableListMixin","refId":"dart._collection.dev/UnmodifiableListMixin","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListBase/E"}]}],"kind":"class","name":"UnmodifiableListBase","id":"UnmodifiableListBase","children":[{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"param","name":"value","id":"value"}],"line":"102"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"length=","id":"length=1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLength","id":"newLength"}],"line":"108"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"at","id":"at"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"114"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"param","name":"value","id":"value"}],"line":"120"},{"returnType":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"method","name":"insert","id":"insert2()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"param","name":"value","id":"value"}],"line":"126"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"at","id":"at"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"132"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"138"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"144"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/_collection_dev/list.dart","line":"150"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"150"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/_collection_dev/list.dart","line":"156"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"156"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"isOptional":true,"kind":"param","name":"compare","id":"compare"}],"line":"162"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"168"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"This operation is not supported by an unmodifiable list. ","line":"174"},{"returnType":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"method","name":"removeAt","id":"removeAt1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"180"},{"returnType":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"method","name":"removeLast","id":"removeLast0()","comment":"This operation is not supported by an unmodifiable list. ","line":"186"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"192"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"198"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"204"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"isOptional":true,"kind":"param","name":"fillValue","id":"fillValue"}],"line":"210"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/_collection_dev/list.dart","line":"231"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]}],"kind":"class","name":"UnmodifiableListMixin","id":"UnmodifiableListMixin","comment":"\nMixin for an unmodifiable [List] class.\n\nThis overrides all mutating methods with methods that throw.\nThis mixin is intended to be mixed in on top of [ListMixin] on\nunmodifiable lists.\n","children":[{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"param","name":"value","id":"value"}],"line":"102"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"length=","id":"length=1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newLength","id":"newLength"}],"line":"108"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"at","id":"at"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"114"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"param","name":"value","id":"value"}],"line":"120"},{"returnType":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"method","name":"insert","id":"insert2()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"param","name":"value","id":"value"}],"line":"126"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"at","id":"at"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"132"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"138"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"144"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/_collection_dev/list.dart","line":"150"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"150"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/_collection_dev/list.dart","line":"156"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"156"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"isOptional":true,"kind":"param","name":"compare","id":"compare"}],"line":"162"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"168"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"This operation is not supported by an unmodifiable list. ","line":"174"},{"returnType":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"method","name":"removeAt","id":"removeAt1()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"180"},{"returnType":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"kind":"method","name":"removeLast","id":"removeLast0()","comment":"This operation is not supported by an unmodifiable list. ","line":"186"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"192"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"198"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"204"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","comment":"This operation is not supported by an unmodifiable list. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart._collection.dev/UnmodifiableListMixin/E"},"isOptional":true,"kind":"param","name":"fillValue","id":"fillValue"}],"line":"210"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/_collection_dev/list.dart","line":"99"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"EfficientLength","id":"EfficientLength","comment":"\nMarker interface for [Iterable] subclasses that have an efficient\n[length] implementation.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","comment":"\nReturns the number of elements in the iterable.\n\nThis is an efficient operation that doesn't require iterating through\nthe elements.\n","line":"18"}],"uri":"dart-sdk/lib/_collection_dev/iterable.dart","line":"11"}],"uri":"dart-sdk/lib/_collection_dev/collection_dev.dart","line":"5"}],"kind":"library","name":"dart:collection","id":"dart.collection","comment":"\nClasses and utilities that supplement the collection support in dart:core.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_defaultHashCode","id":"_defaultHashCode1()","comment":"Default function for hash-code computation in customized HashMaps ","children":[{"kind":"param","name":"a","id":"a"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/hash_map.dart","line":"10"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"_defaultEquals","id":"_defaultEquals2()","comment":"Default function for equality comparison in customized HashMaps ","children":[{"kind":"param","name":"a","id":"a"},{"kind":"param","name":"b","id":"b"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/hash_map.dart"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_iterablePartsToStrings","id":"_iterablePartsToStrings2()","comment":"Convert elments of [iterable] to strings and store them in [parts]. ","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"parts","id":"parts"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/iterable.dart","line":"419"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"_iterableToString","id":"_iterableToString1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/iterable.dart","line":"406"},{"ref":{"name":"Set","refId":"dart.core/Set"},"kind":"variable","name":"_toStringVisiting","id":"_toStringVisiting","comment":"A reusable set used to identify cyclic lists during toString() calls. ","isPrivate":true,"uri":"dart-sdk/lib/collection/list.dart"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"HashMap","refId":"dart.collection/HashMap","arguments":[{"name":"K","refId":"dart.collection/LinkedHashMap/K"},{"name":"V","refId":"dart.collection/LinkedHashMap/V"}]}],"kind":"class","name":"LinkedHashMap","id":"LinkedHashMap","comment":"\nA hash-table based implementation of [Map].\n\nKeys insertion order is remembered, and keys are iterated in insertion order.\nValues are iterated in their corresponding key's order.\n\nThe keys of a `LinkedHashMap` must have consistent [Object.operator==]\nand [Object.hashCode] implementations. This means that the `==` operator\nmust define a stable equivalence relation on the keys (reflexive,\nanti-symmetric, transitive, and consistent over time), and that `hashCode`\nmust be the same for objects that are considered equal by `==`.\n\nThe map allows `null` as a key.\n","children":[{"returnType":{"name":"LinkedHashMap","refId":"dart.collection/LinkedHashMap","arguments":[{"name":"K","refId":"dart.collection/LinkedHashMap/K"},{"name":"V","refId":"dart.collection/LinkedHashMap/V"}]},"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"equals","id":"equals","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.collection/LinkedHashMap/K"},"kind":"param","name":"key1","id":"key1","uri":"dart-sdk/lib/collection/linked_hash_map.dart","line":"22"},{"ref":{"name":"K","refId":"dart.collection/LinkedHashMap/K"},"kind":"param","name":"key2","id":"key2","uri":"dart-sdk/lib/collection/linked_hash_map.dart","line":"22"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"hashCode","id":"hashCode","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.collection/LinkedHashMap/K"},"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/collection/linked_hash_map.dart","line":"23"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"23"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"isValidKey","id":"isValidKey","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"potentialKey","id":"potentialKey","uri":"dart-sdk/lib/collection/linked_hash_map.dart","line":"24"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"24"}],"line":"22"},{"returnType":{"name":"LinkedHashMap","refId":"dart.collection/LinkedHashMap","arguments":[{"name":"K","refId":"dart.collection/LinkedHashMap/K"},{"name":"V","refId":"dart.collection/LinkedHashMap/V"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an insertion-ordered identity-based map.\n\nEffectively a shorthand for:\n\n    new LinkedHashMap(equals: identical, hashCode: identityHashCodeOf)\n","line":"33"},{"returnType":{"name":"LinkedHashMap","refId":"dart.collection/LinkedHashMap","arguments":[{"name":"K","refId":"dart.collection/LinkedHashMap/K"},{"name":"V","refId":"dart.collection/LinkedHashMap/V"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a [LinkedHashMap] that contains all key value pairs of [other].\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.collection/LinkedHashMap/K"},{"name":"V","refId":"dart.collection/LinkedHashMap/V"}]},"kind":"param","name":"other","id":"other"}],"line":"38"},{"returnType":{"name":"LinkedHashMap","refId":"dart.collection/LinkedHashMap","arguments":[{"name":"K","refId":"dart.collection/LinkedHashMap/K"},{"name":"V","refId":"dart.collection/LinkedHashMap/V"}]},"kind":"constructor","name":"fromIterable","id":"fromIterable3()","comment":"\nCreates a [LinkedHashMap] where the keys and values are computed from the\n[iterable].\n\nFor each element of the [iterable] this constructor computes a key/value\npair, by applying [key] and [value] respectively.\n\nThe keys of the key/value pairs do not need to be unique. The last\noccurrence of a key will simply overwrite any previous value.\n\nIf no values are specified for [key] and [value] the default is the\nidentity function.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"key","id":"key","children":[{"returnType":{"name":"K","refId":"dart.collection/LinkedHashMap/K"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/linked_hash_map.dart","line":"56"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"56"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"value","id":"value","children":[{"returnType":{"name":"V","refId":"dart.collection/LinkedHashMap/V"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/linked_hash_map.dart","line":"56"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"56"}],"line":"55"},{"returnType":{"name":"LinkedHashMap","refId":"dart.collection/LinkedHashMap","arguments":[{"name":"K","refId":"dart.collection/LinkedHashMap/K"},{"name":"V","refId":"dart.collection/LinkedHashMap/V"}]},"kind":"constructor","name":"fromIterables","id":"fromIterables2()","comment":"\nCreates a [LinkedHashMap] associating the given [keys] to [values].\n\nThis constructor iterates over [keys] and [values] and maps each element of\n[keys] to the corresponding element of [values].\n\nIf [keys] contains the same object multiple times, the last occurrence\noverwrites the previous value.\n\nIt is an error if the two [Iterable]s don't have the same length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.collection/LinkedHashMap/K"}]},"kind":"param","name":"keys","id":"keys"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.collection/LinkedHashMap/V"}]},"kind":"param","name":"values","id":"values"}],"line":"73"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"uri":"dart-sdk/lib/collection/linked_hash_map.dart","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"HashSet","refId":"dart.collection/HashSet","arguments":[{"name":"E","refId":"dart.collection/LinkedHashSet/E"}]}],"kind":"class","name":"LinkedHashSet","id":"LinkedHashSet","comment":"\nA [LinkedHashSet] is a hash-table based [Set] implementation.\n\nThe `LinkedHashSet` also keep track of the order that elements were inserted\nin, and iteration happens in first-to-last insertion order.\n\nThe elements of a `LinkedHashSet` must have consistent [Object.operator==]\nand [Object.hashCode] implementations. This means that the `==` operator\nmust define a stable equivalence relation on the elements (reflexive,\nanti-symmetric, transitive, and consistent over time), and that `hashCode`\nmust be the same for objects that are considered equal by `==`.\n\nThe set allows `null` as an element.\n\nMost simple operations on `HashSet` are done in (potentially amortized)\nconstant time: [add], [contains], [remove], and [length], provided the hash\ncodes of objects are well distributed..\n","children":[{"returnType":{"name":"LinkedHashSet","refId":"dart.collection/LinkedHashSet","arguments":[{"name":"E","refId":"dart.collection/LinkedHashSet/E"}]},"kind":"constructor","name":"","id":"3()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"equals","id":"equals","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/LinkedHashSet/E"},"kind":"param","name":"e1","id":"e1","uri":"dart-sdk/lib/collection/linked_hash_set.dart","line":"27"},{"ref":{"name":"E","refId":"dart.collection/LinkedHashSet/E"},"kind":"param","name":"e2","id":"e2","uri":"dart-sdk/lib/collection/linked_hash_set.dart","line":"27"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"hashCode","id":"hashCode","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/LinkedHashSet/E"},"kind":"param","name":"e","id":"e","uri":"dart-sdk/lib/collection/linked_hash_set.dart","line":"28"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"28"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"isValidKey","id":"isValidKey","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"potentialKey","id":"potentialKey","uri":"dart-sdk/lib/collection/linked_hash_set.dart","line":"29"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"29"}],"line":"27"},{"returnType":{"name":"LinkedHashSet","refId":"dart.collection/LinkedHashSet","arguments":[{"name":"E","refId":"dart.collection/LinkedHashSet/E"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an insertion-ordered identity-based set.\n\nEffectively a shorthand for:\n\n    new LinkedHashSet(equals: identical, hashCode: identityHashCodeOf)\n","line":"38"},{"returnType":{"name":"LinkedHashSet","refId":"dart.collection/LinkedHashSet","arguments":[{"name":"E","refId":"dart.collection/LinkedHashSet/E"}]},"kind":"constructor","name":"from","id":"from1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/LinkedHashSet/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"41"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/linked_hash_set.dart","line":"25"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]}],"kind":"class","name":"ListMixin","id":"ListMixin","comment":"\nBase implementation of a [List] class.\n\nThis class can be used as a mixin.\n\nThis implements all read operations using only the `length` and\n`operator[]` members. It implements write operations using those and\n`length=` and `operator[]=`\n\n*NOTICE*: Forwarding just these four operations to a normal growable [List]\n(as created by `new List()`) will give very bad performance for `add` and\n`addAll` operations of `ListBase`. These operations are implemented by\nincreasing the length of the list by one for each `add` operation, and\nrepeatedly increasing the length of a growable list is not efficient.\nTo avoid this, either override 'add' and 'addAll' to also forward directly\nto the growable list, or, if possible, use `DelegatingList` from\n\"package:collection/wrappers.dart\" instead.\n","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"50"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"52"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"52"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"82"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"93"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"93"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"104"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"104"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"115"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"115"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"128"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"128"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"141"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"141"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"162"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"191"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"191"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"193"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"193"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"195"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"195"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"198"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"198"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"198"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"207"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"207"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"219"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"221"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"221"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"225"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"227"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"227"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"231"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"244"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"253"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"257"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"263"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"278"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"278"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_filter","id":"_filter3()","children":[{"ref":{"name":"List","refId":"dart.core/List"},"kind":"param","name":"source","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"283"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"283"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"retainMatching","id":"retainMatching","line":"284"}],"isPrivate":true,"line":"282"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"302"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeLast","id":"removeLast0()","line":"306"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/collection/list.dart","line":"315"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/collection/list.dart","line":"315"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"315"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"323"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"asMap","id":"asMap0()","line":"335"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rangeCheck","id":"_rangeCheck2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"line":"339"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"sublist","id":"sublist2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"348"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"getRange","id":"getRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"359"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"364"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"isOptional":true,"kind":"param","name":"fill","id":"fill"}],"line":"371"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"378"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"newContents","id":"newContents"}],"line":"410"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"436"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"456"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"475"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeAt","id":"removeAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"492"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"499"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"515"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"527"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"48"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"62"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"64"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"first","id":"first","line":"66"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"last","id":"last","line":"71"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"single","id":"single","line":"76"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"reversed","id":"reversed","line":"525"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/list.dart","line":"45"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"ListMixin","refId":"dart.collection/ListMixin","arguments":[{"name":"E","refId":"dart.collection/ListBase/E"}]}],"kind":"class","name":"ListBase","id":"ListBase","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"50"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"52"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"52"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"82"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"93"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"93"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"104"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"104"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"115"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"115"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"128"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"128"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"141"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"141"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"162"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"191"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"191"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"193"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"193"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"195"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"195"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"198"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"198"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"198"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/list.dart","line":"207"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"207"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"219"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"221"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"221"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"count","id":"count"}],"line":"225"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"227"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"227"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"231"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"244"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"253"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"257"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"263"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"274"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"274"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/list.dart","line":"278"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"278"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"302"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeLast","id":"removeLast0()","line":"306"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"sort","id":"sort1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"a","id":"a","uri":"dart-sdk/lib/collection/list.dart","line":"315"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"b","id":"b","uri":"dart-sdk/lib/collection/list.dart","line":"315"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"315"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"shuffle","id":"shuffle1()","children":[{"ref":{"name":"Random","refId":"dart.math/Random"},"isOptional":true,"kind":"param","name":"random","id":"random"}],"line":"323"},{"returnType":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"int","refId":"dart.core/int"},{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"asMap","id":"asMap0()","line":"335"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rangeCheck","id":"_rangeCheck2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"isPrivate":true,"line":"339"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"sublist","id":"sublist2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"end","id":"end"}],"line":"348"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"method","name":"getRange","id":"getRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"359"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeRange","id":"removeRange2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"}],"line":"364"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"fillRange","id":"fillRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"isOptional":true,"kind":"param","name":"fill","id":"fill"}],"line":"371"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setRange","id":"setRange4()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"skipCount","id":"skipCount"}],"line":"378"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"replaceRange","id":"replaceRange3()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"start","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"end","id":"end"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"newContents","id":"newContents"}],"line":"410"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"indexOf","id":"indexOf2()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"436"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"lastIndexOf","id":"lastIndexOf2()","comment":"\nReturns the last index in the list [a] of the given [element], starting\nthe search at index [startIndex] to 0.\nReturns -1 if [element] is not found.\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"startIndex","id":"startIndex"}],"line":"456"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insert","id":"insert2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"param","name":"element","id":"element"}],"line":"475"},{"returnType":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"method","name":"removeAt","id":"removeAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"492"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAll","id":"insertAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"499"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"setAll","id":"setAll2()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"515"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"527"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"48"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"62"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"64"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"first","id":"first","line":"66"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"last","id":"last","line":"71"},{"ref":{"name":"E","refId":"dart.collection/ListMixin/E"},"kind":"property","name":"single","id":"single","line":"76"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListMixin/E"}]},"kind":"property","name":"reversed","id":"reversed","line":"525"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/list.dart","line":"25"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.collection/HashMap/K"},{"name":"V","refId":"dart.collection/HashMap/V"}]}],"kind":"class","name":"HashMap","id":"HashMap","comment":"\nA hash-table based implementation of [Map].\n\nThe keys of a `HashMap` must have consistent [Object.operator==]\nand [Object.hashCode] implementations. This means that the `==` operator\nmust define a stable equivalence relation on the keys (reflexive,\nanti-symmetric, transitive, and consistent over time), and that `hashCode`\nmust be the same for objects that are considered equal by `==`.\n\nThe map allows `null` as a key.\n","children":[{"returnType":{"name":"HashMap","refId":"dart.collection/HashMap","arguments":[{"name":"K","refId":"dart.collection/HashMap/K"},{"name":"V","refId":"dart.collection/HashMap/V"}]},"kind":"constructor","name":"","id":"3()","comment":"\nCreates a hash-table based [Map].\n\nThe created map is not ordered in any way. When iterating the keys or\nvalues, the iteration order is unspecified except that it will stay the\nsame as long as the map isn't changed.\n\nIf [equals] is provided, it is used to compare the keys in the table with\nnew keys. If [equals] is omitted, the key's own [Object.operator==] is used\ninstead.\n\nSimilar, if [hashCode] is provided, it is used to produce a hash value\nfor keys in order to place them in the hash table. If it is omitted, the\nkey's own [Object.hashCode] is used.\n\nIf using methods like [operator[]], [remove] and [containsKey] together\nwith a custom equality and hashcode, an extra `isValidKey` function\ncan be supplied. This function is called before calling [equals] or\n[hashCode] with an argument that may not be a [K] instance, and if the\ncall returns false, the key is assumed to not be in the set.\nThe [isValidKey] function defaults to just testing if the object is a\n[K] instance.\n\nThe used `equals` and `hashCode` method should always be consistent,\nso that if `equals(a, b)` then `hashCode(a) == hashCode(b)`. The hash\nof an object, or what it compares equal to, should not change while the\nobject is in the table. If it does change, the result is unpredictable.\n\nIt is generally the case that if you supply one of [equals] and [hashCode],\nyou also want to supply the other. The only common exception is to pass\n[identical] as the equality and use the default hash code.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"equals","id":"equals","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.collection/HashMap/K"},"kind":"param","name":"key1","id":"key1","uri":"dart-sdk/lib/collection/hash_map.dart","line":"61"},{"ref":{"name":"K","refId":"dart.collection/HashMap/K"},"kind":"param","name":"key2","id":"key2","uri":"dart-sdk/lib/collection/hash_map.dart","line":"61"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"hashCode","id":"hashCode","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.collection/HashMap/K"},"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/collection/hash_map.dart","line":"62"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"62"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"isValidKey","id":"isValidKey","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"potentialKey","id":"potentialKey","uri":"dart-sdk/lib/collection/hash_map.dart","line":"63"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"63"}],"line":"61"},{"returnType":{"name":"HashMap","refId":"dart.collection/HashMap","arguments":[{"name":"K","refId":"dart.collection/HashMap/K"},{"name":"V","refId":"dart.collection/HashMap/V"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an unordered identity-based map.\n\nEffectively a shorthand for:\n\n    new HashMap(equals: identical, hashCode: identityHashCodeOf)\n","line":"72"},{"returnType":{"name":"HashMap","refId":"dart.collection/HashMap","arguments":[{"name":"K","refId":"dart.collection/HashMap/K"},{"name":"V","refId":"dart.collection/HashMap/V"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a [HashMap] that contains all key value pairs of [other].\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.collection/HashMap/K"},{"name":"V","refId":"dart.collection/HashMap/V"}]},"kind":"param","name":"other","id":"other"}],"line":"77"},{"returnType":{"name":"HashMap","refId":"dart.collection/HashMap","arguments":[{"name":"K","refId":"dart.collection/HashMap/K"},{"name":"V","refId":"dart.collection/HashMap/V"}]},"kind":"constructor","name":"fromIterable","id":"fromIterable3()","comment":"\nCreates a [HashMap] where the keys and values are computed from the\n[iterable].\n\nFor each element of the [iterable] this constructor computes a key/value\npair, by applying [key] and [value] respectively.\n\nThe keys of the key/value pairs do not need to be unique. The last\noccurrence of a key will simply overwrite any previous value.\n\nIf no values are specified for [key] and [value] the default is the\nidentity function.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"key","id":"key","children":[{"returnType":{"name":"K","refId":"dart.collection/HashMap/K"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/hash_map.dart","line":"95"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"95"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"value","id":"value","children":[{"returnType":{"name":"V","refId":"dart.collection/HashMap/V"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/hash_map.dart","line":"95"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"95"}],"line":"94"},{"returnType":{"name":"HashMap","refId":"dart.collection/HashMap","arguments":[{"name":"K","refId":"dart.collection/HashMap/K"},{"name":"V","refId":"dart.collection/HashMap/V"}]},"kind":"constructor","name":"fromIterables","id":"fromIterables2()","comment":"\nCreates a [HashMap] associating the given [keys] to [values].\n\nThis constructor iterates over [keys] and [values] and maps each element of\n[keys] to the corresponding element of [values].\n\nIf [keys] contains the same object multiple times, the last occurrence\noverwrites the previous value.\n\nIt is an error if the two [Iterable]s don't have the same length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.collection/HashMap/K"}]},"kind":"param","name":"keys","id":"keys"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.collection/HashMap/V"}]},"kind":"param","name":"values","id":"values"}],"line":"112"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"uri":"dart-sdk/lib/collection/hash_map.dart","line":"28"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"typedef","name":"_Hasher","id":"_Hasher","comment":"Type of custom hash code function. ","children":[{"ref":{"name":"K","refId":"dart.collection/_Hasher/K"},"kind":"param","name":"object","id":"object"},{"kind":"typeparam","name":"K","id":"K"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/hash_map.dart","line":"15"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"typedef","name":"_Equality","id":"_Equality","comment":"Type of custom equality function ","children":[{"ref":{"name":"K","refId":"dart.collection/_Equality/K"},"kind":"param","name":"a","id":"a"},{"ref":{"name":"K","refId":"dart.collection/_Equality/K"},"kind":"param","name":"b","id":"b"},{"kind":"typeparam","name":"K","id":"K"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/hash_map.dart","line":"13"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/HashSet/E"}]}],"kind":"class","name":"HashSet","id":"HashSet","comment":"\nA [HashSet] is a hash-table based [Set] implementation.\n\nThe elements of a `HashSet` must have consistent equality\nand hashCode implementations. This means that the equals operation\nmust define a stable equivalence relation on the elements (reflexive,\nanti-symmetric, transitive, and consistent over time), and that the hashCode\nmust consistent with equality, so that the same for objects that are\nconsidered equal.\n\nThe set allows `null` as an element.\n\nMost simple operations on `HashSet` are done in (potentially amorteized)\nconstant time: [add], [contains], [remove], and [length], provided the hash\ncodes of objects are well distributed.\n","children":[{"returnType":{"name":"HashSet","refId":"dart.collection/HashSet","arguments":[{"name":"E","refId":"dart.collection/HashSet/E"}]},"kind":"constructor","name":"","id":"3()","comment":"\nCreate a hash set using the provided [equals] as equality.\n\nThe provided [equals] must define a stable equivalence relation, and\n[hashCode] must be consistent with [equals]. If the [equals] or [hashCode]\nmethods won't work on all objects, but only to instances of E, the\n[isValidKey] predicate can be used to restrict the keys that they are\napplied to. Any key for which [isValidKey] returns false is automatically\nassumed to not be in the set.\n\nIf [equals], [hashCode] and [isValidKey] are omitted, the set uses\nthe objects' intrinsic [Object.operator==] and [Object.hashCode].\n\nIf [isValidKey] is omitted, it defaults to testing if the object is an\n[E] instance.\n\nIf [equals] is [identical], this creates an identity set. Any hashCode\nis compatible with [identical], and it applies to all objects, so\n[hashCode] and [isValidKey] can safely be omitted.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"equals","id":"equals","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/HashSet/E"},"kind":"param","name":"e1","id":"e1","uri":"dart-sdk/lib/collection/hash_set.dart","line":"103"},{"ref":{"name":"E","refId":"dart.collection/HashSet/E"},"kind":"param","name":"e2","id":"e2","uri":"dart-sdk/lib/collection/hash_set.dart","line":"103"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"hashCode","id":"hashCode","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/HashSet/E"},"kind":"param","name":"e","id":"e","uri":"dart-sdk/lib/collection/hash_set.dart","line":"104"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"104"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"isValidKey","id":"isValidKey","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"potentialKey","id":"potentialKey","uri":"dart-sdk/lib/collection/hash_set.dart","line":"105"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"105"}],"line":"103"},{"returnType":{"name":"HashSet","refId":"dart.collection/HashSet","arguments":[{"name":"E","refId":"dart.collection/HashSet/E"}]},"kind":"constructor","name":"identity","id":"identity0()","comment":"\nCreates an unordered identity-based set.\n\nEffectively a shorthand for:\n\n    new HashSet(equals: identical, hashCode: identityHashCodeOf)\n","line":"114"},{"returnType":{"name":"HashSet","refId":"dart.collection/HashSet","arguments":[{"name":"E","refId":"dart.collection/HashSet/E"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreate a hash set containing the elements of [iterable].\n\nCreates a hash set as by `new HashSet<E>()` and adds each element of\n`iterable` to this set in the order they are iterated.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/HashSet/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"122"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/hash_set.dart","line":"82"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"E","refId":"dart.collection/_HashSetBase/E"}]},"isAbstract":true,"interfaces":[{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/_HashSetBase/E"}]}],"kind":"class","name":"_HashSetBase","id":"_HashSetBase","comment":"Common parts of [HashSet] and [LinkedHashSet] implementations. ","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsAll","id":"containsAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"other","id":"other"}],"line":"11"},{"returnType":{"name":"HashSet","refId":"dart.collection/HashSet","arguments":[{"name":"E","refId":"dart.collection/_HashSetBase/E"}]},"kind":"method","name":"_newSet","id":"_newSet0()","comment":"Create a new Set of the same type as this. ","isPrivate":true,"line":"19"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/_HashSetBase/E"}]},"kind":"method","name":"intersection","id":"intersection1()","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"other","id":"other"}],"line":"21"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/_HashSetBase/E"}]},"kind":"method","name":"union","id":"union1()","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/_HashSetBase/E"}]},"kind":"param","name":"other","id":"other"}],"line":"29"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/_HashSetBase/E"}]},"kind":"method","name":"difference","id":"difference1()","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/_HashSetBase/E"}]},"kind":"param","name":"other","id":"other"}],"line":"33"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_retainAll","id":"_retainAll2()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"objectsToRetain","id":"objectsToRetain"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"isValidKey","id":"isValidKey","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o","uri":"dart-sdk/lib/collection/hash_set.dart","line":"41"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"isPrivate":true,"line":"41"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/_HashSetBase/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"53"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/_HashSetBase/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"61"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"63"},{"kind":"typeparam","name":"E","id":"E"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/hash_set.dart"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"_LinkedListLink","refId":"dart.collection/_LinkedListLink"}],"kind":"class","name":"LinkedListEntry","id":"LinkedListEntry","comment":"\nEntry element for a [LinkedList]. Any entry must extend this class.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"unlink","id":"unlink0()","comment":"\nUnlink the element from the list.\n","line":"202"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertAfter","id":"insertAfter1()","comment":"\ninsert an element after this.\n","children":[{"ref":{"name":"E","refId":"dart.collection/LinkedListEntry/E"},"kind":"param","name":"entry","id":"entry"}],"line":"225"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"insertBefore","id":"insertBefore1()","comment":"\nInsert an element before this.\n","children":[{"ref":{"name":"E","refId":"dart.collection/LinkedListEntry/E"},"kind":"param","name":"entry","id":"entry"}],"line":"232"},{"ref":{"name":"LinkedList","refId":"dart.collection/LinkedList","arguments":[{"name":"E","refId":"dart.collection/LinkedListEntry/E"}]},"kind":"property","name":"list","id":"list","comment":"\nGet the list containing this element.\n","line":"197"},{"ref":{"name":"E","refId":"dart.collection/LinkedListEntry/E"},"kind":"property","name":"next","id":"next","comment":"\nReturn the succeeding element in the list.\n","line":"209"},{"ref":{"name":"E","refId":"dart.collection/LinkedListEntry/E"},"kind":"property","name":"previous","id":"previous","comment":"\nReturn the preceeding element in the list.\n","line":"217"},{"ref":{"name":"LinkedList","refId":"dart.collection/LinkedList","arguments":[{"name":"E","refId":"dart.collection/LinkedListEntry/E"}]},"kind":"variable","name":"_list","id":"_list","isPrivate":true,"line":"190"},{"ref":{"name":"_LinkedListLink","refId":"dart.collection/_LinkedListLink"},"kind":"variable","name":"_next","id":"_next","isPrivate":true,"line":"191"},{"ref":{"name":"_LinkedListLink","refId":"dart.collection/_LinkedListLink"},"kind":"variable","name":"_previous","id":"_previous","isPrivate":true,"line":"192"},{"upperBound":{"name":"LinkedListEntry","refId":"dart.collection/LinkedListEntry","arguments":[{"name":"E","refId":"dart.collection/LinkedListEntry/E"}]},"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/linked_list.dart","line":"188"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_LinkedListLink","id":"_LinkedListLink","children":[{"ref":{"name":"_LinkedListLink","refId":"dart.collection/_LinkedListLink"},"kind":"variable","name":"_next","id":"_next","isPrivate":true,"line":"180"},{"ref":{"name":"_LinkedListLink","refId":"dart.collection/_LinkedListLink"},"kind":"variable","name":"_previous","id":"_previous","isPrivate":true,"line":"181"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/linked_list.dart","line":"179"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/_LinkedListIterator/E"}]}],"kind":"class","name":"_LinkedListIterator","id":"_LinkedListIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"164"},{"ref":{"name":"E","refId":"dart.collection/_LinkedListIterator/E"},"kind":"property","name":"current","id":"current","line":"162"},{"ref":{"name":"LinkedList","refId":"dart.collection/LinkedList","arguments":[{"name":"E","refId":"dart.collection/_LinkedListIterator/E"}]},"isFinal":true,"kind":"variable","name":"_list","id":"_list","isPrivate":true,"line":"152"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_modificationCount","id":"_modificationCount","isPrivate":true,"line":"153"},{"ref":{"name":"E","refId":"dart.collection/_LinkedListIterator/E"},"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"154"},{"ref":{"name":"_LinkedListLink","refId":"dart.collection/_LinkedListLink"},"kind":"variable","name":"_next","id":"_next","isPrivate":true,"line":"155"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"LinkedList","refId":"dart.collection/LinkedList","arguments":[{"name":"E","refId":"dart.collection/_LinkedListIterator/E"}]},"kind":"param","name":"list","id":"list"}],"line":"157"},{"upperBound":{"name":"LinkedListEntry","refId":"dart.collection/LinkedListEntry","arguments":[{"name":"E","refId":"dart.collection/_LinkedListIterator/E"}]},"kind":"typeparam","name":"E","id":"E"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/linked_list.dart","line":"150"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"E","refId":"dart.collection/LinkedList/E"}]},"interfaces":[{"name":"_LinkedListLink","refId":"dart.collection/_LinkedListLink"}],"kind":"class","name":"LinkedList","id":"LinkedList","comment":"\nA linked list implementation, providing O(1) removal(unlink) of elements and\nmanual traversal through [next] and [previous].\n\nThe list elements must extend [LinkedListEntry].\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addFirst","id":"addFirst1()","comment":"\nAdd [entry] to the beginning of the list.\n","children":[{"ref":{"name":"E","refId":"dart.collection/LinkedList/E"},"kind":"param","name":"entry","id":"entry"}],"line":"33"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nAdd [entry] to the end of the list.\n","children":[{"ref":{"name":"E","refId":"dart.collection/LinkedList/E"},"kind":"param","name":"entry","id":"entry"}],"line":"40"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAdd [entries] to the end of the list.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/LinkedList/E"}]},"kind":"param","name":"entries","id":"entries"}],"line":"47"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemove [entry] from the list. This is the same as calling `entry.unlink()`.\n\nIf [entry] is not in the list, `false` is returned.\n","children":[{"ref":{"name":"E","refId":"dart.collection/LinkedList/E"},"kind":"param","name":"entry","id":"entry"}],"line":"56"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"65"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"69"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","comment":"\nCall [action] with each entry in the list.\n\nIt's an error if [action] modify the list.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/LinkedList/E"},"kind":"param","name":"entry","id":"entry","uri":"dart-sdk/lib/collection/linked_list.dart","line":"110"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"110"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_insertAfter","id":"_insertAfter2()","children":[{"ref":{"name":"_LinkedListLink","refId":"dart.collection/_LinkedListLink"},"kind":"param","name":"entry","id":"entry"},{"ref":{"name":"E","refId":"dart.collection/LinkedList/E"},"kind":"param","name":"newEntry","id":"newEntry"}],"isPrivate":true,"line":"124"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_unlink","id":"_unlink1()","children":[{"ref":{"name":"LinkedListEntry","refId":"dart.collection/LinkedListEntry","arguments":[{"name":"E","refId":"dart.collection/LinkedList/E"}]},"kind":"param","name":"entry","id":"entry"}],"isPrivate":true,"line":"140"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/LinkedList/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"62"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"67"},{"ref":{"name":"E","refId":"dart.collection/LinkedList/E"},"kind":"property","name":"first","id":"first","line":"81"},{"ref":{"name":"E","refId":"dart.collection/LinkedList/E"},"kind":"property","name":"last","id":"last","line":"88"},{"ref":{"name":"E","refId":"dart.collection/LinkedList/E"},"kind":"property","name":"single","id":"single","line":"95"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"122"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_modificationCount","id":"_modificationCount","isPrivate":true,"line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_length","id":"_length","isPrivate":true,"line":"19"},{"ref":{"name":"_LinkedListLink","refId":"dart.collection/_LinkedListLink"},"kind":"variable","name":"_next","id":"_next","isPrivate":true,"line":"20"},{"ref":{"name":"_LinkedListLink","refId":"dart.collection/_LinkedListLink"},"kind":"variable","name":"_previous","id":"_previous","isPrivate":true,"line":"21"},{"kind":"constructor","name":"","id":"0()","comment":"\nConstruct a new empty linked list.\n","line":"26"},{"upperBound":{"name":"LinkedListEntry","refId":"dart.collection/LinkedListEntry","arguments":[{"name":"E","refId":"dart.collection/LinkedList/E"}]},"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/linked_list.dart","line":"14"},{"superclass":{"name":"_SplayTree+IterableMixin","refId":"dart.collection/_SplayTree+IterableMixin","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"interfaces":[{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]}],"kind":"class","name":"SplayTreeSet","id":"SplayTreeSet","comment":"\nA [Set] of objects that can be ordered relative to each other.\n\nThe set is based on a self-balancing binary tree. It allows most operations\nin amortized logarithmic time.\n\nElements of the set are compared using the `compare` function passed in\nthe constructor. If that is omitted, the objects are assumed to be\n[Comparable], and are compared using their [Comparable.compareTo]\nmethod. Non-comparable objects (including `null`) will not work as an element\nin that case.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_compare","id":"_compare2()","children":[{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"param","name":"e1","id":"e1"},{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"param","name":"e2","id":"e2"}],"isPrivate":true,"line":"673"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"700"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"param","name":"element","id":"element"}],"line":"704"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"711"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"param","name":"elements","id":"elements"}],"line":"716"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeAll","id":"removeAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"elements","id":"elements"}],"line":"725"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainAll","id":"retainAll1()","comment":"\nRemoves all elements not in [elements].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"elements","id":"elements"}],"line":"734"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_filterWhere","id":"_filterWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"754"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"removeMatching","id":"removeMatching"}],"isPrivate":true,"line":"754"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"770"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"770"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"774"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"774"},{"returnType":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"method","name":"lookup","id":"lookup1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"778"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"method","name":"intersection","id":"intersection1()","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"param","name":"other","id":"other"}],"line":"785"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"method","name":"difference","id":"difference1()","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"param","name":"other","id":"other"}],"line":"793"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"method","name":"union","id":"union1()","children":[{"ref":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"param","name":"other","id":"other"}],"line":"801"},{"returnType":{"name":"SplayTreeSet","refId":"dart.collection/SplayTreeSet","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"method","name":"_clone","id":"_clone0()","isPrivate":true,"line":"805"},{"returnType":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"method","name":"_cloneNode","id":"_cloneNode1()","children":[{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"param","name":"node","id":"node"}],"isPrivate":true,"line":"812"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsAll","id":"containsAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Object","refId":"dart.core/Object"}]},"kind":"param","name":"other","id":"other"}],"line":"818"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"825"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/SplayTreeSet/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"677"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"679"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"680"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"681"},{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"property","name":"first","id":"first","line":"683"},{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"property","name":"last","id":"last","line":"688"},{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"property","name":"single","id":"single","line":"693"},{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"kind":"variable","name":"_comparator","id":"_comparator","isPrivate":true,"line":"642"},{"ref":{"name":"_Predicate","refId":"dart.collection/_Predicate"},"kind":"variable","name":"_validKey","id":"_validKey","isPrivate":true,"line":"643"},{"kind":"constructor","name":"","id":"2()","comment":"\nCreate a new [SplayTreeSet] with the given compare function.\n\nIf the [compare] function is omitted, it defaults to [Comparable.compare],\nand the elements must be comparable.\n\nA provided `compare` function may not work on all objects. It may not even\nwork on all `E` instances.\n\nFor operations that add elements to the set, the user is supposed to not\npass in objects that doesn't work with the compare function.\n\nThe methods [contains], [remove], [lookup], [removeAll] or [retainAll]\nare typed to accept any object(s), and the [isValidKey] test can used to\nfilter those objects before handing them to the `compare` function.\n\nIf [isValidKey] is provided, only values satisfying `isValidKey(other)`\nare compared using the `compare` method in the methods mentioned above.\nIf the `isValidKey` function returns false for an object, it is assumed to\nnot be in the set.\n\nIf omitted, the `isValidKey` function defaults to checking against the\ntype parameter: `other is E`.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"param","name":"key1","id":"key1","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"669"},{"ref":{"name":"E","refId":"dart.collection/SplayTreeSet/E"},"kind":"param","name":"key2","id":"key2","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"669"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"isValidKey","id":"isValidKey","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"potentialKey","id":"potentialKey","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"669"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"669"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"640"},{"superclass":{"name":"_SplayTreeIterator","refId":"dart.collection/_SplayTreeIterator","arguments":[{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeNodeIterator/K"}]}]},"kind":"class","name":"_SplayTreeNodeIterator","id":"_SplayTreeNodeIterator","children":[{"returnType":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeNodeIterator/K"}]},"kind":"method","name":"_getValue","id":"_getValue1()","children":[{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"},"kind":"param","name":"node","id":"node"}],"isPrivate":true,"line":"624"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"_SplayTree","refId":"dart.collection/_SplayTree","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeNodeIterator/K"}]},"kind":"param","name":"tree","id":"tree"}],"line":"621"},{"kind":"constructor","name":"startAt","id":"startAt2()","children":[{"ref":{"name":"_SplayTree","refId":"dart.collection/_SplayTree","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeNodeIterator/K"}]},"kind":"param","name":"tree","id":"tree"},{"kind":"param","name":"startKey","id":"startKey"}],"line":"622"},{"kind":"typeparam","name":"K","id":"K"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"619"},{"superclass":{"name":"_SplayTreeIterator","refId":"dart.collection/_SplayTreeIterator","arguments":[{"name":"V","refId":"dart.collection/_SplayTreeValueIterator/V"}]},"kind":"class","name":"_SplayTreeValueIterator","id":"_SplayTreeValueIterator","children":[{"returnType":{"name":"V","refId":"dart.collection/_SplayTreeValueIterator/V"},"kind":"method","name":"_getValue","id":"_getValue1()","children":[{"ref":{"name":"_SplayTreeMapNode","refId":"dart.collection/_SplayTreeMapNode"},"kind":"param","name":"node","id":"node"}],"isPrivate":true,"line":"616"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"SplayTreeMap","refId":"dart.collection/SplayTreeMap","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeValueIterator/K"},{"name":"V","refId":"dart.collection/_SplayTreeValueIterator/V"}]},"kind":"param","name":"map","id":"map"}],"line":"615"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"614"},{"superclass":{"name":"_SplayTreeIterator","refId":"dart.collection/_SplayTreeIterator","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeKeyIterator/K"}]},"kind":"class","name":"_SplayTreeKeyIterator","id":"_SplayTreeKeyIterator","children":[{"returnType":{"name":"K","refId":"dart.collection/_SplayTreeKeyIterator/K"},"kind":"method","name":"_getValue","id":"_getValue1()","children":[{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"},"kind":"param","name":"node","id":"node"}],"isPrivate":true,"line":"611"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"_SplayTree","refId":"dart.collection/_SplayTree","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeKeyIterator/K"}]},"kind":"param","name":"map","id":"map"}],"line":"610"},{"kind":"typeparam","name":"K","id":"K"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"609"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"V","refId":"dart.collection/_SplayTreeValueIterable/V"}]},"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"}],"kind":"class","name":"_SplayTreeValueIterable","id":"_SplayTreeValueIterable","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"604"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"605"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"V","refId":"dart.collection/_SplayTreeValueIterable/V"}]},"kind":"property","name":"iterator","id":"iterator","line":"606"},{"ref":{"name":"SplayTreeMap","refId":"dart.collection/SplayTreeMap","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeValueIterable/K"},{"name":"V","refId":"dart.collection/_SplayTreeValueIterable/V"}]},"kind":"variable","name":"_map","id":"_map","isPrivate":true,"line":"602"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"SplayTreeMap","refId":"dart.collection/SplayTreeMap","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeValueIterable/K"},{"name":"V","refId":"dart.collection/_SplayTreeValueIterable/V"}]},"initializedField":{"name":"_map","refId":"dart.collection/_SplayTreeValueIterable/_map"},"kind":"param","name":"_map","id":"_map","isPrivate":true}],"line":"603"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"600"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeKeyIterable/K"}]},"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"}],"kind":"class","name":"_SplayTreeKeyIterable","id":"_SplayTreeKeyIterable","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"595"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"596"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeKeyIterable/K"}]},"kind":"property","name":"iterator","id":"iterator","line":"597"},{"ref":{"name":"_SplayTree","refId":"dart.collection/_SplayTree","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeKeyIterable/K"}]},"kind":"variable","name":"_tree","id":"_tree","isPrivate":true,"line":"593"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"_SplayTree","refId":"dart.collection/_SplayTree","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeKeyIterable/K"}]},"initializedField":{"name":"_tree","refId":"dart.collection/_SplayTreeKeyIterable/_tree"},"kind":"param","name":"_tree","id":"_tree","isPrivate":true}],"line":"594"},{"kind":"typeparam","name":"K","id":"K"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"591"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"T","refId":"dart.collection/_SplayTreeIterator/T"}]}],"kind":"class","name":"_SplayTreeIterator","id":"_SplayTreeIterator","children":[{"returnType":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"},"kind":"method","name":"_findStartNode","id":"_findStartNode1()","children":[{"ref":{"name":"T","refId":"dart.collection/_SplayTreeIterator/T"},"kind":"param","name":"key","id":"key"}],"isPrivate":true,"line":"536"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_findLeftMostDescendent","id":"_findLeftMostDescendent1()","children":[{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"},"kind":"param","name":"node","id":"node"}],"isPrivate":true,"line":"540"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_rebuildWorkList","id":"_rebuildWorkList1()","comment":"\nCalled when the tree structure of the tree has changed.\n\nThis can be caused by a splay operation.\nIf the key-set changes, iteration is aborted before getting\nhere, so we know that the keys are the same as before, it's\nonly the tree that has been reordered.\n","children":[{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"},"kind":"param","name":"currentNode","id":"currentNode"}],"isPrivate":true,"line":"555"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"567"},{"returnType":{"name":"T","refId":"dart.collection/_SplayTreeIterator/T"},"kind":"method","name":"_getValue","id":"_getValue1()","children":[{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"},"kind":"param","name":"node","id":"node"}],"isPrivate":true,"line":"588"},{"ref":{"name":"T","refId":"dart.collection/_SplayTreeIterator/T"},"kind":"property","name":"current","id":"current","line":"531"},{"ref":{"name":"_SplayTree","refId":"dart.collection/_SplayTree"},"isFinal":true,"kind":"variable","name":"_tree","id":"_tree","isPrivate":true,"line":"482"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"}]},"isFinal":true,"kind":"variable","name":"_workList","id":"_workList","comment":"\nWorklist of nodes to visit.\n\nThese nodes have been passed over on the way down in a\ndepth-first left-to-right traversal. Visiting each node,\nand their right subtrees will visit the remainder of\nthe nodes of a full traversal.\n\nOnly valid as long as the original tree isn't reordered.\n","isPrivate":true,"line":"493"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_modificationCount","id":"_modificationCount","comment":"\nOriginal modification counter of [_tree].\n\nIncremented on [_tree] when a key is added or removed.\nIf it changes, iteration is aborted.\n\nNot final because some iterators may modify the tree knowingly,\nand they update the modification count in that case.\n","isPrivate":true,"line":"504"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_splayCount","id":"_splayCount","comment":"\nCount of splay operations on [_tree] when [_workList] was built.\n\nIf the splay count on [_tree] increases, [_workList] becomes invalid.\n","isPrivate":true,"line":"511"},{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"},"kind":"variable","name":"_currentNode","id":"_currentNode","comment":"Current node. ","isPrivate":true,"line":"514"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"_SplayTree","refId":"dart.collection/_SplayTree"},"kind":"param","name":"tree","id":"tree"}],"line":"516"},{"kind":"constructor","name":"startAt","id":"startAt2()","children":[{"ref":{"name":"_SplayTree","refId":"dart.collection/_SplayTree"},"kind":"param","name":"tree","id":"tree"},{"kind":"param","name":"startKey","id":"startKey"}],"line":"523"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"481"},{"superclass":{"name":"_SplayTree","refId":"dart.collection/_SplayTree","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"}]},"interfaces":[{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"},{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]}],"kind":"class","name":"SplayTreeMap","id":"SplayTreeMap","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_compare","id":"_compare2()","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key1","id":"key1"},{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key2","id":"key2"}],"isPrivate":true,"line":"314"},{"returnType":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"318"},{"returnType":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"331"},{"returnType":{"name":"void","refId":"void"},"isOperator":true,"kind":"method","name":"[]=","id":"[]=2()","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"kind":"param","name":"value","id":"value"}],"line":"338"},{"returnType":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"kind":"method","name":"putIfAbsent","id":"putIfAbsent2()","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"ifAbsent","id":"ifAbsent","children":[{"returnType":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"352"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"},{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]},"kind":"param","name":"other","id":"other"}],"line":"374"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"384"},{"ref":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"384"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"384"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"397"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsKey","id":"containsKey1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"key","id":"key"}],"line":"401"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"containsValue","id":"containsValue1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"value","id":"value"}],"line":"405"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"426"},{"returnType":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"method","name":"firstKey","id":"firstKey0()","comment":"\nGet the first key in the map. Returns [null] if the map is empty.\n","line":"433"},{"returnType":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"method","name":"lastKey","id":"lastKey0()","comment":"\nGet the last key in the map. Returns [null] if the map is empty.\n","line":"441"},{"returnType":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"method","name":"lastKeyBefore","id":"lastKeyBefore1()","comment":"\nGet the last key in the map that is strictly smaller than [key]. Returns\n[null] if no key was not found.\n","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key","id":"key"}],"line":"450"},{"returnType":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"method","name":"firstKeyAfter","id":"firstKeyAfter1()","comment":"\nGet the first key in the map that is strictly larger than [key]. Returns\n[null] if no key was not found.\n","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key","id":"key"}],"line":"467"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"378"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"382"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"393"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"}]},"kind":"property","name":"keys","id":"keys","line":"422"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]},"kind":"property","name":"values","id":"values","line":"424"},{"ref":{"name":"Comparator","refId":"dart.core/Comparator"},"kind":"variable","name":"_comparator","id":"_comparator","isPrivate":true,"line":"260"},{"ref":{"name":"_Predicate","refId":"dart.collection/_Predicate"},"kind":"variable","name":"_validKey","id":"_validKey","isPrivate":true,"line":"261"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key1","id":"key1","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"263"},{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key2","id":"key2","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"263"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"isValidKey","id":"isValidKey","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"potentialKey","id":"potentialKey","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"263"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"263"},{"returnType":{"name":"SplayTreeMap","refId":"dart.collection/SplayTreeMap","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"},{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]},"kind":"constructor","name":"from","id":"from3()","comment":"\nCreates a [SplayTreeMap] that contains all key value pairs of [other].\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"},{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]},"kind":"param","name":"other","id":"other"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key1","id":"key1","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"271"},{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key2","id":"key2","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"271"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"271"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"isValidKey","id":"isValidKey","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"potentialKey","id":"potentialKey","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"272"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"272"}],"line":"270"},{"returnType":{"name":"SplayTreeMap","refId":"dart.collection/SplayTreeMap","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"},{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]},"kind":"constructor","name":"fromIterable","id":"fromIterable5()","comment":"\nCreates a [SplayTreeMap] where the keys and values are computed from the\n[iterable].\n\nFor each element of the [iterable] this constructor computes a key/value\npair, by applying [key] and [value] respectively.\n\nThe keys of the key/value pairs do not need to be unique. The last\noccurrence of a key will simply overwrite any previous value.\n\nIf no values are specified for [key] and [value] the default is the\nidentity function.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"}]},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"key","id":"key","children":[{"returnType":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"289"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"289"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"value","id":"value","children":[{"returnType":{"name":"V","refId":"dart.collection/SplayTreeMap/V"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"289"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"289"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key1","id":"key1","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"289"},{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key2","id":"key2","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"289"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"289"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"isValidKey","id":"isValidKey","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"potentialKey","id":"potentialKey","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"290"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"290"}],"line":"288"},{"returnType":{"name":"SplayTreeMap","refId":"dart.collection/SplayTreeMap","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"},{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]},"kind":"constructor","name":"fromIterables","id":"fromIterables4()","comment":"\nCreates a [SplayTreeMap] associating the given [keys] to [values].\n\nThis constructor iterates over [keys] and [values] and maps each element of\n[keys] to the corresponding element of [values].\n\nIf [keys] contains the same object multiple times, the last occurrence\noverwrites the previous value.\n\nIt is an error if the two [Iterable]s don't have the same length.\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.collection/SplayTreeMap/K"}]},"kind":"param","name":"keys","id":"keys"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.collection/SplayTreeMap/V"}]},"kind":"param","name":"values","id":"values"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"compare","id":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key1","id":"key1","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"308"},{"ref":{"name":"K","refId":"dart.collection/SplayTreeMap/K"},"kind":"param","name":"key2","id":"key2","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"308"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"308"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"kind":"param","name":"isValidKey","id":"isValidKey","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"potentialKey","id":"potentialKey","uri":"dart-sdk/lib/collection/splay_tree.dart","line":"308"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"308"}],"line":"307"},{"kind":"constructor","name":"_internal","id":"_internal0()","isPrivate":true,"line":"316"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"259"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_TypeTest","id":"_TypeTest","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"test","id":"test1()","children":[{"kind":"param","name":"v","id":"v"}],"line":"237"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"236"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"kind":"class","name":"_SplayTree","id":"_SplayTree","comment":"\nA splay tree is a self-balancing binary search tree.\n\nIt has the additional property that recently accessed elements\nare quick to access again.\nIt performs basic operations such as insertion, look-up and\nremoval, in O(log(n)) amortized time.\n","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_compare","id":"_compare2()","comment":"Comparison used to compare keys. ","children":[{"ref":{"name":"K","refId":"dart.collection/_SplayTree/K"},"kind":"param","name":"key1","id":"key1"},{"ref":{"name":"K","refId":"dart.collection/_SplayTree/K"},"kind":"param","name":"key2","id":"key2"}],"isPrivate":true,"line":"67"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_splay","id":"_splay1()","comment":"\nPerform the splay operation for the given key. Moves the node with\nthe given key to the top of the tree.  If no node has the given\nkey, the last node on the search path is moved to the top of the\ntree. This is the simplified top-down splaying algorithm from:\n\"Self-adjusting Binary Search Trees\" by Sleator and Tarjan.\n\nReturns the result of comparing the new root of the tree to [key].\nReturns -1 if the table is empty.\n","children":[{"ref":{"name":"K","refId":"dart.collection/_SplayTree/K"},"kind":"param","name":"key","id":"key"}],"isPrivate":true,"line":"79"},{"returnType":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTree/K"}]},"kind":"method","name":"_splayMin","id":"_splayMin1()","children":[{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTree/K"}]},"kind":"param","name":"node","id":"node"}],"isPrivate":true,"line":"143"},{"returnType":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTree/K"}]},"kind":"method","name":"_splayMax","id":"_splayMax1()","children":[{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTree/K"}]},"kind":"param","name":"node","id":"node"}],"isPrivate":true,"line":"159"},{"returnType":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"},"kind":"method","name":"_remove","id":"_remove1()","children":[{"ref":{"name":"K","refId":"dart.collection/_SplayTree/K"},"kind":"param","name":"key","id":"key"}],"isPrivate":true,"line":"170"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_addNewRoot","id":"_addNewRoot2()","comment":"\nAdds a new root node with the given [key] or [value].\n\nThe [comp] value is the result of comparing the existing root's key\nwith key.\n","children":[{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTree/K"}]},"kind":"param","name":"node","id":"node"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"comp","id":"comp"}],"isPrivate":true,"line":"197"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_clear","id":"_clear0()","isPrivate":true,"line":"229"},{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"},"kind":"property","name":"_first","id":"_first","isPrivate":true,"line":"217"},{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode"},"kind":"property","name":"_last","id":"_last","isPrivate":true,"line":"223"},{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTree/K"}]},"kind":"variable","name":"_root","id":"_root","isPrivate":true,"line":"42"},{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTree/K"}]},"kind":"variable","name":"_dummy","id":"_dummy","isPrivate":true,"line":"46"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_count","id":"_count","isPrivate":true,"line":"49"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_modificationCount","id":"_modificationCount","comment":"\nCounter incremented whenever the keys in the map changes.\n\nUsed to detect concurrent modifications.\n","isPrivate":true,"line":"56"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_splayCount","id":"_splayCount","comment":"\nCounter incremented whenever the tree structure changes.\n\nUsed to detect that an in-place traversal cannot use\ncached information that relies on the tree structure.\n","isPrivate":true,"line":"64"},{"kind":"typeparam","name":"K","id":"K"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"39"},{"superclass":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeMapNode/K"}]},"kind":"class","name":"_SplayTreeMapNode","id":"_SplayTreeMapNode","comment":"\nA node in a splay tree based map.\n\nA [_SplayTreeNode] that also contains a value\n","children":[{"ref":{"name":"V","refId":"dart.collection/_SplayTreeMapNode/V"},"kind":"variable","name":"value","id":"value","line":"27"},{"kind":"constructor","name":"","id":"2()","children":[{"ref":{"name":"K","refId":"dart.collection/_SplayTreeMapNode/K"},"kind":"param","name":"key","id":"key"},{"ref":{"name":"V","refId":"dart.collection/_SplayTreeMapNode/V"},"initializedField":{"name":"value","refId":"dart.collection/_SplayTreeMapNode/value"},"kind":"param","name":"value","id":"value"}],"line":"28"},{"kind":"typeparam","name":"K","id":"K"},{"kind":"typeparam","name":"V","id":"V"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"26"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"_SplayTreeNode","id":"_SplayTreeNode","comment":"\nA node in a splay tree. It holds the sorting key and the left\nand right children in the tree.\n","children":[{"ref":{"name":"K","refId":"dart.collection/_SplayTreeNode/K"},"isFinal":true,"kind":"variable","name":"key","id":"key","line":"14"},{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeNode/K"}]},"kind":"variable","name":"left","id":"left","line":"15"},{"ref":{"name":"_SplayTreeNode","refId":"dart.collection/_SplayTreeNode","arguments":[{"name":"K","refId":"dart.collection/_SplayTreeNode/K"}]},"kind":"variable","name":"right","id":"right","line":"16"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"K","refId":"dart.collection/_SplayTreeNode/K"},"initializedField":{"name":"key","refId":"dart.collection/_SplayTreeNode/key"},"kind":"param","name":"key","id":"key"}],"line":"18"},{"kind":"typeparam","name":"K","id":"K"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"13"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"typedef","name":"_Predicate","id":"_Predicate","children":[{"ref":{"name":"T","refId":"dart.collection/_Predicate/T"},"kind":"param","name":"value","id":"value"},{"kind":"typeparam","name":"T","id":"T"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/splay_tree.dart","line":"7"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/_ListQueueIterator/E"}]}],"kind":"class","name":"_ListQueueIterator","id":"_ListQueueIterator","comment":"\nIterator for a [ListQueue].\n\nConsiders any add or remove operation a concurrent modification.\n","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"711"},{"ref":{"name":"E","refId":"dart.collection/_ListQueueIterator/E"},"kind":"property","name":"current","id":"current","line":"709"},{"ref":{"name":"ListQueue","refId":"dart.collection/ListQueue"},"isFinal":true,"kind":"variable","name":"_queue","id":"_queue","isPrivate":true,"line":"697"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_end","id":"_end","isPrivate":true,"line":"698"},{"ref":{"name":"int","refId":"dart.core/int"},"isFinal":true,"kind":"variable","name":"_modificationCount","id":"_modificationCount","isPrivate":true,"line":"699"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_position","id":"_position","isPrivate":true,"line":"700"},{"ref":{"name":"E","refId":"dart.collection/_ListQueueIterator/E"},"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"701"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"ListQueue","refId":"dart.collection/ListQueue"},"kind":"param","name":"queue","id":"queue"}],"line":"703"},{"kind":"typeparam","name":"E","id":"E"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/queue.dart","line":"696"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"E","refId":"dart.collection/ListQueue/E"}]},"interfaces":[{"name":"Queue","refId":"dart.collection/Queue","arguments":[{"name":"E","refId":"dart.collection/ListQueue/E"}]}],"kind":"class","name":"ListQueue","id":"ListQueue","comment":"\nList based [Queue].\n\nKeeps a cyclic buffer of elements, and grows to a larger buffer when\nit fills up. This guarantees constant time peek and remove operations, and\namortized constant time add operations.\n\nThe structure is efficient for any queue or stack usage.\n\nOperations like [removeAll] and [removeWhere] are very\ninefficient. If those are needed, use a [DoubleLinkedQueue] instead.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"action","id":"action","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/queue.dart","line":"405"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"405"},{"returnType":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"433"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListQueue/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"440"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"param","name":"element","id":"element"}],"line":"453"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListQueue/E"}]},"kind":"param","name":"elements","id":"elements"}],"line":"457"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"486"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_filterWhere","id":"_filterWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/queue.dart","line":"498"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"removeMatching","id":"removeMatching"}],"isPrivate":true,"line":"498"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\nRemove all elements matched by [test].\n\nThis method is inefficient since it works by repeatedly removing single\nelements, each of which can take linear time.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/queue.dart","line":"521"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"521"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\nRemove all elements not matched by [test].\n\nThis method is inefficient since it works by repeatedly removing single\nelements, each of which can take linear time.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/queue.dart","line":"531"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"531"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"535"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"546"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addLast","id":"addLast1()","children":[{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"param","name":"element","id":"element"}],"line":"550"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addFirst","id":"addFirst1()","children":[{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"param","name":"element","id":"element"}],"line":"552"},{"returnType":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"method","name":"removeFirst","id":"removeFirst0()","line":"559"},{"returnType":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"method","name":"removeLast","id":"removeLast0()","line":"567"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"_isPowerOf2","id":"_isPowerOf21()","comment":"\nWhether [number] is a power of two.\n\nOnly works for positive numbers.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"number","id":"number"}],"isPrivate":true,"line":"581"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"_nextPowerOf2","id":"_nextPowerOf21()","comment":"\nRounds [number] up to the nearest power of 2.\n\nIf [number] is a power of 2 already, it is returned.\n\nOnly works for positive numbers.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"number","id":"number"}],"isPrivate":true,"line":"590"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_checkModification","id":"_checkModification1()","comment":"Check if the queue has been modified during iteration. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"expectedModificationCount","id":"expectedModificationCount"}],"isPrivate":true,"line":"601"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_add","id":"_add1()","comment":"Adds element at end of queue. Used by both [add] and [addAll]. ","children":[{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"param","name":"element","id":"element"}],"isPrivate":true,"line":"608"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_remove","id":"_remove1()","comment":"\nRemoves the element at [offset] into [_table].\n\nRemoval is performed by linerarly moving elements either before or after\n[offset] by one position.\n\nReturns the new offset of the following element. This may be the same\noffset or the following offset depending on how elements are moved\nto fill the hole.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"offset","id":"offset"}],"isPrivate":true,"line":"625"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_grow","id":"_grow0()","comment":"\nGrow the table when full.\n","isPrivate":true,"line":"656"},{"returnType":{"name":"int","refId":"dart.core/int"},"kind":"method","name":"_writeToList","id":"_writeToList1()","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListQueue/E"}]},"kind":"param","name":"target","id":"target"}],"isPrivate":true,"line":"666"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_preGrow","id":"_preGrow1()","comment":"Grows the table even if it is not full. ","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"newElementCount","id":"newElementCount"}],"isPrivate":true,"line":"681"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/ListQueue/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"403"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"413"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"415"},{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"property","name":"first","id":"first","line":"417"},{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"property","name":"last","id":"last","line":"422"},{"ref":{"name":"E","refId":"dart.collection/ListQueue/E"},"kind":"property","name":"single","id":"single","line":"427"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_INITIAL_CAPACITY","id":"_INITIAL_CAPACITY","isPrivate":true,"line":"362"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/ListQueue/E"}]},"kind":"variable","name":"_table","id":"_table","isPrivate":true,"line":"363"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_head","id":"_head","isPrivate":true,"line":"364"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_tail","id":"_tail","isPrivate":true,"line":"365"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_modificationCount","id":"_modificationCount","isPrivate":true,"line":"366"},{"kind":"constructor","name":"","id":"1()","comment":"\nCreate an empty queue.\n\nIf [initialCapacity] is given, prepare the queue for at least that many\nelements.\n","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"kind":"param","name":"initialCapacity","id":"initialCapacity"}],"line":"374"},{"returnType":{"name":"ListQueue","refId":"dart.collection/ListQueue","arguments":[{"name":"E","refId":"dart.collection/ListQueue/E"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreate a queue initially containing the elements of [source].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/ListQueue/E"}]},"kind":"param","name":"source","id":"source"}],"line":"387"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/queue.dart","line":"361"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.collection/_DoubleLinkedQueueIterator/E"}]}],"kind":"class","name":"_DoubleLinkedQueueIterator","id":"_DoubleLinkedQueueIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"moveNext","id":"moveNext0()","line":"334"},{"ref":{"name":"E","refId":"dart.collection/_DoubleLinkedQueueIterator/E"},"kind":"property","name":"current","id":"current","line":"346"},{"ref":{"name":"_DoubleLinkedQueueEntrySentinel","refId":"dart.collection/_DoubleLinkedQueueEntrySentinel","arguments":[{"name":"E","refId":"dart.collection/_DoubleLinkedQueueIterator/E"}]},"kind":"variable","name":"_sentinel","id":"_sentinel","isPrivate":true,"line":"327"},{"ref":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/_DoubleLinkedQueueIterator/E"}]},"kind":"variable","name":"_nextEntry","id":"_nextEntry","isPrivate":true,"line":"328"},{"ref":{"name":"E","refId":"dart.collection/_DoubleLinkedQueueIterator/E"},"kind":"variable","name":"_current","id":"_current","isPrivate":true,"line":"329"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"_DoubleLinkedQueueEntrySentinel","refId":"dart.collection/_DoubleLinkedQueueEntrySentinel","arguments":[{"name":"E","refId":"dart.collection/_DoubleLinkedQueueIterator/E"}]},"kind":"param","name":"sentinel","id":"sentinel"}],"line":"331"},{"kind":"typeparam","name":"E","id":"E"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/queue.dart","line":"326"},{"superclass":{"name":"IterableBase","refId":"dart.collection/IterableBase","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"}]},"interfaces":[{"name":"Queue","refId":"dart.collection/Queue","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"}]}],"kind":"class","name":"DoubleLinkedQueue","id":"DoubleLinkedQueue","comment":"\nA [Queue] implementation based on a double-linked list.\n\nAllows constant time add, remove-at-ends and peek operations.\n\nCan do [removeAll] and [retainAll] in linear time.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addLast","id":"addLast1()","children":[{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"param","name":"value","id":"value"}],"line":"208"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addFirst","id":"addFirst1()","children":[{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"param","name":"value","id":"value"}],"line":"213"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","children":[{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"param","name":"value","id":"value"}],"line":"218"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"223"},{"returnType":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"method","name":"removeLast","id":"removeLast0()","line":"230"},{"returnType":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"method","name":"removeFirst","id":"removeFirst0()","line":"236"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"o","id":"o"}],"line":"242"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_filter","id":"_filter2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/queue.dart","line":"255"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"param","name":"removeMatching","id":"removeMatching"}],"isPrivate":true,"line":"255"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/queue.dart","line":"267"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"267"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/queue.dart","line":"271"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"271"},{"returnType":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"}]},"kind":"method","name":"lastEntry","id":"lastEntry0()","line":"291"},{"returnType":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"}]},"kind":"method","name":"firstEntry","id":"firstEntry0()","line":"295"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","line":"303"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEachEntry","id":"forEachEntry1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"}]},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/queue.dart","line":"309"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"309"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"323"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"206"},{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"property","name":"first","id":"first","line":"275"},{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"property","name":"last","id":"last","line":"279"},{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"},"kind":"property","name":"single","id":"single","line":"283"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"299"},{"ref":{"name":"_DoubleLinkedQueueIterator","refId":"dart.collection/_DoubleLinkedQueueIterator","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"}]},"kind":"property","name":"iterator","id":"iterator","line":"318"},{"ref":{"name":"_DoubleLinkedQueueEntrySentinel","refId":"dart.collection/_DoubleLinkedQueueEntrySentinel","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"}]},"kind":"variable","name":"_sentinel","id":"_sentinel","isPrivate":true,"line":"191"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_elementCount","id":"_elementCount","isPrivate":true,"line":"192"},{"kind":"constructor","name":"","id":"0()","line":"194"},{"returnType":{"name":"DoubleLinkedQueue","refId":"dart.collection/DoubleLinkedQueue","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"}]},"kind":"constructor","name":"from","id":"from1()","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueue/E"}]},"kind":"param","name":"other","id":"other"}],"line":"198"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/queue.dart","line":"190"},{"superclass":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/_DoubleLinkedQueueEntrySentinel/E"}]},"kind":"class","name":"_DoubleLinkedQueueEntrySentinel","id":"_DoubleLinkedQueueEntrySentinel","comment":"\nA sentinel in a double linked list is used to manipulate the list\nat both ends. A double linked list has exactly one sentinel, which\nis the only entry when the list is constructed. Initially, a\nsentinel has its next and previous entry point to itself. A\nsentinel does not box any user element.\n","children":[{"returnType":{"name":"E","refId":"dart.collection/_DoubleLinkedQueueEntrySentinel/E"},"kind":"method","name":"remove","id":"remove0()","line":"165"},{"returnType":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/_DoubleLinkedQueueEntrySentinel/E"}]},"kind":"method","name":"_asNonSentinelEntry","id":"_asNonSentinelEntry0()","isPrivate":true,"line":"169"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"element=","id":"element=1()","children":[{"ref":{"name":"E","refId":"dart.collection/_DoubleLinkedQueueEntrySentinel/E"},"kind":"param","name":"e","id":"e"}],"line":"173"},{"ref":{"name":"E","refId":"dart.collection/_DoubleLinkedQueueEntrySentinel/E"},"kind":"property","name":"element","id":"element","line":"178"},{"kind":"constructor","name":"","id":"0()","line":"161"},{"kind":"typeparam","name":"E","id":"E"}],"isPrivate":true,"uri":"dart-sdk/lib/collection/queue.dart","line":"160"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"DoubleLinkedQueueEntry","id":"DoubleLinkedQueueEntry","comment":"\nAn entry in a doubly linked list. It contains a pointer to the next\nentry, the previous entry, and the boxed element.\n","children":[{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_link","id":"_link2()","children":[{"ref":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"}]},"kind":"param","name":"p","id":"p"},{"ref":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"}]},"kind":"param","name":"n","id":"n","line":"109"}],"isPrivate":true,"line":"108"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"append","id":"append1()","children":[{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"},"kind":"param","name":"e","id":"e"}],"line":"116"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"prepend","id":"prepend1()","children":[{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"},"kind":"param","name":"e","id":"e"}],"line":"120"},{"returnType":{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"},"kind":"method","name":"remove","id":"remove0()","line":"124"},{"returnType":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"}]},"kind":"method","name":"_asNonSentinelEntry","id":"_asNonSentinelEntry0()","isPrivate":true,"line":"132"},{"returnType":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"}]},"kind":"method","name":"previousEntry","id":"previousEntry0()","line":"136"},{"returnType":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"}]},"kind":"method","name":"nextEntry","id":"nextEntry0()","line":"140"},{"returnType":{"name":"void","refId":"void"},"isSetter":true,"kind":"method","name":"element=","id":"element=1()","children":[{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"},"kind":"param","name":"e","id":"e"}],"line":"148"},{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"},"kind":"property","name":"element","id":"element","line":"144"},{"ref":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"}]},"kind":"variable","name":"_previous","id":"_previous","isPrivate":true,"line":"100"},{"ref":{"name":"DoubleLinkedQueueEntry","refId":"dart.collection/DoubleLinkedQueueEntry","arguments":[{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"}]},"kind":"variable","name":"_next","id":"_next","isPrivate":true,"line":"101"},{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"},"kind":"variable","name":"_element","id":"_element","isPrivate":true,"line":"102"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"E","refId":"dart.collection/DoubleLinkedQueueEntry/E"},"kind":"param","name":"e","id":"e"}],"line":"104"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/queue.dart","line":"99"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"EfficientLength","refId":"dart._collection.dev/EfficientLength"},{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/Queue/E"}]}],"kind":"class","name":"Queue","id":"Queue","comment":"\nA [Queue] is a collection that can be manipulated at both ends. One\ncan iterate over the elements of a queue through [forEach] or with\nan [Iterator].\n\nIt is generally not allowed to modify the queue (add or remove entries) while\nan operation on the queue is being performed, for example during a call to\n[forEach].\nModifying the queue while it is being iterated will most likely break the\niteration.\nThis goes both for using the [iterator] directly, or for iterating an\n`Iterable` returned by a method like [map] or [where].\n","children":[{"returnType":{"name":"E","refId":"dart.collection/Queue/E"},"kind":"method","name":"removeFirst","id":"removeFirst0()","comment":"\nRemoves and returns the first element of this queue. Throws an\n[StateError] exception if this queue is empty.\n","line":"37"},{"returnType":{"name":"E","refId":"dart.collection/Queue/E"},"kind":"method","name":"removeLast","id":"removeLast0()","comment":"\nRemoves and returns the last element of the queue. Throws an\n[StateError] exception if this queue is empty.\n","line":"43"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addFirst","id":"addFirst1()","comment":"\nAdds [value] at the beginning of the queue.\n","children":[{"ref":{"name":"E","refId":"dart.collection/Queue/E"},"kind":"param","name":"value","id":"value"}],"line":"48"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addLast","id":"addLast1()","comment":"\nAdds [value] at the end of the queue.\n","children":[{"ref":{"name":"E","refId":"dart.collection/Queue/E"},"kind":"param","name":"value","id":"value"}],"line":"53"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"add","id":"add1()","comment":"\nAdds [value] at the end of the queue.\n","children":[{"ref":{"name":"E","refId":"dart.collection/Queue/E"},"kind":"param","name":"value","id":"value"}],"line":"58"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"remove","id":"remove1()","comment":"\nRemove a single instance of [value] from the queue.\n\nReturns `true` if a value was removed, or `false` if the queue\ncontained no element equal to [value].\n","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"object","id":"object"}],"line":"66"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"addAll","id":"addAll1()","comment":"\nAdds all elements of [iterable] at the end of the queue. The\nlength of the queue is extended by the length of [iterable].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/Queue/E"}]},"kind":"param","name":"iterable","id":"iterable"}],"line":"72"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"removeWhere","id":"removeWhere1()","comment":"\nRemoves all elements matched by [test] from the queue.\n\nThe `test` function must not throw or modify the queue.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/Queue/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/queue.dart","line":"79"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"79"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"retainWhere","id":"retainWhere1()","comment":"\nRemoves all elements not matched by [test] from the queue.\n\nThe `test` function must not throw or modify the queue.\n","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/Queue/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/queue.dart","line":"86"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"86"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"clear","id":"clear0()","comment":"\nRemoves all elements in the queue. The size of the queue becomes zero.\n","line":"91"},{"returnType":{"name":"Queue","refId":"dart.collection/Queue","arguments":[{"name":"E","refId":"dart.collection/Queue/E"}]},"kind":"constructor","name":"","id":"0()","comment":"\nCreates a queue.\n","line":"25"},{"returnType":{"name":"Queue","refId":"dart.collection/Queue","arguments":[{"name":"E","refId":"dart.collection/Queue/E"}]},"kind":"constructor","name":"from","id":"from1()","comment":"\nCreates a queue with the elements of [other]. The order in\nthe queue will be the order provided by the iterator of [other].\n","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/Queue/E"}]},"kind":"param","name":"other","id":"other"}],"line":"31"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/queue.dart","line":"20"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"Maps","id":"Maps","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"containsValue","id":"containsValue2()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"},{"kind":"param","name":"value","id":"value"}],"line":"14"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"containsKey","id":"containsKey2()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"},{"kind":"param","name":"key","id":"key"}],"line":"23"},{"isStatic":true,"kind":"method","name":"putIfAbsent","id":"putIfAbsent3()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"},{"kind":"param","name":"key","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"ifAbsent","id":"ifAbsent","children":[{"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"32"},{"isStatic":true,"kind":"method","name":"clear","id":"clear1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"}],"line":"41"},{"isStatic":true,"kind":"method","name":"forEach","id":"forEach2()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"key","id":"key","uri":"dart-sdk/lib/collection/maps.dart","line":"47"},{"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/maps.dart","line":"47"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"47"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"isStatic":true,"kind":"method","name":"getValues","id":"getValues1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"}],"line":"53"},{"returnType":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"method","name":"length","id":"length1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"}],"line":"57"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"isEmpty","id":"isEmpty1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"}],"line":"59"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"isStatic":true,"kind":"method","name":"isNotEmpty","id":"isNotEmpty1()","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"}],"line":"61"},{"returnType":{"name":"String","refId":"dart.core/String"},"isStatic":true,"kind":"method","name":"mapToString","id":"mapToString1()","comment":"\nReturns a string representing the specified map. The returned string\nlooks like this: [:'{key0: value0, key1: value1, ... keyN: valueN}':].\nThe value returned by its [toString] method is used to represent each\nkey or value.\n\nIf the map collection contains a reference to itself, either\ndirectly as a key or value, or indirectly through other collections\nor maps, the contained reference is rendered as [:'{...}':]. This\nprevents the infinite regress that would otherwise occur. So, for example,\ncalling this method on a map whose sole entry maps the string key 'me'\nto a reference to the map would return [:'{me: {...}}':].\n\nA typical implementation of a map's [toString] method will\nsimply return the results of this method applied to the collection.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"m","id":"m"}],"line":"82"},{"isStatic":true,"kind":"method","name":"_id","id":"_id1()","children":[{"kind":"param","name":"x","id":"x"}],"isPrivate":true,"line":"110"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_fillMapWithMappedIterable","id":"_fillMapWithMappedIterable4()","comment":"\nFills a map with key/value pairs computed from [iterable].\n\nThis method is used by Map classes in the named constructor fromIterable.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"iterable","id":"iterable"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"key","id":"key","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/maps.dart","line":"118"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"118"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"value","id":"value","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/maps.dart","line":"118"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"118"}],"isPrivate":true,"line":"117"},{"returnType":{"name":"void","refId":"void"},"isStatic":true,"kind":"method","name":"_fillMapWithIterables","id":"_fillMapWithIterables3()","comment":"\nFills a map by associating the [keys] to [values].\n\nThis method is used by Map classes in the named constructor fromIterables.\n","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"kind":"param","name":"map","id":"map"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"keys","id":"keys"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"param","name":"values","id":"values","line":"133"}],"isPrivate":true,"line":"132"},{"ref":{"name":"List","refId":"dart.core/List"},"isStatic":true,"kind":"variable","name":"_toStringList","id":"_toStringList","isPrivate":true,"line":"64"}],"uri":"dart-sdk/lib/collection/maps.dart","line":"13"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"kind":"class","name":"HasNextIterator","id":"HasNextIterator","comment":"\nThe [HasNextIterator] class wraps an [Iterator] and provides methods to\niterate over an object using `hasNext` and `next`.\n\nAn [HasNextIterator] does not implement the [Iterator] interface.\n","children":[{"returnType":{"name":"E","refId":"dart.collection/HasNextIterator/E"},"kind":"method","name":"next","id":"next0()","line":"28"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"_move","id":"_move0()","isPrivate":true,"line":"38"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"hasNext","id":"hasNext","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_HAS_NEXT_AND_NEXT_IN_CURRENT","id":"_HAS_NEXT_AND_NEXT_IN_CURRENT","isPrivate":true,"line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_NO_NEXT","id":"_NO_NEXT","isPrivate":true,"line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"kind":"variable","name":"_NOT_MOVED_YET","id":"_NOT_MOVED_YET","isPrivate":true,"line":"16"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator"},"kind":"variable","name":"_iterator","id":"_iterator","isPrivate":true,"line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"variable","name":"_state","id":"_state","isPrivate":true,"line":"19"},{"kind":"constructor","name":"","id":"1()","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator"},"initializedField":{"name":"_iterator","refId":"dart.collection/HasNextIterator/_iterator"},"kind":"param","name":"_iterator","id":"_iterator","isPrivate":true}],"line":"21"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/iterator.dart","line":"13"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]}],"kind":"class","name":"IterableBase","id":"IterableBase","comment":"\nBase class for implementing [Iterable].\n\nThis class implements all methods of [Iterable] except [Iterable.iterator]\nin terms of `iterator`.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"207"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"207"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"209"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"209"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"211"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"211"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"214"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"221"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"221"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"225"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"225"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"225"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/iterable.dart","line":"238"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"238"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"238"}],"line":"237"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"244"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"244"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"251"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"269"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"269"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"276"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"279"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"295"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"299"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"299"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"303"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableBase/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"307"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"307"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"339"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"339"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"347"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"347"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"361"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"361"},{"returnType":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"377"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","comment":"\nReturns a string representation of (some of) the elements of `this`.\n\nElements are represented by their own `toString` results.\n\nThe representation always contains the first three elements.\nIf there are less than a hundred elements in the iterable, it also\ncontains the last two elements.\n\nIf the resulting string isn't above 80 characters, more elements are\nincluded from the start of the iterable.\n\nThe conversion may omit calling `toString` on some elements if they\nare known to now occur in the output, and it may stop iterating after\na hundred elements.\n","line":"403"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"281"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"291"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"293"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"first","id":"first","line":"311"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"last","id":"last","line":"319"},{"ref":{"name":"E","refId":"dart.collection/IterableBase/E"},"kind":"property","name":"single","id":"single","line":"331"},{"kind":"constructor","name":"","id":"0()","line":"205"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/iterable.dart","line":"202"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"interfaces":[{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]}],"kind":"class","name":"IterableMixin","id":"IterableMixin","comment":"\nThis [Iterable] mixin implements all [Iterable] members except `iterator`.\n\nAll other methods are implemented in terms of `iterator`.\n","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"map","id":"map1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart"}],"uri":"dart-sdk/lib/core/function.dart"}]}],"line":"13"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"where","id":"where1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"15"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"15"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"method","name":"expand","id":"expand1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"17"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"17"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"contains","id":"contains1()","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"kind":"param","name":"element","id":"element"}],"line":"20"},{"returnType":{"name":"void","refId":"void"},"kind":"method","name":"forEach","id":"forEach1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"void","refId":"void"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"27"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"27"},{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"method","name":"reduce","id":"reduce1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"31"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"31"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"31"},{"kind":"method","name":"fold","id":"fold2()","children":[{"kind":"param","name":"initialValue","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"combine","id":"combine","children":[{"kind":"functiontype","name":"Function","id":"Function","children":[{"kind":"param","name":"previousValue","id":"previousValue","uri":"dart-sdk/lib/collection/iterable.dart","line":"44"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"44"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}],"line":"44"}],"line":"43"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"every","id":"every1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"50"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"50"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"join","id":"join1()","children":[{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"kind":"param","name":"separator","id":"separator"}],"line":"57"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"method","name":"any","id":"any1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"f","id":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"element","id":"element","uri":"dart-sdk/lib/collection/iterable.dart","line":"75"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"75"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"toList","id":"toList1()","children":[{"ref":{"name":"bool","refId":"dart.core/bool"},"defaultValue":"true","isOptional":true,"isNamed":true,"kind":"param","name":"growable","id":"growable"}],"line":"82"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"toSet","id":"toSet0()","line":"85"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"take","id":"take1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"101"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"takeWhile","id":"takeWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"105"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"105"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"skip","id":"skip1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"n","id":"n"}],"line":"109"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/IterableMixin/E"}]},"kind":"method","name":"skipWhile","id":"skipWhile1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"113"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"113"},{"kind":"method","name":"firstWhere","id":"firstWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"145"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"145"},{"kind":"method","name":"lastWhere","id":"lastWhere2()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"153"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"isNamed":true,"kind":"param","name":"orElse","id":"orElse","children":[{"returnType":{"name":"Object","refId":"dart.core/Object"},"kind":"functiontype","name":"Function","id":"Function","uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"153"},{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"method","name":"singleWhere","id":"singleWhere1()","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"kind":"param","name":"test","id":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"kind":"functiontype","name":"Function","id":"Function","children":[{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"param","name":"value","id":"value","uri":"dart-sdk/lib/collection/iterable.dart","line":"167"}],"uri":"dart-sdk/lib/core/function.dart","line":"13"}]}],"line":"167"},{"returnType":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"method","name":"elementAt","id":"elementAt1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"183"},{"returnType":{"name":"String","refId":"dart.core/String"},"kind":"method","name":"toString","id":"toString0()","line":"193"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"87"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isEmpty","id":"isEmpty","line":"97"},{"ref":{"name":"bool","refId":"dart.core/bool"},"kind":"property","name":"isNotEmpty","id":"isNotEmpty","line":"99"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"property","name":"first","id":"first","line":"117"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"property","name":"last","id":"last","line":"125"},{"ref":{"name":"E","refId":"dart.collection/IterableMixin/E"},"kind":"property","name":"single","id":"single","line":"137"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/iterable.dart","line":"12"},{"superclass":{"name":"UnmodifiableListBase","refId":"dart._collection.dev/UnmodifiableListBase","arguments":[{"name":"E","refId":"dart.collection/UnmodifiableListView/E"}]},"kind":"class","name":"UnmodifiableListView","id":"UnmodifiableListView","comment":"\nAn unmodifiable [List] view of another List.\n\nThe source of the elements may be a [List] or any [Iterable] with\nefficient [Iterable.length] and [Iterable.elementAt].\n","children":[{"returnType":{"name":"E","refId":"dart.collection/UnmodifiableListView/E"},"isOperator":true,"kind":"method","name":"[]","id":"[]1()","children":[{"ref":{"name":"int","refId":"dart.core/int"},"kind":"param","name":"index","id":"index"}],"line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"kind":"property","name":"length","id":"length","line":"17"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/UnmodifiableListView/E"}]},"isFinal":true,"kind":"variable","name":"_source","id":"_source","isPrivate":true,"line":"14"},{"kind":"constructor","name":"","id":"1()","comment":"Create an unmodifiable list backed by [source]. ","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.collection/UnmodifiableListView/E"}]},"kind":"param","name":"source","id":"source"}],"line":"16"},{"kind":"typeparam","name":"E","id":"E"}],"uri":"dart-sdk/lib/collection/collections.dart","line":"13"}],"uri":"dart-sdk/lib/collection/collection.dart","line":"8"}